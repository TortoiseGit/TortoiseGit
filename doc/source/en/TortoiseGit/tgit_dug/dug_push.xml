<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE sect1 SYSTEM "../../../dtd/dblite.dtd">
<sect1 id="tgit-dug-push">
	<title>Push</title>
	<?dbhh topicname="HIDD_PUSH"?>
	<indexterm>
		<primary>Push</primary>
	</indexterm>
	<para>
		Push Change to the other repository. You must push change to bare repository. 
		If you push change to repository with working tree, there are unexpected results.
	</para>
	<para>
		<menuchoice>
			<guimenu>TortoiseGit
			</guimenu>
			<guimenuitem>Push...
			</guimenuitem>
		</menuchoice>. 
	</para>
	<para>
		Push Dialog will show. <graphic fileref="../images/GitPush.png"/>
	</para>
	<sect2>
		<title>Branch</title>
		<para>
			<guilabel>Local:</guilabel> The source branch which will be pushed to the other repository.
		</para>
		<para>
			<guilabel>Remote:</guilabel> The remote branch of the other repository. 
		</para>
	</sect2>
	<sect2>
		<title>Destination</title>
		<para>
			<guilabel>Remote:</guilabel> Choose remote repository.
		</para>
		<para>
			<guilabel>Arbitrary URL:</guilabel> The remote repository url. 
		</para>
	</sect2>
	<sect2>
		<title>Options</title>
		<para>
			<guilabel>Force (May discard known changes)</guilabel>
			This allows remote repository to accept a safer non-fast-forward push. This can cause the remote repository to lose commits; use it with care.
			This can prevent from losing unknown changes from other people on the remote.
			It checks if the server branch points to the same commit as the remote-tracking branch (known changes).
			If yes, a force push will be performed. Otherwise it will be rejected.
			Since git does not have remote-tracking tags, tags cannot be overwritten using this option.
			This passes <literal>--force-with-lease</literal> option of <literal>git push</literal> command.
		</para>
		<para>
			<guilabel>Force (May discard unknown changes)</guilabel>
			This allows remote repository to accept an unsafe non-fast-forward push. This can cause the remote repository to lose commits; use it with care.
			This does not check any server commits, so it is possible to lose unknown changes on the remote.
			Use this option with <guilabel>Include Tags</guilabel> to overwrite tags.
			This passes the traditional <literal>--force</literal> option of <literal>git push</literal> command.
		</para>
		<para>
			<guilabel>Use Thin Pack(For slow network connections)</guilabel>
		</para>
		<para>
			<guilabel>Include Tags</guilabel>
			Also push tags to remote repository.
		</para>
		<para>
			<guilabel>Autoload Putty Key</guilabel>
		</para>
		<tip>
			<para>You can find more information about PuTTY and using ssh-keys at <xref linkend="tgit-ssh-howto"/>.</para>
		</tip>
		<para>
			<guilabel>Set upstream/track remote branch</guilabel>
			After a successful push, the tracking relationship will be set between the pushed local branch and its remote tracking branch.
		</para>
		<para>
			<guilabel>Always push to the selected remote archive for this local branch</guilabel>
		</para>
		<para>
			<guilabel>Always push to the selected remote branch for this local branch</guilabel>
		</para>
		<para>
			<guilabel>Recurse submodule</guilabel>
			None: No checking.
			Check: Checks if the bounded commits of all submodules are present on the remote repositories. If any of the submodules are not pushed, the superproject push will fail.
			On-demand: Checks if the bounded commits of all submodules are present on the remote repositories. If the submodules are not pushed yet, it will try to push them.
		</para>
	</sect2>
	<para>
		You can find more information at <xref linkend="git-push(1)"/>
	</para>
</sect1>