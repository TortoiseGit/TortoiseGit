<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="git-notes(1)">
    <title>git-notes(1)</title>
<indexterm>
<primary>git-notes(1)</primary>
</indexterm>
<simplesect id="git-notes(1)__name">
<title>NAME</title>
<simpara>git-notes - Add or inspect object notes</simpara>
</simplesect>
<simplesect id="git-notes(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><code>git</code> <code>notes</code> [<code>list</code> [<emphasis>&lt;object&gt;</emphasis>]]
<code>git</code> <code>notes</code> <code>add</code> [<code>-f</code>] [<code>--allow-empty</code>] [<code>--</code>[<code>no-</code>]<code>separator</code> | <code>--separator=</code><emphasis>&lt;paragraph-break&gt;</emphasis>] [<code>--</code>[<code>no-</code>]<code>stripspace</code>] [<code>-F</code> <emphasis>&lt;file&gt;</emphasis> | <code>-m</code> <emphasis>&lt;msg&gt;</emphasis> | (<code>-c</code> | <code>-C</code>) <emphasis>&lt;object&gt;</emphasis>] [<code>-e</code>] [<emphasis>&lt;object&gt;</emphasis>]
<code>git</code> <code>notes</code> <code>copy</code> [<code>-f</code>] ( <code>--stdin</code> | <emphasis>&lt;from-object&gt;</emphasis> [<emphasis>&lt;to-object&gt;</emphasis>] )
<code>git</code> <code>notes</code> <code>append</code> [<code>--allow-empty</code>] [<code>--</code>[<code>no-</code>]<code>separator</code> | <code>--separator=</code><emphasis>&lt;paragraph-break&gt;</emphasis>] [<code>--</code>[<code>no-</code>]<code>stripspace</code>] [<code>-F</code> <emphasis>&lt;file&gt;</emphasis> | <code>-m</code> <emphasis>&lt;msg&gt;</emphasis> | (<code>-c</code> | <code>-C</code>) <emphasis>&lt;object&gt;</emphasis>] [<code>-e</code>] [<emphasis>&lt;object&gt;</emphasis>]
<code>git</code> <code>notes</code> <code>edit</code> [<code>--allow-empty</code>] [<emphasis>&lt;object&gt;</emphasis>] [<code>--</code>[<code>no-</code>]<code>stripspace</code>]
<code>git</code> <code>notes</code> <code>show</code> [<emphasis>&lt;object&gt;</emphasis>]
<code>git</code> <code>notes</code> <code>merge</code> [<code>-v</code> | <code>-q</code>] [<code>-s</code> <emphasis>&lt;strategy&gt;</emphasis> ] <emphasis>&lt;notes-ref&gt;</emphasis>
<code>git</code> <code>notes</code> <code>merge</code> <code>--commit</code> [<code>-v</code> | <code>-q</code>]
<code>git</code> <code>notes</code> <code>merge</code> <code>--abort</code> [<code>-v</code> | <code>-q</code>]
<code>git</code> <code>notes</code> <code>remove</code> [<code>--ignore-missing</code>] [<code>--stdin</code>] [<emphasis>&lt;object&gt;</emphasis><code>&#8230;</code>]
<code>git</code> <code>notes</code> <code>prune</code> [<code>-n</code>] [<code>-v</code>]
<code>git</code> <code>notes</code> <code>get-ref</code></literallayout>
</blockquote>
</simplesect>
<simplesect id="git-notes(1)__description">
<title>DESCRIPTION</title>
<simpara>Adds, removes, or reads notes attached to objects, without touching
the objects themselves.</simpara>
<simpara>By default, notes are saved to and read from <emphasis>refs/notes/commits</emphasis>, but
this default can be overridden.  See the OPTIONS, CONFIGURATION, and
ENVIRONMENT sections below.  If this ref does not exist, it will be
quietly created when it is first needed to store a note.</simpara>
<simpara>A typical use of notes is to supplement a commit message without
changing the commit itself. Notes can be shown by <emphasis>git log</emphasis> along with
the original commit message. To distinguish these notes from the
message stored in the commit object, the notes are indented like the
message, after an unindented line saying "Notes (<emphasis>&lt;refname&gt;</emphasis>):" (or
"Notes:" for <emphasis>refs/notes/commits</emphasis>).</simpara>
<simpara>Notes can also be added to patches prepared with <emphasis>git format-patch</emphasis> by
using the <emphasis>--notes</emphasis> option. Such notes are added as a patch commentary
after a three dash separator line.</simpara>
<simpara>To change which notes are shown by <emphasis>git log</emphasis>, see the
<emphasis>notes.displayRef</emphasis> discussion in <link linkend="git-notes(1)_CONFIGURATION">CONFIGURATION</link>.</simpara>
<simpara>See the <emphasis>notes.rewrite.&lt;command&gt;</emphasis> configuration for a way to carry
notes across commands that rewrite commits.</simpara>
</simplesect>
<simplesect id="git-notes(1)__subcommands">
<title>SUBCOMMANDS</title>
<variablelist>
<varlistentry>
<term>
<emphasis>list</emphasis>
</term>
<listitem>
<simpara>
        List the notes object for a given object. If no object is
        given, show a list of all note objects and the objects they
        annotate (in the format "<emphasis>&lt;note-object&gt; &lt;annotated-object&gt;</emphasis>").
        This is the default subcommand if no subcommand is given.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>add</emphasis>
</term>
<listitem>
<simpara>
        Add notes for a given object (defaults to <emphasis>HEAD</emphasis>). Abort if the
        object already has notes (use <emphasis>-f</emphasis> to overwrite existing notes).
        However, if you're using <emphasis>add</emphasis> interactively (using an editor
        to supply the notes contents), then - instead of aborting -
        the existing notes will be opened in the editor (like the <emphasis>edit</emphasis>
        subcommand). If you specify multiple <emphasis>-m</emphasis> and <emphasis>-F</emphasis>, a blank
        line will be inserted between the messages. Use the <emphasis>--separator</emphasis>
        option to insert other delimiters. You can use <emphasis>-e</emphasis> to edit and
        fine-tune the message(s) supplied from <emphasis>-m</emphasis> and <emphasis>-F</emphasis> options
        interactively (using an editor) before adding the note.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>copy</emphasis>
</term>
<listitem>
<simpara>
        Copy the notes for the first object onto the second object (defaults to
        <emphasis>HEAD</emphasis>). Abort if the second object already has notes, or if the first
        object has none (use <emphasis>-f</emphasis> to overwrite existing notes to the
        second object). This subcommand is equivalent to:
        <emphasis>git notes add [-f] -C $(git notes list &lt;from-object&gt;) &lt;to-object&gt;</emphasis>
</simpara>
<simpara>In <emphasis>--stdin</emphasis> mode, take lines in the format</simpara>
<screen>&lt;from-object&gt; SP &lt;to-object&gt; [ SP &lt;rest&gt; ] LF</screen>
<simpara>on standard input, and copy the notes from each <emphasis>&lt;from-object&gt;</emphasis> to its
corresponding <emphasis>&lt;to-object&gt;</emphasis>.  (The optional <emphasis>&lt;rest&gt;</emphasis> is ignored so that
the command can read the input given to the <emphasis>post-rewrite</emphasis> hook.)</simpara>
<simpara><emphasis>--stdin</emphasis> cannot be combined with object names given on the command
line.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>append</emphasis>
</term>
<listitem>
<simpara>
        Append new message(s) given by <emphasis>-m</emphasis> or <emphasis>-F</emphasis> options to an
        existing note, or add them as a new note if one does not
        exist, for the object (defaults to <emphasis>HEAD</emphasis>).  When appending to
        an existing note, a blank line is added before each new
        message as an inter-paragraph separator.  The separator can
        be customized with the <emphasis>--separator</emphasis> option.
        Edit the notes to be appended given by <emphasis>-m</emphasis> and <emphasis>-F</emphasis> options with
        <emphasis>-e</emphasis> interactively (using an editor) before appending the note.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>edit</emphasis>
</term>
<listitem>
<simpara>
        Edit the notes for a given object (defaults to <emphasis>HEAD</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>show</emphasis>
</term>
<listitem>
<simpara>
        Show the notes for a given object (defaults to <emphasis>HEAD</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge</emphasis>
</term>
<listitem>
<simpara>
        Merge the given notes ref into the current notes ref.
        This will try to merge the changes made by the given
        notes ref (called "remote") since the merge-base (if
        any) into the current notes ref (called "local").
</simpara>
<simpara>If conflicts arise and a strategy for automatically resolving
conflicting notes (see the "NOTES MERGE STRATEGIES" section) is not given,
the <emphasis>manual</emphasis> resolver is used. This resolver checks out the
conflicting notes in a special worktree (<emphasis>.git/NOTES_MERGE_WORKTREE</emphasis>),
and instructs the user to manually resolve the conflicts there.
When done, the user can either finalize the merge with
<emphasis>git notes merge --commit</emphasis>, or abort the merge with
<emphasis>git notes merge --abort</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>remove</emphasis>
</term>
<listitem>
<simpara>
        Remove the notes for given objects (defaults to <emphasis>HEAD</emphasis>). When
        giving zero or one object from the command line, this is
        equivalent to specifying an empty note message to
        the <emphasis>edit</emphasis> subcommand.
</simpara>
<simpara>In <emphasis>--stdin</emphasis> mode, also remove the object names given on standard
input. In other words, <emphasis>--stdin</emphasis> can be combined with object names from
the command line.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>prune</emphasis>
</term>
<listitem>
<simpara>
        Remove all notes for non-existing/unreachable objects.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>get-ref</emphasis>
</term>
<listitem>
<simpara>
        Print the current notes ref. This provides an easy way to
        retrieve the current notes ref (e.g. from scripts).
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-notes(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
<emphasis>-f</emphasis>
</term>
<term>
<emphasis>--force</emphasis>
</term>
<listitem>
<simpara>
        When adding notes to an object that already has notes,
        overwrite the existing notes (instead of aborting).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-m &lt;msg&gt;</emphasis>
</term>
<term>
<emphasis>--message=&lt;msg&gt;</emphasis>
</term>
<listitem>
<simpara>
        Use the given note message (instead of prompting).
        If multiple <emphasis>-m</emphasis> options are given, their values
        are concatenated as separate paragraphs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-F &lt;file&gt;</emphasis>
</term>
<term>
<emphasis>--file=&lt;file&gt;</emphasis>
</term>
<listitem>
<simpara>
        Take the note message from the given file.  Use <emphasis>-</emphasis> to
        read the note message from the standard input.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-C &lt;object&gt;</emphasis>
</term>
<term>
<emphasis>--reuse-message=&lt;object&gt;</emphasis>
</term>
<listitem>
<simpara>
        Take the given blob object (for example, another note) as the
        note message. (Use <emphasis>git notes copy &lt;object&gt;</emphasis> instead to
        copy notes between objects.)  Implies <emphasis>--no-stripspace</emphasis> since
        the default behavior is to copy the message verbatim.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-c &lt;object&gt;</emphasis>
</term>
<term>
<emphasis>--reedit-message=&lt;object&gt;</emphasis>
</term>
<listitem>
<simpara>
        Like <emphasis>-C</emphasis>, but with <emphasis>-c</emphasis> the editor is invoked, so that
        the user can further edit the note message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--allow-empty</emphasis>
</term>
<listitem>
<simpara>
        Allow an empty note object to be stored. The default behavior is
        to automatically remove empty notes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--separator=&lt;paragraph-break&gt;</emphasis>
</term>
<term>
<emphasis>--separator</emphasis>
</term>
<term>
<emphasis>--no-separator</emphasis>
</term>
<listitem>
<simpara>
        Specify a string used as a custom inter-paragraph separator
        (a newline is added at the end as needed). If <emphasis>--no-separator</emphasis>, no
        separators will be added between paragraphs.  Defaults to a blank
        line.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--stripspace</emphasis>
</term>
<term>
<emphasis>--no-stripspace</emphasis>
</term>
<listitem>
<simpara>
        Clean up whitespace. Specifically (see
        <xref linkend="git-stripspace(1)" />):
</simpara>
<itemizedlist>
<listitem>
<simpara>
remove trailing whitespace from all lines
</simpara>
</listitem>
<listitem>
<simpara>
collapse multiple consecutive empty lines into one empty line
</simpara>
</listitem>
<listitem>
<simpara>
remove empty lines from the beginning and end of the input
</simpara>
</listitem>
<listitem>
<simpara>
add a missing <emphasis>\n</emphasis> to the last line if necessary.
</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>--stripspace</emphasis> is the default except for
<emphasis>-C</emphasis>/<emphasis>--reuse-message</emphasis>. However, keep in mind that this depends on the
order of similar options. For example, for <emphasis>-C &lt;object&gt; -m&lt;message&gt;</emphasis>,
<emphasis>--stripspace</emphasis> will be used because the default for <emphasis>-m</emphasis> overrides the
previous <emphasis>-C</emphasis>. This is a known limitation that may be fixed in the
future.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ref=&lt;ref&gt;</emphasis>
</term>
<listitem>
<simpara>
        Manipulate the notes tree in <emphasis>&lt;ref&gt;</emphasis>.  This overrides
        <emphasis>GIT_NOTES_REF</emphasis> and the <emphasis>core.notesRef</emphasis> configuration.  The ref
        specifies the full refname when it begins with <emphasis>refs/notes/</emphasis>; when it
        begins with <emphasis>notes/</emphasis>, <emphasis>refs/</emphasis> and otherwise <emphasis>refs/notes/</emphasis> is prefixed
        to form a full name of the ref.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ignore-missing</emphasis>
</term>
<listitem>
<simpara>
        Do not consider it an error to request removing notes from an
        object that does not have notes attached to it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--stdin</emphasis>
</term>
<listitem>
<simpara>
        Only valid for <emphasis>remove</emphasis> and <emphasis>copy</emphasis>. See the respective subcommands.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-n</emphasis>
</term>
<term>
<emphasis>--dry-run</emphasis>
</term>
<listitem>
<simpara>
        Do not remove anything; just report the object names whose notes
        would be removed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-s &lt;strategy&gt;</emphasis>
</term>
<term>
<emphasis>--strategy=&lt;strategy&gt;</emphasis>
</term>
<listitem>
<simpara>
        When merging notes, resolve notes conflicts using the given
        strategy. The following strategies are recognized: <emphasis>manual</emphasis>
        (default), <emphasis>ours</emphasis>, <emphasis>theirs</emphasis>, <emphasis>union</emphasis> and <emphasis>cat_sort_uniq</emphasis>.
        This option overrides the <emphasis>notes.mergeStrategy</emphasis> configuration setting.
        See the "NOTES MERGE STRATEGIES" section below for more
        information on each notes merge strategy.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--commit</emphasis>
</term>
<listitem>
<simpara>
        Finalize an in-progress <emphasis>git notes merge</emphasis>. Use this option
        when you have resolved the conflicts that <emphasis>git notes merge</emphasis>
        stored in <emphasis>.git/NOTES_MERGE_WORKTREE</emphasis>. This amends the partial
        merge commit created by <emphasis>git notes merge</emphasis> (stored in
        <emphasis>.git/NOTES_MERGE_PARTIAL</emphasis>) by adding the notes in
        <emphasis>.git/NOTES_MERGE_WORKTREE</emphasis>. The notes ref stored in the
        <emphasis>.git/NOTES_MERGE_REF</emphasis> symref is updated to the resulting commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--abort</emphasis>
</term>
<listitem>
<simpara>
        Abort/reset an in-progress <emphasis>git notes merge</emphasis>, i.e. a notes merge
        with conflicts. This simply removes all files related to the
        notes merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-q</emphasis>
</term>
<term>
<emphasis>--quiet</emphasis>
</term>
<listitem>
<simpara>
        When merging notes, operate quietly.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-v</emphasis>
</term>
<term>
<emphasis>--verbose</emphasis>
</term>
<listitem>
<simpara>
        When merging notes, be more verbose.
        When pruning notes, report all object names whose notes are
        removed.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-notes(1)__discussion">
<title>DISCUSSION</title>
<simpara>Commit notes are blobs containing extra information about an object
(usually information to supplement a commit's message).  These blobs
are taken from notes refs.  A notes ref is usually a branch which
contains "files" whose paths are the object names for the objects
they describe, with some directory separators included for performance
reasons <footnote><simpara>Permitted pathnames have the form
<emphasis>bf</emphasis><emphasis>/</emphasis><emphasis>fe</emphasis><emphasis>/</emphasis><emphasis>30</emphasis><emphasis>/</emphasis><emphasis>&#8230;</emphasis><emphasis>/</emphasis><emphasis>680d5a&#8230;</emphasis>: a sequence of directory
names of two hexadecimal digits each followed by a filename with the
rest of the object ID.</simpara></footnote>.</simpara>
<simpara>Every notes change creates a new commit at the specified notes ref.
You can therefore inspect the history of the notes by invoking, e.g.,
<emphasis>git log -p notes/commits</emphasis>.  Currently the commit message only records
which operation triggered the update, and the commit authorship is
determined according to the usual rules (see <xref linkend="git-commit(1)" />).
These details may change in the future.</simpara>
<simpara>It is also permitted for a notes ref to point directly to a tree
object, in which case the history of the notes can be read with
<emphasis>git log -p -g &lt;refname&gt;</emphasis>.</simpara>
</simplesect>
<simplesect id="git-notes(1)__notes_merge_strategies">
<title>NOTES MERGE STRATEGIES</title>
<simpara>The default notes merge strategy is <emphasis>manual</emphasis>, which checks out
conflicting notes in a special work tree for resolving notes conflicts
(<emphasis>.git/NOTES_MERGE_WORKTREE</emphasis>), and instructs the user to resolve the
conflicts in that work tree.
When done, the user can either finalize the merge with
<emphasis>git notes merge --commit</emphasis>, or abort the merge with
<emphasis>git notes merge --abort</emphasis>.</simpara>
<simpara>Users may select an automated merge strategy from among the following using
either <emphasis>-s</emphasis>/<emphasis>--strategy</emphasis> option or configuring <emphasis>notes.mergeStrategy</emphasis> accordingly:</simpara>
<simpara><emphasis>ours</emphasis> automatically resolves conflicting notes in favor of the local
version (i.e. the current notes ref).</simpara>
<simpara><emphasis>theirs</emphasis> automatically resolves notes conflicts in favor of the remote
version (i.e. the given notes ref being merged into the current notes
ref).</simpara>
<simpara><emphasis>union</emphasis> automatically resolves notes conflicts by concatenating the
local and remote versions.</simpara>
<simpara><emphasis>cat_sort_uniq</emphasis> is similar to <emphasis>union</emphasis>, but in addition to concatenating
the local and remote versions, this strategy also sorts the resulting
lines, and removes duplicate lines from the result. This is equivalent
to applying the "cat | sort | uniq" shell pipeline to the local and
remote versions. This strategy is useful if the notes follow a line-based
format where one wants to avoid duplicated lines in the merge result.
Note that if either the local or remote version contain duplicate lines
prior to the merge, these will also be removed by this notes merge
strategy.</simpara>
</simplesect>
<simplesect id="git-notes(1)__examples">
<title>EXAMPLES</title>
<simpara>You can use notes to add annotations with information that was not
available at the time a commit was written.</simpara>
<screen>$ git notes add -m 'Tested-by: Johannes Sixt &lt;j6t@kdbg.org&gt;' 72a144e2
$ git show -s 72a144e
[...]
    Signed-off-by: Junio C Hamano &lt;gitster@pobox.com&gt;

Notes:
    Tested-by: Johannes Sixt &lt;j6t@kdbg.org&gt;</screen>
<simpara>In principle, a note is a regular Git blob, and any kind of
(non-)format is accepted.  You can binary-safely create notes from
arbitrary files using <emphasis>git hash-object</emphasis>:</simpara>
<screen>$ cc *.c
$ blob=$(git hash-object -w a.out)
$ git notes --ref=built add --allow-empty -C "$blob" HEAD</screen>
<simpara>(You cannot simply use <emphasis>git notes --ref=built add -F a.out HEAD</emphasis>
because that is not binary-safe.)
Of course, it doesn't make much sense to display non-text-format notes
with <emphasis>git log</emphasis>, so if you use such notes, you'll probably need to write
some special-purpose tools to do something useful with them.</simpara>
</simplesect>
<simplesect id="git-notes(1)_CONFIGURATION">
<title>CONFIGURATION</title>
<variablelist>
<varlistentry>
<term>
<emphasis>core.notesRef</emphasis>
</term>
<listitem>
<simpara>
        Notes ref to read and manipulate instead of
        <emphasis>refs/notes/commits</emphasis>.  Must be an unabbreviated ref name.
        This setting can be overridden through the environment and
        command line.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Everything above this line in this section isn't included from the
<xref linkend="git-config(1)" /> documentation. The content that follows is the
same as what's found there:</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>notes.mergeStrategy</emphasis>
</term>
<listitem>
<simpara>
        Which merge strategy to choose by default when resolving notes
        conflicts.  Must be one of <emphasis>manual</emphasis>, <emphasis>ours</emphasis>, <emphasis>theirs</emphasis>, <emphasis>union</emphasis>, or
        <emphasis>cat_sort_uniq</emphasis>.  Defaults to <emphasis>manual</emphasis>.  See the "NOTES MERGE STRATEGIES"
        section of <xref linkend="git-notes(1)" /> for more information on each strategy.
</simpara>
<simpara>This setting can be overridden by passing the <emphasis>--strategy</emphasis> option to
<xref linkend="git-notes(1)" />.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.&lt;name&gt;.mergeStrategy</emphasis>
</term>
<listitem>
<simpara>
        Which merge strategy to choose when doing a notes merge into
        <emphasis>refs/notes/&lt;name&gt;</emphasis>.  This overrides the more general
        <emphasis>notes.mergeStrategy</emphasis>.  See the "NOTES MERGE STRATEGIES" section in
        <xref linkend="git-notes(1)" /> for more information on the available strategies.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.displayRef</emphasis>
</term>
<listitem>
<simpara>
        Which ref (or refs, if a glob or specified more than once), in
        addition to the default set by <emphasis>core.notesRef</emphasis> or
        <emphasis>GIT_NOTES_REF</emphasis>, to read notes from when showing commit
        messages with the <emphasis>git log</emphasis> family of commands.
</simpara>
<simpara>This setting can be overridden with the <emphasis>GIT_NOTES_DISPLAY_REF</emphasis>
environment variable, which must be a colon separated list of refs or
globs.</simpara>
<simpara>A warning will be issued for refs that do not exist,
but a glob that does not match any refs is silently ignored.</simpara>
<simpara>This setting can be disabled by the <emphasis>--no-notes</emphasis> option to the <xref linkend="git-log(1)" />
family of commands, or by the <emphasis>--notes=&lt;ref&gt;</emphasis> option accepted by
those commands.</simpara>
<simpara>The effective value of <emphasis>core.notesRef</emphasis> (possibly overridden by
<emphasis>GIT_NOTES_REF</emphasis>) is also implicitly added to the list of refs to be
displayed.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.rewrite.&lt;command&gt;</emphasis>
</term>
<listitem>
<simpara>
        When rewriting commits with <emphasis>&lt;command&gt;</emphasis> (currently <emphasis>amend</emphasis> or
        <emphasis>rebase</emphasis>), if this variable is <emphasis>false</emphasis>, git will not copy
        notes from the original to the rewritten commit.  Defaults to
        <emphasis>true</emphasis>.  See also <emphasis>notes.rewriteRef</emphasis> below.
</simpara>
<simpara>This setting can be overridden with the <emphasis>GIT_NOTES_REWRITE_REF</emphasis>
environment variable, which must be a colon separated list of refs or
globs.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.rewriteMode</emphasis>
</term>
<listitem>
<simpara>
        When copying notes during a rewrite (see the
        <emphasis>notes.rewrite.&lt;command&gt;</emphasis> option), determines what to do if
        the target commit already has a note.  Must be one of
        <emphasis>overwrite</emphasis>, <emphasis>concatenate</emphasis>, <emphasis>cat_sort_uniq</emphasis>, or <emphasis>ignore</emphasis>.
        Defaults to <emphasis>concatenate</emphasis>.
</simpara>
<simpara>This setting can be overridden with the <emphasis>GIT_NOTES_REWRITE_MODE</emphasis>
environment variable.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.rewriteRef</emphasis>
</term>
<listitem>
<simpara>
        When copying notes during a rewrite, specifies the (fully
        qualified) ref whose notes should be copied.  May be a glob,
        in which case notes in all matching refs will be copied.  You
        may also specify this configuration several times.
</simpara>
<simpara>Does not have a default value; you must configure this variable to
enable note rewriting.  Set it to <emphasis>refs/notes/commits</emphasis> to enable
rewriting for the default commit notes.</simpara>
<simpara>Can be overridden with the <emphasis>GIT_NOTES_REWRITE_REF</emphasis> environment variable.
See <emphasis>notes.rewrite.&lt;command&gt;</emphasis> above for a further description of its format.</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-notes(1)__environment">
<title>ENVIRONMENT</title>
<variablelist>
<varlistentry>
<term>
<emphasis>GIT_NOTES_REF</emphasis>
</term>
<listitem>
<simpara>
        Which ref to manipulate notes from, instead of <emphasis>refs/notes/commits</emphasis>.
        This overrides the <emphasis>core.notesRef</emphasis> setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>GIT_NOTES_DISPLAY_REF</emphasis>
</term>
<listitem>
<simpara>
        Colon-delimited list of refs or globs indicating which refs,
        in addition to the default from <emphasis>core.notesRef</emphasis> or
        <emphasis>GIT_NOTES_REF</emphasis>, to read notes from when showing commit
        messages.
        This overrides the <emphasis>notes.displayRef</emphasis> setting.
</simpara>
<simpara>A warning will be issued for refs that do not exist, but a glob that
does not match any refs is silently ignored.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>GIT_NOTES_REWRITE_MODE</emphasis>
</term>
<listitem>
<simpara>
        When copying notes during a rewrite, what to do if the target
        commit already has a note.
        Must be one of <emphasis>overwrite</emphasis>, <emphasis>concatenate</emphasis>, <emphasis>cat_sort_uniq</emphasis>, or <emphasis>ignore</emphasis>.
        This overrides the <emphasis>core.rewriteMode</emphasis> setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>GIT_NOTES_REWRITE_REF</emphasis>
</term>
<listitem>
<simpara>
        When rewriting commits, which notes to copy from the original
        to the rewritten commit.  Must be a colon-delimited list of
        refs or globs.
</simpara>
<simpara>If not set in the environment, the list of notes to copy depends
on the <emphasis>notes.rewrite.&lt;command&gt;</emphasis> and <emphasis>notes.rewriteRef</emphasis> settings.</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-notes(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
