<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="git-reset(1)">
    <title>git-reset(1)</title>
<indexterm>
<primary>git-reset(1)</primary>
</indexterm>
<simplesect id="git-reset(1)__name">
<title>NAME</title>
<simpara>git-reset - Reset current HEAD to the specified state</simpara>
</simplesect>
<simplesect id="git-reset(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><code>git</code> <code>reset</code> [<code>-q</code>] [<emphasis>&lt;tree-ish&gt;</emphasis>] [<code>--</code>] <emphasis>&lt;pathspec&gt;</emphasis><code>&#8230;</code>
<code>git</code> <code>reset</code> [<code>-q</code>] [<code>--pathspec-from-file=</code><emphasis>&lt;file&gt;</emphasis> [<code>--pathspec-file-nul</code>]] [<emphasis>&lt;tree-ish&gt;</emphasis>]
<code>git</code> <code>reset</code> (<code>--patch</code> | <code>-p</code>) [<emphasis>&lt;tree-ish&gt;</emphasis>] [<code>--</code>] [<emphasis>&lt;pathspec&gt;</emphasis><code>&#8230;</code>]
<code>git</code> <code>reset</code> [<code>--soft</code> | <code>--mixed</code> [<code>-N</code>] | <code>--hard</code> | <code>--merge</code> | <code>--keep</code>] [<code>-q</code>] [<emphasis>&lt;commit&gt;</emphasis>]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-reset(1)__description">
<title>DESCRIPTION</title>
<simpara>In the first three forms, copy entries from <emphasis>&lt;tree-ish&gt;</emphasis> to the index.
In the last form, set the current branch head (<emphasis>HEAD</emphasis>) to <emphasis>&lt;commit&gt;</emphasis>,
optionally modifying index and working tree to match.
The <emphasis>&lt;tree-ish&gt;</emphasis>/<emphasis>&lt;commit&gt;</emphasis> defaults to <emphasis>HEAD</emphasis> in all forms.</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>git reset [-q] [&lt;tree-ish&gt;] [--] &lt;pathspec&gt;...</emphasis>
</term>
<term>
<emphasis>git reset [-q] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]] [&lt;tree-ish&gt;]</emphasis>
</term>
<listitem>
<simpara>
        These forms reset the index entries for all paths that match the
        <emphasis>&lt;pathspec&gt;</emphasis> to their state at <emphasis>&lt;tree-ish&gt;</emphasis>.  (It does not affect
        the working tree or the current branch.)
</simpara>
<simpara>This means that <emphasis>git reset &lt;pathspec&gt;</emphasis> is the opposite of <emphasis>git add
&lt;pathspec&gt;</emphasis>. This command is equivalent to
<emphasis>git restore [--source=&lt;tree-ish&gt;] --staged &lt;pathspec&gt;...</emphasis>.</simpara>
<simpara>After running <emphasis>git reset &lt;pathspec&gt;</emphasis> to update the index entry, you can
use <xref linkend="git-restore(1)" /> to check the contents out of the index to
the working tree. Alternatively, using <xref linkend="git-restore(1)" />
and specifying a commit with <emphasis>--source</emphasis>, you
can copy the contents of a path out of a commit to the index and to the
working tree in one go.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git reset (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;pathspec&gt;...]</emphasis>
</term>
<listitem>
<simpara>
        Interactively select hunks in the difference between the index
        and <emphasis>&lt;tree-ish&gt;</emphasis> (defaults to <emphasis>HEAD</emphasis>).  The chosen hunks are applied
        in reverse to the index.
</simpara>
<simpara>This means that <emphasis>git reset -p</emphasis> is the opposite of <emphasis>git add -p</emphasis>, i.e.
you can use it to selectively reset hunks. See the "Interactive Mode"
section of <xref linkend="git-add(1)" /> to learn how to operate the <emphasis>--patch</emphasis> mode.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git reset [&lt;mode&gt;] [&lt;commit&gt;]</emphasis>
</term>
<listitem>
<simpara>
        This form resets the current branch head to <emphasis>&lt;commit&gt;</emphasis> and
        possibly updates the index (resetting it to the tree of <emphasis>&lt;commit&gt;</emphasis>) and
        the working tree depending on <emphasis>&lt;mode&gt;</emphasis>. Before the operation, <emphasis>ORIG_HEAD</emphasis>
        is set to the tip of the current branch. If <emphasis>&lt;mode&gt;</emphasis> is omitted,
        defaults to <emphasis>--mixed</emphasis>. The <emphasis>&lt;mode&gt;</emphasis> must be one of the following:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>--soft</emphasis>
</term>
<listitem>
<simpara>
        Does not touch the index file or the working tree at all (but
        resets the head to <emphasis>&lt;commit&gt;</emphasis>, just like all modes do). This leaves
        all your changed files "Changes to be committed", as <emphasis>git status</emphasis>
        would put it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--mixed</emphasis>
</term>
<listitem>
<simpara>
        Resets the index but not the working tree (i.e., the changed files
        are preserved but not marked for commit) and reports what has not
        been updated. This is the default action.
</simpara>
<simpara>If <emphasis>-N</emphasis> is specified, removed paths are marked as intent-to-add (see
<xref linkend="git-add(1)" />).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--hard</emphasis>
</term>
<listitem>
<simpara>
        Resets the index and working tree. Any changes to tracked files in the
        working tree since <emphasis>&lt;commit&gt;</emphasis> are discarded.  Any untracked files or
        directories in the way of writing any tracked files are simply deleted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--merge</emphasis>
</term>
<listitem>
<simpara>
        Resets the index and updates the files in the working tree that are
        different between <emphasis>&lt;commit&gt;</emphasis> and <emphasis>HEAD</emphasis>, but keeps those which are
        different between the index and working tree (i.e. which have changes
        which have not been added).
        If a file that is different between <emphasis>&lt;commit&gt;</emphasis> and the index has
        unstaged changes, reset is aborted.
</simpara>
<simpara>In other words, <emphasis>--merge</emphasis> does something like a <emphasis>git read-tree -u -m &lt;commit&gt;</emphasis>,
but carries forward unmerged index entries.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--keep</emphasis>
</term>
<listitem>
<simpara>
        Resets index entries and updates files in the working tree that are
        different between <emphasis>&lt;commit&gt;</emphasis> and <emphasis>HEAD</emphasis>.
        If a file that is different between <emphasis>&lt;commit&gt;</emphasis> and <emphasis>HEAD</emphasis> has local
        changes, reset is aborted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--[no-]recurse-submodules</emphasis>
</term>
<listitem>
<simpara>
        When the working tree is updated, using --recurse-submodules` will
        also recursively reset the working tree of all active submodules
        according to the commit recorded in the superproject, also setting
        the submodules <emphasis>HEAD</emphasis> to be detached at that commit.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
<simpara>See "Reset, restore and revert" in <xref linkend="git(1)" /> for the differences
between the three commands.</simpara>
</simplesect>
<simplesect id="git-reset(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
<emphasis>-q</emphasis>
</term>
<term>
<emphasis>--quiet</emphasis>
</term>
<listitem>
<simpara>
        Be quiet, only report errors.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--refresh</emphasis>
</term>
<term>
<emphasis>--no-refresh</emphasis>
</term>
<listitem>
<simpara>
        Refresh the index after a mixed reset. Enabled by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--pathspec-from-file=&lt;file&gt;</emphasis>
</term>
<listitem>
<simpara>
        Pathspec is passed in <emphasis>&lt;file&gt;</emphasis> instead of commandline args. If
        <emphasis>&lt;file&gt;</emphasis> is exactly <emphasis>-</emphasis> then standard input is used. Pathspec
        elements are separated by <emphasis>LF</emphasis> or <emphasis>CR</emphasis>/<emphasis>LF</emphasis>. Pathspec elements can be
        quoted as explained for the configuration variable <emphasis>core.quotePath</emphasis>
        (see <xref linkend="git-config(1)" />). See also <emphasis>--pathspec-file-nul</emphasis> and
        global <emphasis>--literal-pathspecs</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--pathspec-file-nul</emphasis>
</term>
<listitem>
<simpara>
        Only meaningful with <emphasis>--pathspec-from-file</emphasis>. Pathspec elements are
        separated with <emphasis>NUL</emphasis> character and all other characters are taken
        literally (including newlines and quotes).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--</emphasis>
</term>
<listitem>
<simpara>
        Do not interpret any more arguments as options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>&lt;pathspec&gt;...</emphasis>
</term>
<listitem>
<simpara>
        Limits the paths affected by the operation.
</simpara>
<simpara>For more details, see the <emphasis>pathspec</emphasis> entry in <xref linkend="gitglossary(7)" />.</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-reset(1)__examples">
<title>EXAMPLES</title>
<variablelist>
<varlistentry>
<term>
Undo add
</term>
<listitem>
<screen>$ edit                                     <co id="git-reset_CO1-1"/>
$ git add frotz.c filfre.c
$ mailx                                    <co id="git-reset_CO1-2"/>
$ git reset                                <co id="git-reset_CO1-3"/>
$ git pull git://info.example.com/ nitfol  <co id="git-reset_CO1-4"/></screen>
<calloutlist>
<callout arearefs="git-reset_CO1-1">
<para>
You are happily working on something, and find the changes
    in these files are in good order.  You do not want to see them
    when you run <emphasis>git diff</emphasis>, because you plan to work on other files
    and changes with these files are distracting.
</para>
</callout>
<callout arearefs="git-reset_CO1-2">
<para>
Somebody asks you to pull, and the changes sound worthy of merging.
</para>
</callout>
<callout arearefs="git-reset_CO1-3">
<para>
However, you already dirtied the index (i.e. your index does
    not match the <emphasis>HEAD</emphasis> commit).  But you know the pull you are going
    to make does not affect <emphasis>frotz.c</emphasis> or <emphasis>filfre.c</emphasis>, so you revert the
    index changes for these two files.  Your changes in working tree
    remain there.
</para>
</callout>
<callout arearefs="git-reset_CO1-4">
<para>
Then you can pull and merge, leaving <emphasis>frotz.c</emphasis> and <emphasis>filfre.c</emphasis>
    changes still in the working tree.
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Undo a commit and redo
</term>
<listitem>
<screen>$ git commit ...
$ git reset --soft HEAD^      <co id="git-reset_CO2-1"/>
$ edit                        <co id="git-reset_CO2-2"/>
$ git commit -a -c ORIG_HEAD  <co id="git-reset_CO2-3"/></screen>
<calloutlist>
<callout arearefs="git-reset_CO2-1">
<para>
This is most often done when you remembered what you
    just committed is incomplete, or you misspelled your commit
    message, or both.  Leaves working tree as it was before "reset".
</para>
</callout>
<callout arearefs="git-reset_CO2-2">
<para>
Make corrections to working tree files.
</para>
</callout>
<callout arearefs="git-reset_CO2-3">
<para>
"reset" copies the old head to <emphasis>.git/ORIG_HEAD</emphasis>; redo the
    commit by starting with its log message.  If you do not need to
    edit the message further, you can give <emphasis>-C</emphasis> option instead.
</para>
<simpara>See also the <emphasis>--amend</emphasis> option to <xref linkend="git-commit(1)" />.</simpara>
</callout>
</calloutlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Undo a commit, making it a topic branch
</term>
<listitem>
<screen>$ git branch topic/wip          <co id="git-reset_CO3-1"/>
$ git reset --hard HEAD~3       <co id="git-reset_CO3-2"/>
$ git switch topic/wip          <co id="git-reset_CO3-3"/></screen>
<calloutlist>
<callout arearefs="git-reset_CO3-1">
<para>
You have made some commits, but realize they were premature
    to be in the <emphasis>master</emphasis> branch.  You want to continue polishing
    them in a topic branch, so create <emphasis>topic/wip</emphasis> branch off of the
    current <emphasis>HEAD</emphasis>.
</para>
</callout>
<callout arearefs="git-reset_CO3-2">
<para>
Rewind the master branch to get rid of those three commits.
</para>
</callout>
<callout arearefs="git-reset_CO3-3">
<para>
Switch to <emphasis>topic/wip</emphasis> branch and keep working.
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Undo commits permanently
</term>
<listitem>
<screen>$ git commit ...
$ git reset --hard HEAD~3   <co id="git-reset_CO4-1"/></screen>
<calloutlist>
<callout arearefs="git-reset_CO4-1">
<para>
The last three commits (<emphasis>HEAD</emphasis>, <emphasis>HEAD^</emphasis>, and <emphasis>HEAD~2</emphasis>) were bad
    and you do not want to ever see them again.  Do <emphasis role="strong">not</emphasis> do this if
    you have already given these commits to somebody else.  (See the
    "RECOVERING FROM UPSTREAM REBASE" section in <xref linkend="git-rebase(1)" />
    for the implications of doing so.)
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Undo a merge or pull
</term>
<listitem>
<screen>$ git pull                         <co id="git-reset_CO5-1"/>
Auto-merging nitfol
CONFLICT (content): Merge conflict in nitfol
Automatic merge failed; fix conflicts and then commit the result.
$ git reset --hard                 <co id="git-reset_CO5-2"/>
$ git pull . topic/branch          <co id="git-reset_CO5-3"/>
Updating from 41223... to 13134...
Fast-forward
$ git reset --hard ORIG_HEAD       <co id="git-reset_CO5-4"/></screen>
<calloutlist>
<callout arearefs="git-reset_CO5-1">
<para>
Try to update from the upstream resulted in a lot of
    conflicts; you were not ready to spend a lot of time merging
    right now, so you decide to do that later.
</para>
</callout>
<callout arearefs="git-reset_CO5-2">
<para>
"pull" has not made merge commit, so <emphasis>git reset --hard</emphasis>
    which is a synonym for <emphasis>git reset --hard HEAD</emphasis> clears the mess
    from the index file and the working tree.
</para>
</callout>
<callout arearefs="git-reset_CO5-3">
<para>
Merge a topic branch into the current branch, which resulted
    in a fast-forward.
</para>
</callout>
<callout arearefs="git-reset_CO5-4">
<para>
But you decided that the topic branch is not ready for public
    consumption yet.  "pull" or "merge" always leaves the original
    tip of the current branch in <emphasis>ORIG_HEAD</emphasis>, so resetting hard to it
    brings your index file and the working tree back to that state,
    and resets the tip of the branch to that commit.
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Undo a merge or pull inside a dirty working tree
</term>
<listitem>
<screen>$ git pull                         <co id="git-reset_CO6-1"/>
Auto-merging nitfol
Merge made by recursive.
 nitfol                |   20 +++++----
 ...
$ git reset --merge ORIG_HEAD      <co id="git-reset_CO6-2"/></screen>
<calloutlist>
<callout arearefs="git-reset_CO6-1">
<para>
Even if you may have local modifications in your
    working tree, you can safely say <emphasis>git pull</emphasis> when you know
    that the change in the other branch does not overlap with
    them.
</para>
</callout>
<callout arearefs="git-reset_CO6-2">
<para>
After inspecting the result of the merge, you may find
    that the change in the other branch is unsatisfactory.  Running
    <emphasis>git reset --hard ORIG_HEAD</emphasis> will let you go back to where you
    were, but it will discard your local changes, which you do not
    want.  <emphasis>git reset --merge</emphasis> keeps your local changes.
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Interrupted workflow
</term>
<listitem>
<simpara>Suppose you are interrupted by an urgent fix request while you
are in the middle of a large change.  The files in your
working tree are not in any shape to be committed yet, but you
need to get to the other branch for a quick bugfix.</simpara>
<screen>$ git switch feature  ;# you were working in "feature" branch and
$ work work work      ;# got interrupted
$ git commit -a -m "snapshot WIP"                 <co id="git-reset_CO7-1"/>
$ git switch master
$ fix fix fix
$ git commit ;# commit with real log
$ git switch feature
$ git reset --soft HEAD^ ;# go back to WIP state  <co id="git-reset_CO7-2"/>
$ git reset                                       <co id="git-reset_CO7-3"/></screen>
<calloutlist>
<callout arearefs="git-reset_CO7-1">
<para>
This commit will get blown away so a throw-away log message is OK.
</para>
</callout>
<callout arearefs="git-reset_CO7-2">
<para>
This removes the <emphasis>WIP</emphasis> commit from the commit history, and sets
    your working tree to the state just before you made that snapshot.
</para>
</callout>
<callout arearefs="git-reset_CO7-3">
<para>
At this point the index file still has all the WIP changes you
    committed as <emphasis>snapshot WIP</emphasis>.  This updates the index to show your
    WIP files as uncommitted.
</para>
<simpara>See also <xref linkend="git-stash(1)" />.</simpara>
</callout>
</calloutlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Reset a single file in the index
</term>
<listitem>
<simpara>Suppose you have added a file to your index, but later decide you do not
want to add it to your commit. You can remove the file from the index
while keeping your changes with git reset.</simpara>
<screen>$ git reset -- frotz.c                      <co id="git-reset_CO8-1"/>
$ git commit -m "Commit files in index"     <co id="git-reset_CO8-2"/>
$ git add frotz.c                           <co id="git-reset_CO8-3"/></screen>
<calloutlist>
<callout arearefs="git-reset_CO8-1">
<para>
This removes the file from the index while keeping it in the working
    directory.
</para>
</callout>
<callout arearefs="git-reset_CO8-2">
<para>
This commits all other changes in the index.
</para>
</callout>
<callout arearefs="git-reset_CO8-3">
<para>
Adds the file to the index again.
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Keep changes in working tree while discarding some previous commits
</term>
<listitem>
<simpara>Suppose you are working on something and you commit it, and then you
continue working a bit more, but now you think that what you have in
your working tree should be in another branch that has nothing to do
with what you committed previously. You can start a new branch and
reset it while keeping the changes in your working tree.</simpara>
<screen>$ git tag start
$ git switch -c branch1
$ edit
$ git commit ...                            <co id="git-reset_CO9-1"/>
$ edit
$ git switch -c branch2                     <co id="git-reset_CO9-2"/>
$ git reset --keep start                    <co id="git-reset_CO9-3"/></screen>
<calloutlist>
<callout arearefs="git-reset_CO9-1">
<para>
This commits your first edits in <emphasis>branch1</emphasis>.
</para>
</callout>
<callout arearefs="git-reset_CO9-2">
<para>
In the ideal world, you could have realized that the earlier
    commit did not belong to the new topic when you created and switched
    to <emphasis>branch2</emphasis> (i.e. <emphasis>git switch -c branch2 start</emphasis>), but nobody is
    perfect.
</para>
</callout>
<callout arearefs="git-reset_CO9-3">
<para>
But you can use <emphasis>reset --keep</emphasis> to remove the unwanted commit after
    you switched to <emphasis>branch2</emphasis>.
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
Split a commit apart into a sequence of commits
</term>
<listitem>
<simpara>Suppose that you have created lots of logically separate changes and committed
them together. Then, later you decide that it might be better to have each
logical chunk associated with its own commit. You can use git reset to rewind
history without changing the contents of your local files, and then successively
use <emphasis>git add -p</emphasis> to interactively select which hunks to include into each commit,
using <emphasis>git commit -c</emphasis> to pre-populate the commit message.</simpara>
<screen>$ git reset -N HEAD^                        <co id="git-reset_CO10-1"/>
$ git add -p                                <co id="git-reset_CO10-2"/>
$ git diff --cached                         <co id="git-reset_CO10-3"/>
$ git commit -c HEAD@{1}                    <co id="git-reset_CO10-4"/>
...                                         <co id="git-reset_CO10-5"/>
$ git add ...                               <co id="git-reset_CO10-6"/>
$ git diff --cached                         <co id="git-reset_CO10-7"/>
$ git commit ...                            <co id="git-reset_CO10-8"/></screen>
<calloutlist>
<callout arearefs="git-reset_CO10-1">
<para>
First, reset the history back one commit so that we remove the original
    commit, but leave the working tree with all the changes. The <emphasis>-N</emphasis> ensures
    that any new files added with <emphasis>HEAD</emphasis> are still marked so that <emphasis>git add -p</emphasis>
    will find them.
</para>
</callout>
<callout arearefs="git-reset_CO10-2">
<para>
Next, we interactively select diff hunks to add using the <emphasis>git add -p</emphasis>
    facility. This will ask you about each diff hunk in sequence and you can
    use simple commands such as "yes, include this", "No don't include this"
    or even the very powerful "edit" facility.
</para>
</callout>
<callout arearefs="git-reset_CO10-3">
<para>
Once satisfied with the hunks you want to include, you should verify what
    has been prepared for the first commit by using <emphasis>git diff --cached</emphasis>. This
    shows all the changes that have been moved into the index and are about
    to be committed.
</para>
</callout>
<callout arearefs="git-reset_CO10-4">
<para>
Next, commit the changes stored in the index. The <emphasis>-c</emphasis> option specifies to
    pre-populate the commit message from the original message that you started
    with in the first commit. This is helpful to avoid retyping it. The
    <emphasis>HEAD@{1}</emphasis> is a special notation for the commit that <emphasis>HEAD</emphasis> used to be at
    prior to the original reset commit (1 change ago).
    See <xref linkend="git-reflog(1)" /> for more details. You may also use any other
    valid commit reference.
</para>
</callout>
<callout arearefs="git-reset_CO10-5">
<para>
You can repeat steps 2-4 multiple times to break the original code into
    any number of commits.
</para>
</callout>
<callout arearefs="git-reset_CO10-6">
<para>
Now you've split out many of the changes into their own commits, and might
    no longer use the patch mode of <emphasis>git add</emphasis>, in order to select all remaining
    uncommitted changes.
</para>
</callout>
<callout arearefs="git-reset_CO10-7">
<para>
Once again, check to verify that you've included what you want to. You may
    also wish to verify that git diff doesn't show any remaining changes to be
    committed later.
</para>
</callout>
<callout arearefs="git-reset_CO10-8">
<para>
And finally create the final commit.
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-reset(1)__discussion">
<title>DISCUSSION</title>
<simpara>The tables below show what happens when running:</simpara>
<screen>git reset --option target</screen>
<simpara>to reset the <emphasis>HEAD</emphasis> to another commit (<emphasis>target</emphasis>) with the different
reset options depending on the state of the files.</simpara>
<simpara>In these tables, <emphasis>A</emphasis>, <emphasis>B</emphasis>, <emphasis>C</emphasis> and <emphasis>D</emphasis> are some different states of a
file. For example, the first line of the first table means that if a
file is in state <emphasis>A</emphasis> in the working tree, in state <emphasis>B</emphasis> in the index, in
state <emphasis>C</emphasis> in <emphasis>HEAD</emphasis> and in state <emphasis>D</emphasis> in the target, then <emphasis>git reset --soft
target</emphasis> will leave the file in the working tree in state <emphasis>A</emphasis> and in the
index in state <emphasis>B</emphasis>.  It resets (i.e. moves) the <emphasis>HEAD</emphasis> (i.e. the tip of
the current branch, if you are on one) to <emphasis>target</emphasis> (which has the file
in state <emphasis>D</emphasis>).</simpara>
<literallayout class="monospaced">working index HEAD target         working index HEAD
----------------------------------------------------
 A       B     C    D     --soft   A       B     D
                          --mixed  A       D     D
                          --hard   D       D     D
                          --merge (disallowed)
                          --keep  (disallowed)</literallayout>
<literallayout class="monospaced">working index HEAD target         working index HEAD
----------------------------------------------------
 A       B     C    C     --soft   A       B     C
                          --mixed  A       C     C
                          --hard   C       C     C
                          --merge (disallowed)
                          --keep   A       C     C</literallayout>
<literallayout class="monospaced">working index HEAD target         working index HEAD
----------------------------------------------------
 B       B     C    D     --soft   B       B     D
                          --mixed  B       D     D
                          --hard   D       D     D
                          --merge  D       D     D
                          --keep  (disallowed)</literallayout>
<literallayout class="monospaced">working index HEAD target         working index HEAD
----------------------------------------------------
 B       B     C    C     --soft   B       B     C
                          --mixed  B       C     C
                          --hard   C       C     C
                          --merge  C       C     C
                          --keep   B       C     C</literallayout>
<literallayout class="monospaced">working index HEAD target         working index HEAD
----------------------------------------------------
 B       C     C    D     --soft   B       C     D
                          --mixed  B       D     D
                          --hard   D       D     D
                          --merge (disallowed)
                          --keep  (disallowed)</literallayout>
<literallayout class="monospaced">working index HEAD target         working index HEAD
----------------------------------------------------
 B       C     C    C     --soft   B       C     C
                          --mixed  B       C     C
                          --hard   C       C     C
                          --merge  B       C     C
                          --keep   B       C     C</literallayout>
<simpara><emphasis>git reset --merge</emphasis> is meant to be used when resetting out of a conflicted
merge. Any mergy operation guarantees that the working tree file that is
involved in the merge does not have a local change with respect to the index
before it starts, and that it writes the result out to the working tree. So if
we see some difference between the index and the target and also
between the index and the working tree, then it means that we are not
resetting out from a state that a mergy operation left after failing
with a conflict. That is why we disallow <emphasis>--merge</emphasis> option in this case.</simpara>
<simpara><emphasis>git reset --keep</emphasis> is meant to be used when removing some of the last
commits in the current branch while keeping changes in the working
tree. If there could be conflicts between the changes in the commit we
want to remove and the changes in the working tree we want to keep,
the reset is disallowed. That's why it is disallowed if there are both
changes between the working tree and <emphasis>HEAD</emphasis>, and between <emphasis>HEAD</emphasis> and the
target. To be safe, it is also disallowed when there are unmerged
entries.</simpara>
<simpara>The following tables show what happens when there are unmerged
entries:</simpara>
<literallayout class="monospaced">working index HEAD target         working index HEAD
----------------------------------------------------
 X       U     A    B     --soft  (disallowed)
                          --mixed  X       B     B
                          --hard   B       B     B
                          --merge  B       B     B
                          --keep  (disallowed)</literallayout>
<literallayout class="monospaced">working index HEAD target         working index HEAD
----------------------------------------------------
 X       U     A    A     --soft  (disallowed)
                          --mixed  X       A     A
                          --hard   A       A     A
                          --merge  A       A     A
                          --keep  (disallowed)</literallayout>
<simpara><emphasis>X</emphasis> means any state and <emphasis>U</emphasis> means an unmerged index.</simpara>
</simplesect>
<simplesect id="git-reset(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
