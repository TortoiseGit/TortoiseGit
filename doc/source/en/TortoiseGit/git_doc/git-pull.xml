<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="git-pull(1)">
    <title>git-pull(1)</title>
<indexterm>
<primary>git-pull(1)</primary>
</indexterm>
<simplesect id="git-pull(1)__name">
<title>NAME</title>
<simpara>git-pull - Fetch from and integrate with another repository or a local branch</simpara>
</simplesect>
<simplesect id="git-pull(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git pull</emphasis> [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;&#8230;]]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-pull(1)__description">
<title>DESCRIPTION</title>
<simpara>Incorporates changes from a remote repository into the current branch.
If the current branch is behind the remote, then by default it will
fast-forward the current branch to match the remote.  If the current
branch and the remote have diverged, the user needs to specify how to
reconcile the divergent branches with <emphasis>--rebase</emphasis> or <emphasis>--no-rebase</emphasis> (or
the corresponding configuration option in <emphasis>pull.rebase</emphasis>).</simpara>
<simpara>More precisely, <emphasis>git pull</emphasis> runs <emphasis>git fetch</emphasis> with the given parameters
and then depending on configuration options or command line flags,
will call either <emphasis>git rebase</emphasis> or <emphasis>git merge</emphasis> to reconcile diverging
branches.</simpara>
<simpara>&lt;repository&gt; should be the name of a remote repository as
passed to <xref linkend="git-fetch(1)" />.  &lt;refspec&gt; can name an
arbitrary remote ref (for example, the name of a tag) or even
a collection of refs with corresponding remote-tracking branches
(e.g., refs/heads/&#42;:refs/remotes/origin/&#42;),
but usually it is the name of a branch in the remote repository.</simpara>
<simpara>Default values for &lt;repository&gt; and &lt;branch&gt; are read from the
"remote" and "merge" configuration for the current branch
as set by <xref linkend="git-branch(1)" /> <emphasis>--track</emphasis>.</simpara>
<simpara>Assume the following history exists and the current branch is
"<emphasis>master</emphasis>":</simpara>
<screen>          A---B---C master on origin
         /
    D---E---F---G master
        ^
        origin/master in your repository</screen>
<simpara>Then "<emphasis>git pull</emphasis>" will fetch and replay the changes from the remote
<emphasis>master</emphasis> branch since it diverged from the local <emphasis>master</emphasis> (i.e., <emphasis>E</emphasis>)
until its current commit (<emphasis>C</emphasis>) on top of <emphasis>master</emphasis> and record the
result in a new commit along with the names of the two parent commits
and a log message from the user describing the changes.</simpara>
<screen>          A---B---C origin/master
         /         \
    D---E---F---G---H master</screen>
<simpara>See <xref linkend="git-merge(1)" /> for details, including how conflicts
are presented and handled.</simpara>
<simpara>In Git 1.7.0 or later, to cancel a conflicting merge, use
<emphasis>git reset --merge</emphasis>.  <emphasis role="strong">Warning</emphasis>: In older versions of Git, running <emphasis>git pull</emphasis>
with uncommitted changes is discouraged: while possible, it leaves you
in a state that may be hard to back out of in the case of a conflict.</simpara>
<simpara>If any of the remote changes overlap with local uncommitted changes,
the merge will be automatically canceled and the work tree untouched.
It is generally best to get any local changes in working order before
pulling or stash them away with <xref linkend="git-stash(1)" />.</simpara>
</simplesect>
<simplesect id="git-pull(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        This is passed to both underlying git-fetch to squelch reporting of
        during transfer, and underlying git-merge to squelch output during
        merging.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Pass --verbose to git-fetch and git-merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]recurse-submodules[=(yes|on-demand|no)]
</term>
<listitem>
<simpara>
        This option controls if new commits of populated submodules should
        be fetched, and if the working trees of active submodules should be
        updated, too (see <xref linkend="git-fetch(1)" />, <xref linkend="git-config(1)" /> and
        <xref linkend="gitmodules(5)" />).
</simpara>
<simpara>If the checkout is done via rebase, local submodule commits are rebased as well.</simpara>
<simpara>If the update is done via merge, the submodule conflicts are resolved and checked out.</simpara>
</listitem>
</varlistentry>
</variablelist>
<section id="git-pull(1)__options_related_to_merging">
<title>Options related to merging</title>
<variablelist>
<varlistentry>
<term>
<emphasis>--commit</emphasis>
</term>
<term>
<emphasis>--no-commit</emphasis>
</term>
<listitem>
<simpara>
        Perform the merge and commit the result. This option can
        be used to override <emphasis>--no-commit</emphasis>.
        Only useful when merging.
</simpara>
<simpara>With <emphasis>--no-commit</emphasis> perform the merge and stop just before creating
a merge commit, to give the user a chance to inspect and further
tweak the merge result before committing.</simpara>
<simpara>Note that fast-forward updates do not create a merge commit and
therefore there is no way to stop those merges with <emphasis>--no-commit</emphasis>.
Thus, if you want to ensure your branch is not changed or updated
by the merge command, use <emphasis>--no-ff</emphasis> with <emphasis>--no-commit</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--edit</emphasis>
</term>
<term>
<emphasis>-e</emphasis>
</term>
<term>
<emphasis>--no-edit</emphasis>
</term>
<listitem>
<simpara>
        Invoke an editor before committing successful mechanical merge to
        further edit the auto-generated merge message, so that the user
        can explain and justify the merge. The <emphasis>--no-edit</emphasis> option can be
        used to accept the auto-generated message (this is generally
        discouraged).
</simpara>
<simpara>Older scripts may depend on the historical behaviour of not allowing the
user to edit the merge log message. They will see an editor opened when
they run <emphasis>git merge</emphasis>. To make it easier to adjust such scripts to the
updated behaviour, the environment variable <emphasis>GIT_MERGE_AUTOEDIT</emphasis> can be
set to <emphasis>no</emphasis> at the beginning of them.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--cleanup=&lt;mode&gt;</emphasis>
</term>
<listitem>
<simpara>
        This option determines how the merge message will be cleaned up before
        committing. See <xref linkend="git-commit(1)" /> for more details. In addition, if
        the <emphasis>&lt;mode&gt;</emphasis> is given a value of <emphasis>scissors</emphasis>, scissors will be appended
        to <emphasis>MERGE_MSG</emphasis> before being passed on to the commit machinery in the
        case of a merge conflict.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ff-only</emphasis>
</term>
<listitem>
<simpara>
        Only update to the new history if there is no divergent local
        history.  This is the default when no method for reconciling
        divergent histories is provided (via the --rebase=* flags).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ff</emphasis>
</term>
<term>
<emphasis>--no-ff</emphasis>
</term>
<listitem>
<simpara>
        When merging rather than rebasing, specifies how a merge is
        handled when the merged-in history is already a descendant of
        the current history.  If merging is requested, <emphasis>--ff</emphasis> is the
        default unless merging an annotated (and possibly signed) tag
        that is not stored in its natural place in the <emphasis>refs/tags/</emphasis>
        hierarchy, in which case <emphasis>--no-ff</emphasis> is assumed.
</simpara>
<simpara>With <emphasis>--ff</emphasis>, when possible resolve the merge as a fast-forward (only
update the branch pointer to match the merged branch; do not create a
merge commit).  When not possible (when the merged-in history is not a
descendant of the current history), create a merge commit.</simpara>
<simpara>With <emphasis>--no-ff</emphasis>, create a merge commit in all cases, even when the merge
could instead be resolved as a fast-forward.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-S[&lt;key-id&gt;]</emphasis>
</term>
<term>
<emphasis>--gpg-sign[=&lt;key-id&gt;]</emphasis>
</term>
<term>
<emphasis>--no-gpg-sign</emphasis>
</term>
<listitem>
<simpara>
        GPG-sign the resulting merge commit. The <emphasis>&lt;key-id&gt;</emphasis> argument is
        optional and defaults to the committer identity; if specified,
        it must be stuck to the option without a space. <emphasis>--no-gpg-sign</emphasis>
        is useful to countermand both <emphasis>commit.gpgSign</emphasis> configuration variable,
        and earlier <emphasis>--gpg-sign</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--log[=&lt;n&gt;]</emphasis>
</term>
<term>
<emphasis>--no-log</emphasis>
</term>
<listitem>
<simpara>
        In addition to branch names, populate the log message with
        one-line descriptions from at most <emphasis>&lt;n&gt;</emphasis> actual commits that are being
        merged. See also <xref linkend="git-fmt-merge-msg(1)" />.
        Only useful when merging.
</simpara>
<simpara>With <emphasis>--no-log</emphasis> do not list one-line descriptions from the
actual commits being merged.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--signoff</emphasis>
</term>
<term>
<emphasis>--no-signoff</emphasis>
</term>
<listitem>
<simpara>
        Add a <emphasis>Signed-off-by</emphasis> trailer by the committer at the end of the commit
        log message.  The meaning of a signoff depends on the project
        to which you're committing.  For example, it may certify that
        the committer has the rights to submit the work under the
        project's license or agrees to some contributor representation,
        such as a Developer Certificate of Origin.
        (See <ulink url="https://developercertificate.org">https://developercertificate.org</ulink> for the one used by the
        Linux kernel and Git projects.)  Consult the documentation or
        leadership of the project to which you're contributing to
        understand how the signoffs are used in that project.
</simpara>
<simpara>The <emphasis>--no-signoff</emphasis> option can be used to countermand an earlier <emphasis>--signoff</emphasis>
option on the command line.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--stat</emphasis>
</term>
<term>
<emphasis>-n</emphasis>
</term>
<term>
<emphasis>--no-stat</emphasis>
</term>
<listitem>
<simpara>
        Show a diffstat at the end of the merge. The diffstat is also
        controlled by the configuration option merge.stat.
</simpara>
<simpara>With <emphasis>-n</emphasis> or <emphasis>--no-stat</emphasis> do not show a diffstat at the end of the
merge.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--squash</emphasis>
</term>
<term>
<emphasis>--no-squash</emphasis>
</term>
<listitem>
<simpara>
        Produce the working tree and index state as if a real merge
        happened (except for the merge information), but do not actually
        make a commit, move the <emphasis>HEAD</emphasis>, or record <emphasis>$GIT_DIR/MERGE_HEAD</emphasis>
        (to cause the next <emphasis>git commit</emphasis> command to create a merge
        commit).  This allows you to create a single commit on top of
        the current branch whose effect is the same as merging another
        branch (or more in case of an octopus).
</simpara>
<simpara>With <emphasis>--no-squash</emphasis> perform the merge and commit the result. This
option can be used to override <emphasis>--squash</emphasis>.</simpara>
<simpara>With <emphasis>--squash</emphasis>, <emphasis>--commit</emphasis> is not allowed, and will fail.</simpara>
<simpara>Only useful when merging.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--[no-]verify</emphasis>
</term>
<listitem>
<simpara>
        By default, the pre-merge and commit-msg hooks are run.
        When <emphasis>--no-verify</emphasis> is given, these are bypassed.
        See also <xref linkend="githooks(5)" />.
        Only useful when merging.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-s &lt;strategy&gt;</emphasis>
</term>
<term>
<emphasis>--strategy=&lt;strategy&gt;</emphasis>
</term>
<listitem>
<simpara>
        Use the given merge strategy; can be supplied more than
        once to specify them in the order they should be tried.
        If there is no <emphasis>-s</emphasis> option, a built-in list of strategies
        is used instead (<emphasis>ort</emphasis> when merging a single head,
        <emphasis>octopus</emphasis> otherwise).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-X &lt;option&gt;</emphasis>
</term>
<term>
<emphasis>--strategy-option=&lt;option&gt;</emphasis>
</term>
<listitem>
<simpara>
        Pass merge strategy specific option through to the merge
        strategy.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--verify-signatures</emphasis>
</term>
<term>
<emphasis>--no-verify-signatures</emphasis>
</term>
<listitem>
<simpara>
        Verify that the tip commit of the side branch being merged is
        signed with a valid key, i.e. a key that has a valid uid: in the
        default trust model, this means the signing key has been signed by
        a trusted key.  If the tip commit of the side branch is not signed
        with a valid key, the merge is aborted.
</simpara>
<simpara>Only useful when merging.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--summary</emphasis>
</term>
<term>
<emphasis>--no-summary</emphasis>
</term>
<listitem>
<simpara>
        Synonyms to <emphasis>--stat</emphasis> and <emphasis>--no-stat</emphasis>; these are deprecated and will be
        removed in the future.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--autostash</emphasis>
</term>
<term>
<emphasis>--no-autostash</emphasis>
</term>
<listitem>
<simpara>
        Automatically create a temporary stash entry before the operation
        begins, record it in the ref <emphasis>MERGE_AUTOSTASH</emphasis>
        and apply it after the operation ends.  This means
        that you can run the operation on a dirty worktree.  However, use
        with care: the final stash application after a successful
        merge might result in non-trivial conflicts.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--allow-unrelated-histories</emphasis>
</term>
<listitem>
<simpara>
        By default, <emphasis>git merge</emphasis> command refuses to merge histories
        that do not share a common ancestor.  This option can be
        used to override this safety when merging histories of two
        projects that started their lives independently. As that is
        a very rare occasion, no configuration variable to enable
        this by default exists or will be added.
</simpara>
<simpara>Only useful when merging.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-r
</term>
<term>
--rebase[=(false|true|merges|interactive)]
</term>
<listitem>
<simpara>
        When true, rebase the current branch on top of the upstream
        branch after fetching. If there is a remote-tracking branch
        corresponding to the upstream branch and the upstream branch
        was rebased since last fetched, the rebase uses that information
        to avoid rebasing non-local changes.
</simpara>
<simpara>When set to <emphasis>merges</emphasis>, rebase using <emphasis>git rebase --rebase-merges</emphasis> so that
the local merge commits are included in the rebase (see
<xref linkend="git-rebase(1)" /> for details).</simpara>
<simpara>When false, merge the upstream branch into the current branch.</simpara>
<simpara>When <emphasis>interactive</emphasis>, enable the interactive mode of rebase.</simpara>
<simpara>See <emphasis>pull.rebase</emphasis>, <emphasis>branch.&lt;name&gt;.rebase</emphasis> and <emphasis>branch.autoSetupRebase</emphasis> in
<xref linkend="git-config(1)" /> if you want to make <emphasis>git pull</emphasis> always use
<emphasis>--rebase</emphasis> instead of merging.</simpara>
<note><simpara>This is a potentially <emphasis>dangerous</emphasis> mode of operation.
It rewrites history, which does not bode well when you
published that history already.  Do <emphasis role="strong">not</emphasis> use this option
unless you have read <xref linkend="git-rebase(1)" /> carefully.</simpara></note>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-rebase
</term>
<listitem>
<simpara>
        This is shorthand for --rebase=false.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="git-pull(1)__options_related_to_fetching">
<title>Options related to fetching</title>
<variablelist>
<varlistentry>
<term>
--[no-]all
</term>
<listitem>
<simpara>
        Fetch all remotes, except for the ones that has the
        <emphasis>remote.&lt;name&gt;.skipFetchAll</emphasis> configuration variable set.
        This overrides the configuration variable fetch.all`.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-a
</term>
<term>
--append
</term>
<listitem>
<simpara>
        Append ref names and object names of fetched refs to the
        existing contents of <emphasis>.git/FETCH_HEAD</emphasis>.  Without this
        option old data in <emphasis>.git/FETCH_HEAD</emphasis> will be overwritten.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--atomic
</term>
<listitem>
<simpara>
        Use an atomic transaction to update local refs. Either all refs are
        updated, or on error, no refs are updated.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--depth=&lt;depth&gt;
</term>
<listitem>
<simpara>
        Limit fetching to the specified number of commits from the tip of
        each remote branch history. If fetching to a <emphasis>shallow</emphasis> repository
        created by <emphasis>git clone</emphasis> with <emphasis>--depth=&lt;depth&gt;</emphasis> option (see
        <xref linkend="git-clone(1)" />), deepen or shorten the history to the specified
        number of commits. Tags for the deepened commits are not fetched.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--deepen=&lt;depth&gt;
</term>
<listitem>
<simpara>
        Similar to --depth, except it specifies the number of commits
        from the current shallow boundary instead of from the tip of
        each remote branch history.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--shallow-since=&lt;date&gt;
</term>
<listitem>
<simpara>
        Deepen or shorten the history of a shallow repository to
        include all reachable commits after &lt;date&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--shallow-exclude=&lt;ref&gt;
</term>
<listitem>
<simpara>
        Deepen or shorten the history of a shallow repository to
        exclude commits reachable from a specified remote branch or tag.
        This option can be specified multiple times.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unshallow
</term>
<listitem>
<simpara>
        If the source repository is complete, convert a shallow
        repository to a complete one, removing all the limitations
        imposed by shallow repositories.
</simpara>
<simpara>If the source repository is shallow, fetch as much as possible so that
the current repository has the same history as the source repository.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--update-shallow
</term>
<listitem>
<simpara>
        By default when fetching from a shallow repository,
        <emphasis>git fetch</emphasis> refuses refs that require updating
        .git/shallow. This option updates .git/shallow and accepts such
        refs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--negotiation-tip=&lt;commit|glob&gt;
</term>
<listitem>
<simpara>
        By default, Git will report, to the server, commits reachable
        from all local refs to find common commits in an attempt to
        reduce the size of the to-be-received packfile. If specified,
        Git will only report commits reachable from the given tips.
        This is useful to speed up fetches when the user knows which
        local ref is likely to have commits in common with the
        upstream ref being fetched.
</simpara>
<simpara>This option may be specified more than once; if so, Git will report
commits reachable from any of the given commits.</simpara>
<simpara>The argument to this option may be a glob on ref names, a ref, or the (possibly
abbreviated) SHA-1 of a commit. Specifying a glob is equivalent to specifying
this option multiple times, one for each matching ref name.</simpara>
<simpara>See also the <emphasis>fetch.negotiationAlgorithm</emphasis> and <emphasis>push.negotiate</emphasis>
configuration variables documented in <xref linkend="git-config(1)" />, and the
<emphasis>--negotiate-only</emphasis> option below.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--negotiate-only
</term>
<listitem>
<simpara>
        Do not fetch anything from the server, and instead print the
        ancestors of the provided <emphasis>--negotiation-tip=*</emphasis> arguments,
        which we have in common with the server.
</simpara>
<simpara>This is incompatible with <emphasis>--recurse-submodules=[yes|on-demand]</emphasis>.
Internally this is used to implement the <emphasis>push.negotiate</emphasis> option, see
<xref linkend="git-config(1)" />.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--dry-run
</term>
<listitem>
<simpara>
        Show what would be done, without making any changes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--porcelain
</term>
<listitem>
<simpara>
        Print the output to standard output in an easy-to-parse format for
        scripts. See section OUTPUT in <xref linkend="git-fetch(1)" /> for details.
</simpara>
<simpara>This is incompatible with <emphasis>--recurse-submodules=[yes|on-demand]</emphasis> and takes
precedence over the <emphasis>fetch.output</emphasis> config option.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f
</term>
<term>
--force
</term>
<listitem>
<simpara>
        When <emphasis>git fetch</emphasis> is used with <emphasis>&lt;src&gt;:&lt;dst&gt;</emphasis> refspec, it may
        refuse to update the local branch as discussed
        in the <emphasis>&lt;refspec&gt;</emphasis> part of the <xref linkend="git-fetch(1)" />
        documentation.
        This option overrides that check.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-k
</term>
<term>
--keep
</term>
<listitem>
<simpara>
        Keep downloaded pack.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--prefetch
</term>
<listitem>
<simpara>
        Modify the configured refspec to place all refs into the
        <emphasis>refs/prefetch/</emphasis> namespace. See the <emphasis>prefetch</emphasis> task in
        <xref linkend="git-maintenance(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-p
</term>
<term>
--prune
</term>
<listitem>
<simpara>
        Before fetching, remove any remote-tracking references that no
        longer exist on the remote.  Tags are not subject to pruning
        if they are fetched only because of the default tag
        auto-following or due to a --tags option.  However, if tags
        are fetched due to an explicit refspec (either on the command
        line or in the remote configuration, for example if the remote
        was cloned with the --mirror option), then they are also
        subject to pruning. Supplying <emphasis>--prune-tags</emphasis> is a shorthand for
        providing the tag refspec.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-tags
</term>
<listitem>
<simpara>
        By default, tags that point at objects that are downloaded
        from the remote repository are fetched and stored locally.
        This option disables this automatic tag following. The default
        behavior for a remote may be specified with the remote.&lt;name&gt;.tagOpt
        setting. See <xref linkend="git-config(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--refmap=&lt;refspec&gt;
</term>
<listitem>
<simpara>
        When fetching refs listed on the command line, use the
        specified refspec (can be given more than once) to map the
        refs to remote-tracking branches, instead of the values of
        <emphasis>remote.*.fetch</emphasis> configuration variables for the remote
        repository.  Providing an empty <emphasis>&lt;refspec&gt;</emphasis> to the
        <emphasis>--refmap</emphasis> option causes Git to ignore the configured
        refspecs and rely entirely on the refspecs supplied as
        command-line arguments. See section on "Configured Remote-tracking
        Branches" for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t
</term>
<term>
--tags
</term>
<listitem>
<simpara>
        Fetch all tags from the remote (i.e., fetch remote tags
        <emphasis>refs/tags/*</emphasis> into local tags with the same name), in addition
        to whatever else would otherwise be fetched.  Using this
        option alone does not subject tags to pruning, even if --prune
        is used (though tags may be pruned anyway if they are also the
        destination of an explicit refspec; see <emphasis>--prune</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-j
</term>
<term>
--jobs=&lt;n&gt;
</term>
<listitem>
<simpara>
        Number of parallel children to be used for all forms of fetching.
</simpara>
<simpara>If the <emphasis>--multiple</emphasis> option was specified, the different remotes will be fetched
in parallel. If multiple submodules are fetched, they will be fetched in
parallel. To control them independently, use the config settings
<emphasis>fetch.parallel</emphasis> and <emphasis>submodule.fetchJobs</emphasis> (see <xref linkend="git-config(1)" />).</simpara>
<simpara>Typically, parallel recursive and multi-remote fetches will be faster. By
default fetches are performed sequentially, not in parallel.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--set-upstream
</term>
<listitem>
<simpara>
        If the remote is fetched successfully, add upstream
        (tracking) reference, used by argument-less
        <xref linkend="git-pull(1)" /> and other commands. For more information,
        see <emphasis>branch.&lt;name&gt;.merge</emphasis> and <emphasis>branch.&lt;name&gt;.remote</emphasis> in
        <xref linkend="git-config(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--upload-pack &lt;upload-pack&gt;
</term>
<listitem>
<simpara>
        When given, and the repository to fetch from is handled
        by <emphasis>git fetch-pack</emphasis>, <emphasis>--exec=&lt;upload-pack&gt;</emphasis> is passed to
        the command to specify non-default path for the command
        run on the other end.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--progress
</term>
<listitem>
<simpara>
        Progress status is reported on the standard error stream
        by default when it is attached to a terminal, unless -q
        is specified. This flag forces progress status even if the
        standard error stream is not directed to a terminal.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-o &lt;option&gt;
</term>
<term>
--server-option=&lt;option&gt;
</term>
<listitem>
<simpara>
        Transmit the given string to the server when communicating using
        protocol version 2.  The given string must not contain a NUL or LF
        character.  The server's handling of server options, including
        unknown ones, is server-specific.
        When multiple <emphasis>--server-option=&lt;option&gt;</emphasis> are given, they are all
        sent to the other side in the order listed on the command line.
        When no <emphasis>--server-option=&lt;option&gt;</emphasis> is given from the command line,
        the values of configuration variable <emphasis>remote.&lt;name&gt;.serverOption</emphasis>
        are used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-forced-updates
</term>
<listitem>
<simpara>
        By default, git checks if a branch is force-updated during
        fetch. This can be disabled through fetch.showForcedUpdates, but
        the --show-forced-updates option guarantees this check occurs.
        See <xref linkend="git-config(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-show-forced-updates
</term>
<listitem>
<simpara>
        By default, git checks if a branch is force-updated during
        fetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates
        to false to skip this check for performance reasons. If used during
        <emphasis>git-pull</emphasis> the --ff-only option will still check for forced updates
        before attempting a fast-forward update. See <xref linkend="git-config(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-4
</term>
<term>
--ipv4
</term>
<listitem>
<simpara>
        Use IPv4 addresses only, ignoring IPv6 addresses.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-6
</term>
<term>
--ipv6
</term>
<listitem>
<simpara>
        Use IPv6 addresses only, ignoring IPv4 addresses.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;repository&gt;
</term>
<listitem>
<simpara>
        The "remote" repository that is the source of a fetch
        or pull operation.  This parameter can be either a URL
        (see the section <link linkend="git-pull(1)_URLS">GIT URLS</link> below) or the name
        of a remote (see the section <link linkend="git-pull(1)_REMOTES">REMOTES</link> below).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;refspec&gt;
</term>
<listitem>
<simpara>
        Specifies which refs to fetch and which local refs to update.
        When no &lt;refspec&gt;s appear on the command line, the refs to fetch
        are read from <emphasis>remote.&lt;repository&gt;.fetch</emphasis> variables instead
        (see the section "CONFIGURED REMOTE-TRACKING BRANCHES"
        in <xref linkend="git-fetch(1)" />).
</simpara>
<simpara>The format of a &lt;refspec&gt; parameter is an optional plus
<emphasis>+</emphasis>, followed by the source &lt;src&gt;, followed
by a colon <emphasis>:</emphasis>, followed by the destination &lt;dst&gt;.
The colon can be omitted when &lt;dst&gt; is empty.  &lt;src&gt; is
typically a ref, or a glob pattern with a single <emphasis>*</emphasis> that is used
to match a set of refs, but it can also be a fully spelled hex object
name.</simpara>
<simpara>A &lt;refspec&gt; may contain a <emphasis>*</emphasis> in its &lt;src&gt; to indicate a simple pattern
match. Such a refspec functions like a glob that matches any ref with the
pattern. A pattern &lt;refspec&gt; must have one and only one <emphasis>*</emphasis> in both the &lt;src&gt; and
&lt;dst&gt;. It will map refs to the destination by replacing the <emphasis>*</emphasis> with the
contents matched from the source.</simpara>
<simpara>If a refspec is prefixed by <emphasis>^</emphasis>, it will be interpreted as a negative
refspec. Rather than specifying which refs to fetch or which local refs to
update, such a refspec will instead specify refs to exclude. A ref will be
considered to match if it matches at least one positive refspec, and does
not match any negative refspec. Negative refspecs can be useful to restrict
the scope of a pattern refspec so that it will not include specific refs.
Negative refspecs can themselves be pattern refspecs. However, they may only
contain a &lt;src&gt; and do not specify a &lt;dst&gt;. Fully spelled out hex object
names are also not supported.</simpara>
<simpara><emphasis>tag &lt;tag&gt;</emphasis> means the same as <emphasis>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</emphasis>;
it requests fetching everything up to the given tag.</simpara>
<simpara>The remote ref that matches &lt;src&gt;
is fetched, and if &lt;dst&gt; is not an empty string, an attempt
is made to update the local ref that matches it.</simpara>
<simpara>Whether that update is allowed without <emphasis>--force</emphasis> depends on the ref
namespace it's being fetched to, the type of object being fetched, and
whether the update is considered to be a fast-forward. Generally, the
same rules apply for fetching as when pushing, see the <emphasis>&lt;refspec&gt;...</emphasis>
section of <xref linkend="git-push(1)" /> for what those are. Exceptions to those
rules particular to <emphasis>git fetch</emphasis> are noted below.</simpara>
<simpara>Until Git version 2.20, and unlike when pushing with
<xref linkend="git-push(1)" />, any updates to <emphasis>refs/tags/*</emphasis> would be accepted
without <emphasis>+</emphasis> in the refspec (or <emphasis>--force</emphasis>). When fetching, we promiscuously
considered all tag updates from a remote to be forced fetches.  Since
Git version 2.20, fetching to update <emphasis>refs/tags/*</emphasis> works the same way
as when pushing. I.e. any updates will be rejected without <emphasis>+</emphasis> in the
refspec (or <emphasis>--force</emphasis>).</simpara>
<simpara>Unlike when pushing with <xref linkend="git-push(1)" />, any updates outside of
<emphasis>refs/{tags,heads}/*</emphasis> will be accepted without <emphasis>+</emphasis> in the refspec (or
<emphasis>--force</emphasis>), whether that's swapping e.g. a tree object for a blob, or
a commit for another commit that doesn't have the previous commit as
an ancestor etc.</simpara>
<simpara>Unlike when pushing with <xref linkend="git-push(1)" />, there is no
configuration which'll amend these rules, and nothing like a
<emphasis>pre-fetch</emphasis> hook analogous to the <emphasis>pre-receive</emphasis> hook.</simpara>
<simpara>As with pushing with <xref linkend="git-push(1)" />, all of the rules described
above about what's not allowed as an update can be overridden by
adding an optional leading <emphasis>+</emphasis> to a refspec (or using the <emphasis>--force</emphasis>
command line option). The only exception to this is that no amount of
forcing will make the <emphasis>refs/heads/*</emphasis> namespace accept a non-commit
object.</simpara>
<note><simpara>When the remote branch you want to fetch is known to
be rewound and rebased regularly, it is expected that
its new tip will not be a descendant of its previous tip
(as stored in your remote-tracking branch the last time
you fetched).  You would want
to use the <emphasis>+</emphasis> sign to indicate non-fast-forward updates
will be needed for such branches.  There is no way to
determine or declare that a branch will be made available
in a repository with this behavior; the pulling user simply
must know this is the expected usage pattern for a branch.</simpara></note>
<note><simpara>There is a difference between listing multiple &lt;refspec&gt;
directly on <emphasis>git pull</emphasis> command line and having multiple
<emphasis>remote.&lt;repository&gt;.fetch</emphasis> entries in your configuration
for a &lt;repository&gt; and running a
<emphasis>git pull</emphasis> command without any explicit &lt;refspec&gt; parameters.
&lt;refspec&gt;s listed explicitly on the command line are always
merged into the current branch after fetching.  In other words,
if you list more than one remote ref, <emphasis>git pull</emphasis> will create
an Octopus merge.  On the other hand, if you do not list any
explicit &lt;refspec&gt; parameter on the command line, <emphasis>git pull</emphasis>
will fetch all the &lt;refspec&gt;s it finds in the
<emphasis>remote.&lt;repository&gt;.fetch</emphasis> configuration and merge
only the first &lt;refspec&gt; found into the current branch.
This is because making an
Octopus from remote refs is rarely done, while keeping track
of multiple remote heads in one-go by fetching more than one
is often useful.</simpara></note>
</listitem>
</varlistentry>
</variablelist>
</section>
</simplesect>
<simplesect id="git-pull(1)__git_urls_anchor_id_git_pull_1__urls_xreflabel_urls">
<title>GIT URLS<anchor id="git-pull(1)_URLS" xreflabel="[URLS]"/></title>
<simpara>In general, URLs contain information about the transport protocol, the
address of the remote server, and the path to the repository.
Depending on the transport protocol, some of this information may be
absent.</simpara>
<simpara>Git supports ssh, git, http, and https protocols (in addition, ftp
and ftps can be used for fetching, but this is inefficient and
deprecated; do not use them).</simpara>
<simpara>The native transport (i.e. <emphasis>git://</emphasis> URL) does no authentication and
should be used with caution on unsecured networks.</simpara>
<simpara>The following syntaxes may be used with them:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>ssh://[&lt;user&gt;@]&lt;host&gt;[:&lt;port&gt;]/&lt;path-to-git-repo&gt;</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>git://&lt;host&gt;[:&lt;port&gt;]/&lt;path-to-git-repo&gt;</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>http[s]://&lt;host&gt;[:&lt;port&gt;]/&lt;path-to-git-repo&gt;</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>ftp[s]://&lt;host&gt;[:&lt;port&gt;]/&lt;path-to-git-repo&gt;</emphasis>
</simpara>
</listitem>
</itemizedlist>
<simpara>An alternative scp-like syntax may also be used with the ssh protocol:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>[&lt;user&gt;@]&lt;host&gt;:/&lt;path-to-git-repo&gt;</emphasis>
</simpara>
</listitem>
</itemizedlist>
<simpara>This syntax is only recognized if there are no slashes before the
first colon. This helps differentiate a local path that contains a
colon. For example the local path <emphasis>foo:bar</emphasis> could be specified as an
absolute path or <emphasis>./foo:bar</emphasis> to avoid being misinterpreted as an ssh
url.</simpara>
<simpara>The ssh and git protocols additionally support <emphasis>~&lt;username&gt;</emphasis> expansion:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>ssh://[&lt;user&gt;@]&lt;host&gt;[:&lt;port&gt;]/~&lt;user&gt;/&lt;path-to-git-repo&gt;</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>git://&lt;host&gt;[:&lt;port&gt;]/~&lt;user&gt;/&lt;path-to-git-repo&gt;</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>[&lt;user&gt;@]&lt;host&gt;:~&lt;user&gt;/&lt;path-to-git-repo&gt;</emphasis>
</simpara>
</listitem>
</itemizedlist>
<simpara>For local repositories, also supported by Git natively, the following
syntaxes may be used:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>/path/to/repo.git/</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>file:///path/to/repo.git/</emphasis>
</simpara>
</listitem>
</itemizedlist>
<simpara>These two syntaxes are mostly equivalent, except when cloning, when
the former implies <emphasis>--local</emphasis> option. See <xref linkend="git-clone(1)" /> for
details.</simpara>
<simpara><emphasis>git clone</emphasis>, <emphasis>git fetch</emphasis> and <emphasis>git pull</emphasis>, but not <emphasis>git push</emphasis>, will also
accept a suitable bundle file. See <xref linkend="git-bundle(1)" />.</simpara>
<simpara>When Git doesn't know how to handle a certain transport protocol, it
attempts to use the <emphasis>remote-&lt;transport&gt;</emphasis> remote helper, if one
exists. To explicitly request a remote helper, the following syntax
may be used:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>&lt;transport&gt;::&lt;address&gt;</emphasis>
</simpara>
</listitem>
</itemizedlist>
<simpara>where <emphasis>&lt;address&gt;</emphasis> may be a path, a server and path, or an arbitrary
URL-like string recognized by the specific remote helper being
invoked. See <xref linkend="gitremote-helpers(7)" /> for details.</simpara>
<simpara>If there are a large number of similarly-named remote repositories and
you want to use a different format for them (such that the URLs you
use will be rewritten into URLs that work), you can create a
configuration section of the form:</simpara>
<blockquote>
<literallayout>        [url "<emphasis>&lt;actual-url-base&gt;</emphasis>"]
                insteadOf = <emphasis>&lt;other-url-base&gt;</emphasis></literallayout>
</blockquote>
<simpara>For example, with this:</simpara>
<screen>        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:</screen>
<simpara>a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will be
rewritten in any context that takes a URL to be "git://git.host.xz/repo.git".</simpara>
<simpara>If you want to rewrite URLs for push only, you can create a
configuration section of the form:</simpara>
<blockquote>
<literallayout>        [url "<emphasis>&lt;actual-url-base&gt;</emphasis>"]
                pushInsteadOf = <emphasis>&lt;other-url-base&gt;</emphasis></literallayout>
</blockquote>
<simpara>For example, with this:</simpara>
<screen>        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/</screen>
<simpara>a URL like "git://example.org/path/to/repo.git" will be rewritten to
"ssh://example.org/path/to/repo.git" for pushes, but pulls will still
use the original URL.</simpara>
</simplesect>
<simplesect id="git-pull(1)__remotes_anchor_id_git_pull_1__remotes_xreflabel_remotes">
<title>REMOTES<anchor id="git-pull(1)_REMOTES" xreflabel="[REMOTES]"/></title>
<simpara>The name of one of the following can be used instead
of a URL as <emphasis>&lt;repository&gt;</emphasis> argument:</simpara>
<itemizedlist>
<listitem>
<simpara>
a remote in the Git configuration file: <emphasis>$GIT_DIR/config</emphasis>,
</simpara>
</listitem>
<listitem>
<simpara>
a file in the <emphasis>$GIT_DIR/remotes</emphasis> directory, or
</simpara>
</listitem>
<listitem>
<simpara>
a file in the <emphasis>$GIT_DIR/branches</emphasis> directory.
</simpara>
</listitem>
</itemizedlist>
<simpara>All of these also allow you to omit the refspec from the command line
because they each contain a refspec which git will use by default.</simpara>
<section id="git-pull(1)__named_remote_in_configuration_file">
<title>Named remote in configuration file</title>
<simpara>You can choose to provide the name of a remote which you had previously
configured using <xref linkend="git-remote(1)" />, <xref linkend="git-config(1)" />
or even by a manual edit to the <emphasis>$GIT_DIR/config</emphasis> file.  The URL of
this remote will be used to access the repository.  The refspec
of this remote will be used by default when you do
not provide a refspec on the command line.  The entry in the
config file would appear like this:</simpara>
<screen>        [remote "&lt;name&gt;"]
                url = &lt;URL&gt;
                pushurl = &lt;pushurl&gt;
                push = &lt;refspec&gt;
                fetch = &lt;refspec&gt;</screen>
<simpara>The <emphasis>&lt;pushurl&gt;</emphasis> is used for pushes only. It is optional and defaults
to <emphasis>&lt;URL&gt;</emphasis>. Pushing to a remote affects all defined pushurls or all
defined urls if no pushurls are defined. Fetch, however, will only
fetch from the first defined url if multiple urls are defined.</simpara>
</section>
<section id="git-pull(1)__named_file_in_emphasis_git_dir_remotes_emphasis">
<title>Named file in <emphasis>$GIT_DIR/remotes</emphasis></title>
<simpara>You can choose to provide the name of a
file in <emphasis>$GIT_DIR/remotes</emphasis>.  The URL
in this file will be used to access the repository.  The refspec
in this file will be used as default when you do not
provide a refspec on the command line.  This file should have the
following format:</simpara>
<screen>        URL: one of the above URL formats
        Push: &lt;refspec&gt;
        Pull: &lt;refspec&gt;</screen>
<simpara><emphasis>Push:</emphasis> lines are used by <emphasis>git push</emphasis> and
<emphasis>Pull:</emphasis> lines are used by <emphasis>git pull</emphasis> and <emphasis>git fetch</emphasis>.
Multiple <emphasis>Push:</emphasis> and <emphasis>Pull:</emphasis> lines may
be specified for additional branch mappings.</simpara>
</section>
<section id="git-pull(1)__named_file_in_emphasis_git_dir_branches_emphasis">
<title>Named file in <emphasis>$GIT_DIR/branches</emphasis></title>
<simpara>You can choose to provide the name of a
file in <emphasis>$GIT_DIR/branches</emphasis>.
The URL in this file will be used to access the repository.
This file should have the following format:</simpara>
<screen>        &lt;URL&gt;#&lt;head&gt;</screen>
<simpara><emphasis>&lt;URL&gt;</emphasis> is required; <emphasis>#&lt;head&gt;</emphasis> is optional.</simpara>
<simpara>Depending on the operation, git will use one of the following
refspecs, if you don't provide one on the command line.
<emphasis>&lt;branch&gt;</emphasis> is the name of this file in <emphasis>$GIT_DIR/branches</emphasis> and
<emphasis>&lt;head&gt;</emphasis> defaults to <emphasis>master</emphasis>.</simpara>
<simpara>git fetch uses:</simpara>
<screen>        refs/heads/&lt;head&gt;:refs/heads/&lt;branch&gt;</screen>
<simpara>git push uses:</simpara>
<screen>        HEAD:refs/heads/&lt;head&gt;</screen>
</section>
</simplesect>
<simplesect id="git-pull(1)__merge_strategies">
<title>MERGE STRATEGIES</title>
<simpara>The merge mechanism (<emphasis>git merge</emphasis> and <emphasis>git pull</emphasis> commands) allows the
backend <emphasis>merge strategies</emphasis> to be chosen with <emphasis>-s</emphasis> option.  Some strategies
can also take their own options, which can be passed by giving <emphasis>-X&lt;option&gt;</emphasis>
arguments to <emphasis>git merge</emphasis> and/or <emphasis>git pull</emphasis>.</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>ort</emphasis>
</term>
<listitem>
<simpara>
        This is the default merge strategy when pulling or merging one
        branch.  This strategy can only resolve two heads using a
        3-way merge algorithm.  When there is more than one common
        ancestor that can be used for 3-way merge, it creates a merged
        tree of the common ancestors and uses that as the reference
        tree for the 3-way merge.  This has been reported to result in
        fewer merge conflicts without causing mismerges by tests done
        on actual merge commits taken from Linux 2.6 kernel
        development history.  Additionally this strategy can detect
        and handle merges involving renames.  It does not make use of
        detected copies.  The name for this algorithm is an acronym
        ("Ostensibly Recursive's Twin") and came from the fact that it
        was written as a replacement for the previous default
        algorithm, <emphasis>recursive</emphasis>.
</simpara>
<simpara>In the case where the path is a submodule, if the submodule commit used on
one side of the merge is a descendant of the submodule commit used on the
other side of the merge, Git attempts to fast-forward to the
descendant. Otherwise, Git will treat this case as a conflict, suggesting
as a resolution a submodule commit that is descendant of the conflicting
ones, if one exists.</simpara>
<simpara>The <emphasis>ort</emphasis> strategy can take the following options:</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>ours</emphasis>
</term>
<listitem>
<simpara>
        This option forces conflicting hunks to be auto-resolved cleanly by
        favoring <emphasis>our</emphasis> version.  Changes from the other tree that do not
        conflict with our side are reflected in the merge result.
        For a binary file, the entire contents are taken from our side.
</simpara>
<simpara>This should not be confused with the <emphasis>ours</emphasis> merge strategy, which does not
even look at what the other tree contains at all.  It discards everything
the other tree did, declaring <emphasis>our</emphasis> history contains all that happened in it.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>theirs</emphasis>
</term>
<listitem>
<simpara>
        This is the opposite of <emphasis>ours</emphasis>; note that, unlike <emphasis>ours</emphasis>, there is
        no <emphasis>theirs</emphasis> merge strategy to confuse this merge option with.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>ignore-space-change</emphasis>
</term>
<term>
<emphasis>ignore-all-space</emphasis>
</term>
<term>
<emphasis>ignore-space-at-eol</emphasis>
</term>
<term>
<emphasis>ignore-cr-at-eol</emphasis>
</term>
<listitem>
<simpara>
        Treats lines with the indicated type of whitespace change as
        unchanged for the sake of a three-way merge.  Whitespace
        changes mixed with other changes to a line are not ignored.
        See also <xref linkend="git-diff(1)" /> <emphasis>-b</emphasis>, <emphasis>-w</emphasis>,
        <emphasis>--ignore-space-at-eol</emphasis>, and <emphasis>--ignore-cr-at-eol</emphasis>.
</simpara>
<itemizedlist>
<listitem>
<simpara>
If <emphasis>their</emphasis> version only introduces whitespace changes to a line,
  <emphasis>our</emphasis> version is used;
</simpara>
</listitem>
<listitem>
<simpara>
If <emphasis>our</emphasis> version introduces whitespace changes but <emphasis>their</emphasis>
  version includes a substantial change, <emphasis>their</emphasis> version is used;
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise, the merge proceeds in the usual way.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>renormalize</emphasis>
</term>
<listitem>
<simpara>
        This runs a virtual check-out and check-in of all three stages
        of any file which needs a three-way merge.  This option is
        meant to be used when merging branches with different clean
        filters or end-of-line normalization rules.  See "Merging
        branches with differing checkin/checkout attributes" in
        <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>no-renormalize</emphasis>
</term>
<listitem>
<simpara>
        Disables the <emphasis>renormalize</emphasis> option.  This overrides the
        <emphasis>merge.renormalize</emphasis> configuration variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>find-renames[=&lt;n&gt;]</emphasis>
</term>
<listitem>
<simpara>
        Turn on rename detection, optionally setting the similarity
        threshold.  This is the default. This overrides the
        <emphasis>merge.renames</emphasis> configuration variable.
        See also <xref linkend="git-diff(1)" /> <emphasis>--find-renames</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>rename-threshold=&lt;n&gt;</emphasis>
</term>
<listitem>
<simpara>
        Deprecated synonym for <emphasis>find-renames=&lt;n&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>no-renames</emphasis>
</term>
<listitem>
<simpara>
        Turn off rename detection. This overrides the <emphasis>merge.renames</emphasis>
        configuration variable.
        See also <xref linkend="git-diff(1)" /> <emphasis>--no-renames</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>histogram</emphasis>
</term>
<listitem>
<simpara>
        Deprecated synonym for <emphasis>diff-algorithm=histogram</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>patience</emphasis>
</term>
<listitem>
<simpara>
        Deprecated synonym for <emphasis>diff-algorithm=patience</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff-algorithm=(histogram|minimal|myers|patience)</emphasis>
</term>
<listitem>
<simpara>
        Use a different diff algorithm while merging, which can help
        avoid mismerges that occur due to unimportant matching lines
        (such as braces from distinct functions).  See also
        <xref linkend="git-diff(1)" /> <emphasis>--diff-algorithm</emphasis>.  Note that <emphasis>ort</emphasis>
        defaults to <emphasis>diff-algorithm=histogram</emphasis>, while regular diffs
        currently default to the <emphasis>diff.algorithm</emphasis> config setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>subtree[=&lt;path&gt;]</emphasis>
</term>
<listitem>
<simpara>
        This option is a more advanced form of <emphasis>subtree</emphasis> strategy, where
        the strategy makes a guess on how two trees must be shifted to
        match with each other when merging.  Instead, the specified path
        is prefixed (or stripped from the beginning) to make the shape of
        two trees to match.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>recursive</emphasis>
</term>
<listitem>
<simpara>
        This is now a synonym for <emphasis>ort</emphasis>.  It was an alternative
        implementation until v2.49.0, but was redirected to mean <emphasis>ort</emphasis>
        in v2.50.0.  The previous recursive strategy was the default
        strategy for resolving two heads from Git v0.99.9k until
        v2.33.0.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>resolve</emphasis>
</term>
<listitem>
<simpara>
        This can only resolve two heads (i.e. the current branch
        and another branch you pulled from) using a 3-way merge
        algorithm.  It tries to carefully detect criss-cross
        merge ambiguities.  It does not handle renames.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>octopus</emphasis>
</term>
<listitem>
<simpara>
        This resolves cases with more than two heads, but refuses to do
        a complex merge that needs manual resolution.  It is
        primarily meant to be used for bundling topic branch
        heads together.  This is the default merge strategy when
        pulling or merging more than one branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>ours</emphasis>
</term>
<listitem>
<simpara>
        This resolves any number of heads, but the resulting tree of the
        merge is always that of the current branch head, effectively
        ignoring all changes from all other branches.  It is meant to
        be used to supersede old development history of side
        branches.  Note that this is different from the <emphasis>-Xours</emphasis> option to
        the <emphasis>ort</emphasis> merge strategy.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>subtree</emphasis>
</term>
<listitem>
<simpara>
        This is a modified <emphasis>ort</emphasis> strategy. When merging trees A and
        B, if B corresponds to a subtree of A, B is first adjusted to
        match the tree structure of A, instead of reading the trees at
        the same level. This adjustment is also done to the common
        ancestor tree.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>With the strategies that use 3-way merge (including the default, <emphasis>ort</emphasis>),
if a change is made on both branches, but later reverted on one of the
branches, that change will be present in the merged result; some people find
this behavior confusing.  It occurs because only the heads and the merge base
are considered when performing a merge, not the individual commits.  The merge
algorithm therefore considers the reverted change as no change at all, and
substitutes the changed version instead.</simpara>
</simplesect>
<simplesect id="git-pull(1)__default_behaviour">
<title>DEFAULT BEHAVIOUR</title>
<simpara>Often people use <emphasis>git pull</emphasis> without giving any parameter.
Traditionally, this has been equivalent to saying <emphasis>git pull
origin</emphasis>.  However, when configuration <emphasis>branch.&lt;name&gt;.remote</emphasis> is
present while on branch <emphasis>&lt;name&gt;</emphasis>, that value is used instead of
<emphasis>origin</emphasis>.</simpara>
<simpara>In order to determine what URL to use to fetch from, the value
of the configuration <emphasis>remote.&lt;origin&gt;.url</emphasis> is consulted
and if there is not any such variable, the value on the <emphasis>URL:</emphasis> line
in <emphasis>$GIT_DIR/remotes/&lt;origin&gt;</emphasis> is used.</simpara>
<simpara>In order to determine what remote branches to fetch (and
optionally store in the remote-tracking branches) when the command is
run without any refspec parameters on the command line, values
of the configuration variable <emphasis>remote.&lt;origin&gt;.fetch</emphasis> are
consulted, and if there aren't any, <emphasis>$GIT_DIR/remotes/&lt;origin&gt;</emphasis>
is consulted and its <emphasis>Pull:</emphasis> lines are used.
In addition to the refspec formats described in the OPTIONS
section, you can have a globbing refspec that looks like this:</simpara>
<screen>refs/heads/*:refs/remotes/origin/*</screen>
<simpara>A globbing refspec must have a non-empty RHS (i.e. must store
what were fetched in remote-tracking branches), and its LHS and RHS
must end with <emphasis>/*</emphasis>.  The above specifies that all remote
branches are tracked using remote-tracking branches in
<emphasis>refs/remotes/origin/</emphasis> hierarchy under the same name.</simpara>
<simpara>The rule to determine which remote branch to merge after
fetching is a bit involved, in order not to break backward
compatibility.</simpara>
<simpara>If explicit refspecs were given on the command
line of <emphasis>git pull</emphasis>, they are all merged.</simpara>
<simpara>When no refspec was given on the command line, then <emphasis>git pull</emphasis>
uses the refspec from the configuration or
<emphasis>$GIT_DIR/remotes/&lt;origin&gt;</emphasis>.  In such cases, the following
rules apply:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
If <emphasis>branch.&lt;name&gt;.merge</emphasis> configuration for the current
  branch <emphasis>&lt;name&gt;</emphasis> exists, that is the name of the branch at the
  remote site that is merged.
</simpara>
</listitem>
<listitem>
<simpara>
If the refspec is a globbing one, nothing is merged.
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise the remote branch of the first refspec is merged.
</simpara>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="git-pull(1)__examples">
<title>EXAMPLES</title>
<itemizedlist>
<listitem>
<simpara>
Update the remote-tracking branches for the repository
  you cloned from, then merge one of them into your
  current branch:
</simpara>
<screen>$ git pull
$ git pull origin</screen>
<simpara>Normally the branch merged in is the HEAD of the remote repository,
but the choice is determined by the branch.&lt;name&gt;.remote and
branch.&lt;name&gt;.merge options; see <xref linkend="git-config(1)" /> for details.</simpara>
</listitem>
<listitem>
<simpara>
Merge into the current branch the remote branch <emphasis>next</emphasis>:
</simpara>
<screen>$ git pull origin next</screen>
<simpara>This leaves a copy of <emphasis>next</emphasis> temporarily in FETCH_HEAD, and
updates the remote-tracking branch <emphasis>origin/next</emphasis>.
The same can be done by invoking fetch and merge:</simpara>
<screen>$ git fetch origin
$ git merge origin/next</screen>
</listitem>
</itemizedlist>
<simpara>If you tried a pull which resulted in complex conflicts and
would want to start over, you can recover with <emphasis>git reset</emphasis>.</simpara>
</simplesect>
<simplesect id="git-pull(1)__security">
<title>SECURITY</title>
<simpara>The fetch and push protocols are not designed to prevent one side from
stealing data from the other repository that was not intended to be
shared. If you have private data that you need to protect from a malicious
peer, your best option is to store it in another repository. This applies
to both clients and servers. In particular, namespaces on a server are not
effective for read access control; you should only grant read access to a
namespace to clients that you would trust with read access to the entire
repository.</simpara>
<simpara>The known attack vectors are as follows:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
The victim sends "have" lines advertising the IDs of objects it has that
  are not explicitly intended to be shared but can be used to optimize the
  transfer if the peer also has them. The attacker chooses an object ID X
  to steal and sends a ref to X, but isn't required to send the content of
  X because the victim already has it. Now the victim believes that the
  attacker has X, and it sends the content of X back to the attacker
  later. (This attack is most straightforward for a client to perform on a
  server, by creating a ref to X in the namespace the client has access
  to and then fetching it. The most likely way for a server to perform it
  on a client is to "merge" X into a public branch and hope that the user
  does additional work on this branch and pushes it back to the server
  without noticing the merge.)
</simpara>
</listitem>
<listitem>
<simpara>
As in #1, the attacker chooses an object ID X to steal. The victim sends
  an object Y that the attacker already has, and the attacker falsely
  claims to have X and not Y, so the victim sends Y as a delta against X.
  The delta reveals regions of X that are similar to Y to the attacker.
</simpara>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="git-pull(1)__bugs">
<title>BUGS</title>
<simpara>Using --recurse-submodules can only fetch new commits in already checked
out submodules right now. When e.g. upstream added a new submodule in the
just fetched commits of the superproject the submodule itself cannot be
fetched, making it impossible to check out that submodule later without
having to do a fetch again. This is expected to be fixed in a future Git
version.</simpara>
</simplesect>
<simplesect id="git-pull(1)__see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="git-fetch(1)" />, <xref linkend="git-merge(1)" />, <xref linkend="git-config(1)" /></simpara>
</simplesect>
<simplesect id="git-pull(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
