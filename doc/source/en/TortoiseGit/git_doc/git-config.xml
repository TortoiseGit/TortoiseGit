<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="git-config(1)">
    <title>git-config(1)</title>
<indexterm>
<primary>git-config(1)</primary>
</indexterm>
<simplesect id="git-config(1)__name">
<title>NAME</title>
<simpara>git-config - Get and set repository or global options</simpara>
</simplesect>
<simplesect id="git-config(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git config list</emphasis> [&lt;file-option&gt;] [&lt;display-option&gt;] [--includes]
<emphasis>git config get</emphasis> [&lt;file-option&gt;] [&lt;display-option&gt;] [--includes] [--all] [--regexp] [--value=&lt;value&gt;] [--fixed-value] [--default=&lt;default&gt;] &lt;name&gt;
<emphasis>git config set</emphasis> [&lt;file-option&gt;] [--type=&lt;type&gt;] [--all] [--value=&lt;value&gt;] [--fixed-value] &lt;name&gt; &lt;value&gt;
<emphasis>git config unset</emphasis> [&lt;file-option&gt;] [--all] [--value=&lt;value&gt;] [--fixed-value] &lt;name&gt;
<emphasis>git config rename-section</emphasis> [&lt;file-option&gt;] &lt;old-name&gt; &lt;new-name&gt;
<emphasis>git config remove-section</emphasis> [&lt;file-option&gt;] &lt;name&gt;
<emphasis>git config edit</emphasis> [&lt;file-option&gt;]
<emphasis>git config</emphasis> [&lt;file-option&gt;] --get-colorbool &lt;name&gt; [&lt;stdout-is-tty&gt;]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-config(1)__description">
<title>DESCRIPTION</title>
<simpara>You can query/set/replace/unset options with this command. The name is
actually the section and the key separated by a dot, and the value will be
escaped.</simpara>
<simpara>Multiple lines can be added to an option by using the <emphasis>--append</emphasis> option.
If you want to update or unset an option which can occur on multiple
lines, a <emphasis>value-pattern</emphasis> (which is an extended regular expression,
unless the <emphasis>--fixed-value</emphasis> option is given) needs to be given.  Only the
existing values that match the pattern are updated or unset.  If
you want to handle the lines that do <emphasis role="strong">not</emphasis> match the pattern, just
prepend a single exclamation mark in front (see also <xref linkend="git-config(1)_EXAMPLES"/>),
but note that this only works when the <emphasis>--fixed-value</emphasis> option is not
in use.</simpara>
<simpara>The <emphasis>--type=&lt;type&gt;</emphasis> option instructs <emphasis>git config</emphasis> to ensure that incoming and
outgoing values are canonicalize-able under the given &lt;type&gt;.  If no
<emphasis>--type=&lt;type&gt;</emphasis> is given, no canonicalization will be performed. Callers may
unset an existing <emphasis>--type</emphasis> specifier with <emphasis>--no-type</emphasis>.</simpara>
<simpara>When reading, the values are read from the system, global and
repository local configuration files by default, and options
<emphasis>--system</emphasis>, <emphasis>--global</emphasis>, <emphasis>--local</emphasis>, <emphasis>--worktree</emphasis> and
<emphasis>--file &lt;filename&gt;</emphasis> can be used to tell the command to read from only
that location (see <xref linkend="git-config(1)_FILES"/>).</simpara>
<simpara>When writing, the new value is written to the repository local
configuration file by default, and options <emphasis>--system</emphasis>, <emphasis>--global</emphasis>,
<emphasis>--worktree</emphasis>, <emphasis>--file &lt;filename&gt;</emphasis> can be used to tell the command to
write to that location (you can say <emphasis>--local</emphasis> but that is the
default).</simpara>
<simpara>This command will fail with non-zero status upon error.  Some exit
codes are:</simpara>
<itemizedlist>
<listitem>
<simpara>
The section or key is invalid (ret=1),
</simpara>
</listitem>
<listitem>
<simpara>
no section or name was provided (ret=2),
</simpara>
</listitem>
<listitem>
<simpara>
the config file is invalid (ret=3),
</simpara>
</listitem>
<listitem>
<simpara>
the config file cannot be written (ret=4),
</simpara>
</listitem>
<listitem>
<simpara>
you try to unset an option which does not exist (ret=5),
</simpara>
</listitem>
<listitem>
<simpara>
you try to unset/set an option for which multiple lines match (ret=5), or
</simpara>
</listitem>
<listitem>
<simpara>
you try to use an invalid regexp (ret=6).
</simpara>
</listitem>
</itemizedlist>
<simpara>On success, the command returns the exit code 0.</simpara>
<simpara>A list of all available configuration variables can be obtained using the
<emphasis>git help --config</emphasis> command.</simpara>
</simplesect>
<simplesect id="git-config(1)__commands">
<title>COMMANDS</title>
<variablelist>
<varlistentry>
<term>
list
</term>
<listitem>
<simpara>
        List all variables set in config file, along with their values.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
get
</term>
<listitem>
<simpara>
        Emits the value of the specified key. If key is present multiple times
        in the configuration, emits the last value. If <emphasis>--all</emphasis> is specified,
        emits all values associated with key. Returns error code 1 if key is
        not present.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
set
</term>
<listitem>
<simpara>
        Set value for one or more config options. By default, this command
        refuses to write multi-valued config options. Passing <emphasis>--all</emphasis> will
        replace all multi-valued config options with the new value, whereas
        <emphasis>--value=</emphasis> will replace all config options whose values match the given
        pattern.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
unset
</term>
<listitem>
<simpara>
        Unset value for one or more config options. By default, this command
        refuses to unset multi-valued keys. Passing <emphasis>--all</emphasis> will unset all
        multi-valued config options, whereas <emphasis>--value</emphasis> will unset all config
        options whose values match the given pattern.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rename-section
</term>
<listitem>
<simpara>
        Rename the given section to a new name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remove-section
</term>
<listitem>
<simpara>
        Remove the given section from the configuration file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
edit
</term>
<listitem>
<simpara>
        Opens an editor to modify the specified config file; either
        <emphasis>--system</emphasis>, <emphasis>--global</emphasis>, <emphasis>--local</emphasis> (default), <emphasis>--worktree</emphasis>, or
        <emphasis>--file &lt;config-file&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-config(1)_OPTIONS">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--replace-all
</term>
<listitem>
<simpara>
        Default behavior is to replace at most one line. This replaces
        all lines matching the key (and optionally the <emphasis>value-pattern</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--append
</term>
<listitem>
<simpara>
        Adds a new line to the option without altering any existing
        values. This is the same as providing <emphasis>--value=^$</emphasis> in <emphasis>set</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--comment &lt;message&gt;
</term>
<listitem>
<simpara>
        Append a comment at the end of new or modified lines.
</simpara>
<literallayout class="monospaced">If _&lt;message&gt;_ begins with one or more whitespaces followed
by "#", it is used as-is.  If it begins with "#", a space is
prepended before it is used.  Otherwise, a string " # " (a
space followed by a hash followed by a space) is prepended
to it.  And the resulting string is placed immediately after
the value defined for the variable.  The _&lt;message&gt;_ must
not contain linefeed characters (no multi-line comments are
permitted).</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
--all
</term>
<listitem>
<simpara>
        With <emphasis>get</emphasis>, return all values for a multi-valued key.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--regexp
</term>
<listitem>
<simpara>
        With <emphasis>get</emphasis>, interpret the name as a regular expression. Regular
        expression matching is currently case-sensitive and done against a
        canonicalized version of the key in which section and variable names
        are lowercased, but subsection names are not.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--url=&lt;URL&gt;
</term>
<listitem>
<simpara>
        When given a two-part &lt;name&gt; as &lt;section&gt;.&lt;key&gt;, the value for
        &lt;section&gt;.&lt;URL&gt;.&lt;key&gt; whose &lt;URL&gt; part matches the best to the
        given URL is returned (if no such key exists, the value for
        &lt;section&gt;.&lt;key&gt; is used as a fallback).  When given just the
        &lt;section&gt; as name, do so for all the keys in the section and
        list them.  Returns error code 1 if no value is found.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--global
</term>
<listitem>
<simpara>
        For writing options: write to global <emphasis>~/.gitconfig</emphasis> file
        rather than the repository <emphasis>.git/config</emphasis>, write to
        <emphasis>$XDG_CONFIG_HOME/git/config</emphasis> file if this file exists and the
        <emphasis>~/.gitconfig</emphasis> file doesn't.
</simpara>
<simpara>For reading options: read only from global <emphasis>~/.gitconfig</emphasis> and from
<emphasis>$XDG_CONFIG_HOME/git/config</emphasis> rather than from all available files.</simpara>
<simpara>See also <xref linkend="git-config(1)_FILES"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--system
</term>
<listitem>
<simpara>
        For writing options: write to system-wide
        <emphasis>$(prefix)/etc/gitconfig</emphasis> rather than the repository
        <emphasis>.git/config</emphasis>.
</simpara>
<simpara>For reading options: read only from system-wide <emphasis>$(prefix)/etc/gitconfig</emphasis>
rather than from all available files.</simpara>
<simpara>See also <xref linkend="git-config(1)_FILES"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--local
</term>
<listitem>
<simpara>
        For writing options: write to the repository <emphasis>.git/config</emphasis> file.
        This is the default behavior.
</simpara>
<simpara>For reading options: read only from the repository <emphasis>.git/config</emphasis> rather than
from all available files.</simpara>
<simpara>See also <xref linkend="git-config(1)_FILES"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--worktree
</term>
<listitem>
<simpara>
        Similar to <emphasis>--local</emphasis> except that <emphasis>$GIT_DIR/config.worktree</emphasis> is
        read from or written to if <emphasis>extensions.worktreeConfig</emphasis> is
        enabled. If not it's the same as <emphasis>--local</emphasis>. Note that <emphasis>$GIT_DIR</emphasis>
        is equal to <emphasis>$GIT_COMMON_DIR</emphasis> for the main working tree, but is of
        the form <emphasis>$GIT_DIR/worktrees/&lt;id&gt;/</emphasis> for other working trees. See
        <xref linkend="git-worktree(1)" /> to learn how to enable
        <emphasis>extensions.worktreeConfig</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f &lt;config-file&gt;
</term>
<term>
--file &lt;config-file&gt;
</term>
<listitem>
<simpara>
        For writing options: write to the specified file rather than the
        repository <emphasis>.git/config</emphasis>.
</simpara>
<simpara>For reading options: read only from the specified file rather than from all
available files.</simpara>
<simpara>See also <xref linkend="git-config(1)_FILES"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--blob &lt;blob&gt;
</term>
<listitem>
<simpara>
        Similar to <emphasis>--file</emphasis> but use the given blob instead of a file. E.g.
        you can use <emphasis>master:.gitmodules</emphasis> to read values from the file
        <emphasis>.gitmodules</emphasis> in the master branch. See "SPECIFYING REVISIONS"
        section in <xref linkend="gitrevisions(7)" /> for a more complete list of
        ways to spell blob names.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--fixed-value
</term>
<listitem>
<simpara>
        When used with the <emphasis>value-pattern</emphasis> argument, treat <emphasis>value-pattern</emphasis> as
        an exact string instead of a regular expression. This will restrict
        the name/value pairs that are matched to only those where the value
        is exactly equal to the <emphasis>value-pattern</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--type &lt;type&gt;
</term>
<listitem>
<simpara>
  <emphasis>git config</emphasis> will ensure that any input or output is valid under the given
  type constraint(s), and will canonicalize outgoing values in <emphasis>&lt;type&gt;</emphasis>'s
  canonical form.
</simpara>
<simpara>Valid <emphasis>&lt;type&gt;</emphasis>'s include:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>bool</emphasis>: canonicalize values <emphasis>true</emphasis>, <emphasis>yes</emphasis>,<emphasis>on</emphasis>, and positive
  numbers as "true", and values <emphasis>false</emphasis>, <emphasis>no</emphasis>, <emphasis>off</emphasis> and <emphasis>0</emphasis> as
  "false".
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>int</emphasis>: canonicalize values as simple decimal numbers. An optional suffix of
  <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> will cause the value to be multiplied by 1024, 1048576, or
  1073741824 upon input.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>bool-or-int</emphasis>: canonicalize according to either <emphasis>bool</emphasis> or <emphasis>int</emphasis>, as described
  above.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>path</emphasis>: canonicalize by expanding a leading <emphasis>~</emphasis> to the value of <emphasis>$HOME</emphasis> and
  <emphasis>~user</emphasis> to the home directory for the specified user. This specifier has no
  effect when setting the value (but you can use <emphasis>git config section.variable
  ~/</emphasis> from the command line to let your shell do the expansion.)
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>expiry-date</emphasis>: canonicalize by converting from a fixed or relative date-string
  to a timestamp. This specifier has no effect when setting the value.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>color</emphasis>: When getting a value, canonicalize by converting to an ANSI color
  escape sequence. When setting a value, a sanity-check is performed to ensure
  that the given value is canonicalize-able as an ANSI color, but it is written
  as-is.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
--bool
</term>
<term>
--int
</term>
<term>
--bool-or-int
</term>
<term>
--path
</term>
<term>
--expiry-date
</term>
<listitem>
<simpara>
  Historical options for selecting a type specifier. Prefer instead <emphasis>--type</emphasis>
  (see above).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-type
</term>
<listitem>
<simpara>
  Un-sets the previously set type specifier (if one was previously set). This
  option requests that <emphasis>git config</emphasis> not canonicalize the retrieved variable.
  <emphasis>--no-type</emphasis> has no effect without <emphasis>--type=&lt;type&gt;</emphasis> or <emphasis>--&lt;type&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-z
</term>
<term>
--null
</term>
<listitem>
<simpara>
        For all options that output values and/or keys, always
        end values with the null character (instead of a
        newline). Use newline instead as a delimiter between
        key and value. This allows for secure parsing of the
        output without getting confused e.g. by values that
        contain line breaks.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--name-only
</term>
<listitem>
<simpara>
        Output only the names of config variables for <emphasis>list</emphasis> or
        <emphasis>get</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-origin
</term>
<listitem>
<simpara>
        Augment the output of all queried config options with the
        origin type (file, standard input, blob, command line) and
        the actual origin (config file path, ref, or blob id if
        applicable).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-scope
</term>
<listitem>
<simpara>
        Similar to <emphasis>--show-origin</emphasis> in that it augments the output of
        all queried config options with the scope of that value
        (worktree, local, global, system, command).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-colorbool &lt;name&gt; [&lt;stdout-is-tty&gt;]
</term>
<listitem>
<simpara>
        Find the color setting for <emphasis>&lt;name&gt;</emphasis> (e.g. <emphasis>color.diff</emphasis>) and output
        "true" or "false".  <emphasis>&lt;stdout-is-tty&gt;</emphasis> should be either "true" or
        "false", and is taken into account when configuration says
        "auto".  If <emphasis>&lt;stdout-is-tty&gt;</emphasis> is missing, then checks the standard
        output of the command itself, and exits with status 0 if color
        is to be used, or exits with status 1 otherwise.
        When the color setting for <emphasis>name</emphasis> is undefined, the command uses
        <emphasis>color.ui</emphasis> as fallback.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]includes
</term>
<listitem>
<simpara>
        Respect <emphasis>include.*</emphasis> directives in config files when looking up
        values. Defaults to <emphasis>off</emphasis> when a specific file is given (e.g.,
        using <emphasis>--file</emphasis>, <emphasis>--global</emphasis>, etc) and <emphasis>on</emphasis> when searching all
        config files.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--default &lt;value&gt;
</term>
<listitem>
<simpara>
  When using <emphasis>get</emphasis>, and the requested variable is not found, behave as if
  &lt;value&gt; were the value assigned to that variable.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-config(1)__deprecated_modes">
<title>DEPRECATED MODES</title>
<simpara>The following modes have been deprecated in favor of subcommands. It is
recommended to migrate to the new syntax.</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>git config &lt;name&gt;</emphasis>
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config get &lt;name&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git config &lt;name&gt; &lt;value&gt; [&lt;value-pattern&gt;]</emphasis>
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config set [--value=&lt;pattern&gt;] &lt;name&gt; &lt;value&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-l
</term>
<term>
--list
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config list</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get &lt;name&gt; [&lt;value-pattern&gt;]
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config get [--value=&lt;pattern&gt;] &lt;name&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-all &lt;name&gt; [&lt;value-pattern&gt;]
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config get [--value=&lt;pattern&gt;] --all &lt;name&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-regexp &lt;name-regexp&gt;
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config get --all --show-names --regexp &lt;name-regexp&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-urlmatch &lt;name&gt; &lt;URL&gt;
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config get --all --show-names --url=&lt;URL&gt; &lt;name&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-color &lt;name&gt; [&lt;default&gt;]
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config get --type=color [--default=&lt;default&gt;] &lt;name&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--add &lt;name&gt; &lt;value&gt;
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config set --append &lt;name&gt; &lt;value&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unset &lt;name&gt; [&lt;value-pattern&gt;]
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config unset [--value=&lt;pattern&gt;] &lt;name&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unset-all &lt;name&gt; [&lt;value-pattern&gt;]
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config unset [--value=&lt;pattern&gt;] --all &lt;name&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--rename-section &lt;old-name&gt; &lt;new-name&gt;
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config rename-section &lt;old-name&gt; &lt;new-name&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--remove-section &lt;name&gt;
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config remove-section &lt;name&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-e
</term>
<term>
--edit
</term>
<listitem>
<simpara>
        Replaced by <emphasis>git config edit</emphasis>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-config(1)__configuration">
<title>CONFIGURATION</title>
<simpara><emphasis>pager.config</emphasis> is only respected when listing configuration, i.e., when
using <emphasis>list</emphasis> or <emphasis>get</emphasis> which may return multiple results. The default is to use
a pager.</simpara>
</simplesect>
<simplesect id="git-config(1)_FILES">
<title>FILES</title>
<simpara>By default, <emphasis>git config</emphasis> will read configuration options from multiple
files:</simpara>
<variablelist>
<varlistentry>
<term>
$(prefix)/etc/gitconfig
</term>
<listitem>
<simpara>
        System-wide configuration file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
$XDG_CONFIG_HOME/git/config
</term>
<term>
~/.gitconfig
</term>
<listitem>
<simpara>
        User-specific configuration files. When the XDG_CONFIG_HOME environment
        variable is not set or empty, $HOME/.config/ is used as
        $XDG_CONFIG_HOME.
</simpara>
<simpara>These are also called "global" configuration files. If both files exist, both
files are read in the order given above.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
$GIT_DIR/config
</term>
<listitem>
<simpara>
        Repository specific configuration file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
$GIT_DIR/config.worktree
</term>
<listitem>
<simpara>
        This is optional and is only searched when
        <emphasis>extensions.worktreeConfig</emphasis> is present in $GIT_DIR/config.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>You may also provide additional configuration parameters when running any
git command by using the <emphasis>-c</emphasis> option. See <xref linkend="git(1)" /> for details.</simpara>
<simpara>Options will be read from all of these files that are available. If the
global or the system-wide configuration files are missing or unreadable they
will be ignored. If the repository configuration file is missing or unreadable,
<emphasis>git config</emphasis> will exit with a non-zero error code. An error message is produced
if the file is unreadable, but not if it is missing.</simpara>
<simpara>The files are read in the order given above, with last value found taking
precedence over values read earlier.  When multiple values are taken then all
values of a key from all files will be used.</simpara>
<simpara>By default, options are only written to the repository specific
configuration file. Note that this also affects options like <emphasis>set</emphasis>
and <emphasis>unset</emphasis>. <emphasis role="strong"><emphasis>git config</emphasis> will only ever change one file at a time</emphasis>.</simpara>
<simpara>You can limit which configuration sources are read from or written to by
specifying the path of a file with the <emphasis>--file</emphasis> option, or by specifying a
configuration scope with <emphasis>--system</emphasis>, <emphasis>--global</emphasis>, <emphasis>--local</emphasis>, or <emphasis>--worktree</emphasis>.
For more, see <xref linkend="git-config(1)_OPTIONS"/> above.</simpara>
</simplesect>
<simplesect id="git-config(1)_SCOPES">
<title>SCOPES</title>
<simpara>Each configuration source falls within a configuration scope. The scopes
are:</simpara>
<variablelist>
<varlistentry>
<term>
system
</term>
<listitem>
<simpara>
        $(prefix)/etc/gitconfig
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
global
</term>
<listitem>
<simpara>
        $XDG_CONFIG_HOME/git/config
</simpara>
<simpara>~/.gitconfig</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
local
</term>
<listitem>
<simpara>
        $GIT_DIR/config
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
worktree
</term>
<listitem>
<simpara>
        $GIT_DIR/config.worktree
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
command
</term>
<listitem>
<simpara>
        GIT_CONFIG_{COUNT,KEY,VALUE} environment variables (see <xref linkend="git-config(1)_ENVIRONMENT"/>
        below)
</simpara>
<simpara>the <emphasis>-c</emphasis> option</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>With the exception of <emphasis>command</emphasis>, each scope corresponds to a command line
option: <emphasis>--system</emphasis>, <emphasis>--global</emphasis>, <emphasis>--local</emphasis>, <emphasis>--worktree</emphasis>.</simpara>
<simpara>When reading options, specifying a scope will only read options from the
files within that scope. When writing options, specifying a scope will write
to the files within that scope (instead of the repository specific
configuration file). See <xref linkend="git-config(1)_OPTIONS"/> above for a complete description.</simpara>
<simpara>Most configuration options are respected regardless of the scope it is
defined in, but some options are only respected in certain scopes. See the
respective option's documentation for the full details.</simpara>
<section id="git-config(1)__protected_configuration">
<title>Protected configuration</title>
<simpara>Protected configuration refers to the <emphasis>system</emphasis>, <emphasis>global</emphasis>, and <emphasis>command</emphasis> scopes.
For security reasons, certain options are only respected when they are
specified in protected configuration, and ignored otherwise.</simpara>
<simpara>Git treats these scopes as if they are controlled by the user or a trusted
administrator. This is because an attacker who controls these scopes can do
substantial harm without using Git, so it is assumed that the user's environment
protects these scopes against attackers.</simpara>
</section>
</simplesect>
<simplesect id="git-config(1)_ENVIRONMENT">
<title>ENVIRONMENT</title>
<variablelist>
<varlistentry>
<term>
GIT_CONFIG_GLOBAL
</term>
<term>
GIT_CONFIG_SYSTEM
</term>
<listitem>
<simpara>
        Take the configuration from the given files instead from global or
        system-level configuration. See <xref linkend="git(1)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
GIT_CONFIG_NOSYSTEM
</term>
<listitem>
<simpara>
        Whether to skip reading settings from the system-wide
        $(prefix)/etc/gitconfig file. See <xref linkend="git(1)" /> for details.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>See also <xref linkend="git-config(1)_FILES"/>.</simpara>
<variablelist>
<varlistentry>
<term>
GIT_CONFIG_COUNT
</term>
<term>
GIT_CONFIG_KEY_&lt;n&gt;
</term>
<term>
GIT_CONFIG_VALUE_&lt;n&gt;
</term>
<listitem>
<simpara>
        If GIT_CONFIG_COUNT is set to a positive number, all environment pairs
        GIT_CONFIG_KEY_&lt;n&gt; and GIT_CONFIG_VALUE_&lt;n&gt; up to that number will be
        added to the process's runtime configuration. The config pairs are
        zero-indexed. Any missing key or value is treated as an error. An empty
        GIT_CONFIG_COUNT is treated the same as GIT_CONFIG_COUNT=0, namely no
        pairs are processed. These environment variables will override values
        in configuration files, but will be overridden by any explicit options
        passed via <emphasis>git -c</emphasis>.
</simpara>
<simpara>This is useful for cases where you want to spawn multiple git commands
with a common configuration but cannot depend on a configuration file,
for example when writing scripts.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
GIT_CONFIG
</term>
<listitem>
<simpara>
        If no <emphasis>--file</emphasis> option is provided to <emphasis>git config</emphasis>, use the file
        given by <emphasis>GIT_CONFIG</emphasis> as if it were provided via <emphasis>--file</emphasis>. This
        variable has no effect on other Git commands, and is mostly for
        historical compatibility; there is generally no reason to use it
        instead of the <emphasis>--file</emphasis> option.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-config(1)_EXAMPLES">
<title>EXAMPLES</title>
<simpara>Given a .git/config like this:</simpara>
<screen>#
# This is the config file, and
# a '#' or ';' character indicates
# a comment
#

; core variables
[core]
        ; Don't trust file modes
        filemode = false

; Our diff algorithm
[diff]
        external = /usr/local/bin/diff-wrapper
        renames = true

; Proxy settings
[core]
        gitproxy=proxy-command for kernel.org
        gitproxy=default-proxy ; for all the rest

; HTTP
[http]
        sslVerify
[http "https://weak.example.com"]
        sslVerify = false
        cookieFile = /tmp/cookie.txt</screen>
<simpara>you can set the filemode to true with</simpara>
<screen>% git config set core.filemode true</screen>
<simpara>The hypothetical proxy command entries actually have a postfix to discern
what URL they apply to. Here is how to change the entry for kernel.org
to "ssh".</simpara>
<screen>% git config set --value='for kernel.org$' core.gitproxy '"ssh" for kernel.org'</screen>
<simpara>This makes sure that only the key/value pair for kernel.org is replaced.</simpara>
<simpara>To delete the entry for renames, do</simpara>
<screen>% git config unset diff.renames</screen>
<simpara>If you want to delete an entry for a multivar (like core.gitproxy above),
you have to provide a regex matching the value of exactly one line.</simpara>
<simpara>To query the value for a given key, do</simpara>
<screen>% git config get core.filemode</screen>
<simpara>or, to query a multivar:</simpara>
<screen>% git config get --value="for kernel.org$" core.gitproxy</screen>
<simpara>If you want to know all the values for a multivar, do:</simpara>
<screen>% git config get --all --show-names core.gitproxy</screen>
<simpara>If you like to live dangerously, you can replace <emphasis role="strong">all</emphasis> core.gitproxy by a
new one with</simpara>
<screen>% git config set --all core.gitproxy ssh</screen>
<simpara>However, if you really only want to replace the line for the default proxy,
i.e. the one without a "for &#8230;" postfix, do something like this:</simpara>
<screen>% git config set --value='! for ' core.gitproxy ssh</screen>
<simpara>To actually match only values with an exclamation mark, you have to</simpara>
<screen>% git config set --value='[!]' section.key value</screen>
<simpara>To add a new proxy, without altering any of the existing ones, use</simpara>
<screen>% git config set --append core.gitproxy '"proxy-command" for example.com'</screen>
<simpara>An example to use customized color from the configuration in your
script:</simpara>
<screen>#!/bin/sh
WS=$(git config get --type=color --default="blue reverse" color.diff.whitespace)
RESET=$(git config get --type=color --default="reset" "")
echo "${WS}your whitespace color or blue reverse${RESET}"</screen>
<simpara>For URLs in <emphasis>https://weak.example.com</emphasis>, <emphasis>http.sslVerify</emphasis> is set to
false, while it is set to <emphasis>true</emphasis> for all others:</simpara>
<screen>% git config get --type=bool --url=https://good.example.com http.sslverify
true
% git config get --type=bool --url=https://weak.example.com http.sslverify
false
% git config get --url=https://weak.example.com http
http.cookieFile /tmp/cookie.txt
http.sslverify false</screen>
</simplesect>
<simplesect id="git-config(1)__configuration_file">
<title>CONFIGURATION FILE</title>
<simpara>The Git configuration file contains a number of variables that affect
the Git commands' behavior. The files <emphasis>.git/config</emphasis> and optionally
<emphasis>config.worktree</emphasis> (see the "CONFIGURATION FILE" section of
<xref linkend="git-worktree(1)" />) in each repository are used to store the
configuration for that repository, and <emphasis>$HOME/.gitconfig</emphasis> is used to
store a per-user configuration as fallback values for the <emphasis>.git/config</emphasis>
file. The file <emphasis>/etc/gitconfig</emphasis> can be used to store a system-wide
default configuration.</simpara>
<simpara>The configuration variables are used by both the Git plumbing
and the porcelain commands. The variables are divided into sections, wherein
the fully qualified variable name of the variable itself is the last
dot-separated segment and the section name is everything before the last
dot. The variable names are case-insensitive, allow only alphanumeric
characters and <emphasis>-</emphasis>, and must start with an alphabetic character.  Some
variables may appear multiple times; we say then that the variable is
multivalued.</simpara>
<section id="git-config(1)__syntax">
<title>Syntax</title>
<simpara>The syntax is fairly flexible and permissive.  Whitespace characters,
which in this context are the space character (SP) and the horizontal
tabulation (HT), are mostly ignored.  The <emphasis>#</emphasis> and <emphasis>;</emphasis> characters begin
comments to the end of line.  Blank lines are ignored.</simpara>
<simpara>The file consists of sections and variables.  A section begins with
the name of the section in square brackets and continues until the next
section begins.  Section names are case-insensitive.  Only alphanumeric
characters, <emphasis>-</emphasis> and <emphasis>.</emphasis> are allowed in section names.  Each variable
must belong to some section, which means that there must be a section
header before the first setting of a variable.</simpara>
<simpara>Sections can be further divided into subsections.  To begin a subsection
put its name in double quotes, separated by space from the section name,
in the section header, like in the example below:</simpara>
<screen>        [section "subsection"]</screen>
<simpara>Subsection names are case sensitive and can contain any characters except
newline and the null byte. Doublequote <emphasis>"</emphasis> and backslash can be included
by escaping them as <emphasis>\"</emphasis> and <emphasis>\\</emphasis>, respectively. Backslashes preceding
other characters are dropped when reading; for example, <emphasis>\t</emphasis> is read as
<emphasis>t</emphasis> and <emphasis>\0</emphasis> is read as <emphasis>0</emphasis>. Section headers cannot span multiple lines.
Variables may belong directly to a section or to a given subsection. You
can have <emphasis>[section]</emphasis> if you have <emphasis>[section "subsection"]</emphasis>, but you don't
need to.</simpara>
<simpara>There is also a deprecated <emphasis>[section.subsection]</emphasis> syntax. With this
syntax, the subsection name is converted to lower-case and is also
compared case sensitively. These subsection names follow the same
restrictions as section names.</simpara>
<simpara>All the other lines (and the remainder of the line after the section
header) are recognized as setting variables, in the form
<emphasis>name = value</emphasis> (or just <emphasis>name</emphasis>, which is a short-hand to say that
the variable is the boolean "true").
The variable names are case-insensitive, allow only alphanumeric characters
and <emphasis>-</emphasis>, and must start with an alphabetic character.</simpara>
<simpara>Whitespace characters surrounding <emphasis>name</emphasis>, <emphasis>=</emphasis> and <emphasis>value</emphasis> are discarded.
Internal whitespace characters within <emphasis>value</emphasis> are retained verbatim.
Comments starting with either <emphasis>#</emphasis> or <emphasis>;</emphasis> and extending to the end of line
are discarded.  A line that defines a value can be continued to the next
line by ending it with a backslash (<emphasis>\</emphasis>);  the backslash and the end-of-line
characters are discarded.</simpara>
<simpara>If <emphasis>value</emphasis> needs to contain leading or trailing whitespace characters,
it must be enclosed in double quotation marks (<emphasis>"</emphasis>).  Inside double quotation
marks, double quote (<emphasis>"</emphasis>) and backslash (<emphasis>\</emphasis>) characters must be escaped:
use <emphasis>\"</emphasis> for <emphasis>"</emphasis> and <emphasis>\\</emphasis> for <emphasis>\</emphasis>.</simpara>
<simpara>The following escape sequences (beside <emphasis>\"</emphasis> and <emphasis>\\</emphasis>) are recognized:
<emphasis>\n</emphasis> for newline character (NL), <emphasis>\t</emphasis> for horizontal tabulation (HT, TAB)
and <emphasis>\b</emphasis> for backspace (BS).  Other char escape sequences (including octal
escape sequences) are invalid.</simpara>
</section>
<section id="git-config(1)__includes">
<title>Includes</title>
<simpara>The <emphasis>include</emphasis> and <emphasis>includeIf</emphasis> sections allow you to include config
directives from another source. These sections behave identically to
each other with the exception that <emphasis>includeIf</emphasis> sections may be ignored
if their condition does not evaluate to true; see "Conditional includes"
below.</simpara>
<simpara>You can include a config file from another by setting the special
<emphasis>include.path</emphasis> (or <emphasis>includeIf.*.path</emphasis>) variable to the name of the file
to be included. The variable takes a pathname as its value, and is
subject to tilde expansion. These variables can be given multiple times.</simpara>
<simpara>The contents of the included file are inserted immediately, as if they
had been found at the location of the include directive. If the value of the
variable is a relative path, the path is considered to
be relative to the configuration file in which the include directive
was found.  See below for examples.</simpara>
</section>
<section id="git-config(1)__conditional_includes">
<title>Conditional includes</title>
<simpara>You can conditionally include a config file from another by setting an
<emphasis>includeIf.&lt;condition&gt;.path</emphasis> variable to the name of the file to be
included.</simpara>
<simpara>The condition starts with a keyword followed by a colon and some data
whose format and meaning depends on the keyword. Supported keywords
are:</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>gitdir</emphasis>
</term>
<listitem>
<simpara>
        The data that follows the keyword <emphasis>gitdir:</emphasis> is used as a glob
        pattern. If the location of the .git directory matches the
        pattern, the include condition is met.
</simpara>
<simpara>The .git location may be auto-discovered, or come from <emphasis>$GIT_DIR</emphasis>
environment variable. If the repository is auto-discovered via a .git
file (e.g. from submodules, or a linked worktree), the .git location
would be the final location where the .git directory is, not where the
.git file is.</simpara>
<simpara>The pattern can contain standard globbing wildcards and two additional
ones, <emphasis>**/</emphasis> and <emphasis>/**</emphasis>, that can match multiple path components. Please
refer to <xref linkend="gitignore(5)" /> for details. For convenience:</simpara>
<itemizedlist>
<listitem>
<simpara>
If the pattern starts with <emphasis>~/</emphasis>, <emphasis>~</emphasis> will be substituted with the
   content of the environment variable <emphasis>HOME</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
If the pattern starts with <emphasis>./</emphasis>, it is replaced with the directory
   containing the current config file.
</simpara>
</listitem>
<listitem>
<simpara>
If the pattern does not start with either <emphasis>~/</emphasis>, <emphasis>./</emphasis> or <emphasis>/</emphasis>, <emphasis>**/</emphasis>
   will be automatically prepended. For example, the pattern <emphasis>foo/bar</emphasis>
   becomes <emphasis>**/foo/bar</emphasis> and would match <emphasis>/any/path/to/foo/bar</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
If the pattern ends with <emphasis>/</emphasis>, <emphasis>**</emphasis> will be automatically added. For
   example, the pattern <emphasis>foo/</emphasis> becomes <emphasis>foo/**</emphasis>. In other words, it
   matches "foo" and everything inside, recursively.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>gitdir/i</emphasis>
</term>
<listitem>
<simpara>
        This is the same as <emphasis>gitdir</emphasis> except that matching is done
        case-insensitively (e.g. on case-insensitive file systems)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>onbranch</emphasis>
</term>
<listitem>
<simpara>
        The data that follows the keyword <emphasis>onbranch:</emphasis> is taken to be a
        pattern with standard globbing wildcards and two additional
        ones, <emphasis>**/</emphasis> and <emphasis>/**</emphasis>, that can match multiple path components.
        If we are in a worktree where the name of the branch that is
        currently checked out matches the pattern, the include condition
        is met.
</simpara>
<simpara>If the pattern ends with <emphasis>/</emphasis>, <emphasis>**</emphasis> will be automatically added. For
example, the pattern <emphasis>foo/</emphasis> becomes <emphasis>foo/**</emphasis>. In other words, it matches
all branches that begin with <emphasis>foo/</emphasis>. This is useful if your branches are
organized hierarchically and you would like to apply a configuration to
all the branches in that hierarchy.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>hasconfig:remote.*.url:</emphasis>
</term>
<listitem>
<simpara>
        The data that follows this keyword is taken to
        be a pattern with standard globbing wildcards and two
        additional ones, <emphasis>**/</emphasis> and <emphasis>/**</emphasis>, that can match multiple
        components. The first time this keyword is seen, the rest of
        the config files will be scanned for remote URLs (without
        applying any values). If there exists at least one remote URL
        that matches this pattern, the include condition is met.
</simpara>
<simpara>Files included by this option (directly or indirectly) are not allowed
to contain remote URLs.</simpara>
<simpara>Note that unlike other includeIf conditions, resolving this condition
relies on information that is not yet known at the point of reading the
condition. A typical use case is this option being present as a
system-level or global-level config, and the remote URL being in a
local-level config; hence the need to scan ahead when resolving this
condition. In order to avoid the chicken-and-egg problem in which
potentially-included files can affect whether such files are potentially
included, Git breaks the cycle by prohibiting these files from affecting
the resolution of these conditions (thus, prohibiting them from
declaring remote URLs).</simpara>
<simpara>As for the naming of this keyword, it is for forwards compatibility with
a naming scheme that supports more variable-based include conditions,
but currently Git only supports the exact keyword described above.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>A few more notes on matching via <emphasis>gitdir</emphasis> and <emphasis>gitdir/i</emphasis>:</simpara>
<itemizedlist>
<listitem>
<simpara>
Symlinks in <emphasis>$GIT_DIR</emphasis> are not resolved before matching.
</simpara>
</listitem>
<listitem>
<simpara>
Both the symlink &amp; realpath versions of paths will be matched
   outside of <emphasis>$GIT_DIR</emphasis>. E.g. if ~/git is a symlink to
   /mnt/storage/git, both <emphasis>gitdir:~/git</emphasis> and <emphasis>gitdir:/mnt/storage/git</emphasis>
   will match.
</simpara>
<simpara>This was not the case in the initial release of this feature in
v2.13.0, which only matched the realpath version. Configuration that
wants to be compatible with the initial release of this feature needs
to either specify only the realpath version, or both versions.</simpara>
</listitem>
<listitem>
<simpara>
Note that "../" is not special and will match literally, which is
   unlikely what you want.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="git-config(1)__example">
<title>Example</title>
<screen># Core variables
[core]
        ; Don't trust file modes
        filemode = false

# Our diff algorithm
[diff]
        external = /usr/local/bin/diff-wrapper
        renames = true

[branch "devel"]
        remote = origin
        merge = refs/heads/devel

# Proxy settings
[core]
        gitProxy="ssh" for "kernel.org"
        gitProxy=default-proxy ; for the rest

[include]
        path = /path/to/foo.inc ; include by absolute path
        path = foo.inc ; find "foo.inc" relative to the current file
        path = ~/foo.inc ; find "foo.inc" in your `$HOME` directory

; include if $GIT_DIR is /path/to/foo/.git
[includeIf "gitdir:/path/to/foo/.git"]
        path = /path/to/foo.inc

; include for all repositories inside /path/to/group
[includeIf "gitdir:/path/to/group/"]
        path = /path/to/foo.inc

; include for all repositories inside $HOME/to/group
[includeIf "gitdir:~/to/group/"]
        path = /path/to/foo.inc

; relative paths are always relative to the including
; file (if the condition is true); their location is not
; affected by the condition
[includeIf "gitdir:/path/to/group/"]
        path = foo.inc

; include only if we are in a worktree where foo-branch is
; currently checked out
[includeIf "onbranch:foo-branch"]
        path = foo.inc

; include only if a remote with the given URL exists (note
; that such a URL may be provided later in a file or in a
; file read after this file is read, as seen in this example)
[includeIf "hasconfig:remote.*.url:https://example.com/**"]
        path = foo.inc
[remote "origin"]
        url = https://example.com/git</screen>
</section>
<section id="git-config(1)__values">
<title>Values</title>
<simpara>Values of many variables are treated as a simple string, but there
are variables that take values of specific types and there are rules
as to how to spell them.</simpara>
<variablelist>
<varlistentry>
<term>
boolean
</term>
<listitem>
<simpara>
       When a variable is said to take a boolean value, many
       synonyms are accepted for <emphasis>true</emphasis> and <emphasis>false</emphasis>; these are all
       case-insensitive.
</simpara>
<variablelist>
<varlistentry>
<term>
true
</term>
<listitem>
<simpara>
Boolean true literals are <emphasis>yes</emphasis>, <emphasis>on</emphasis>, <emphasis>true</emphasis>,
                and <emphasis>1</emphasis>.  Also, a variable defined without <emphasis>= &lt;value&gt;</emphasis>
                is taken as true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
false
</term>
<listitem>
<simpara>
Boolean false literals are <emphasis>no</emphasis>, <emphasis>off</emphasis>, <emphasis>false</emphasis>,
                <emphasis>0</emphasis> and the empty string.
</simpara>
<simpara>When converting a value to its canonical form using the <emphasis>--type=bool</emphasis> type
specifier, <emphasis>git config</emphasis> will ensure that the output is "true" or
"false" (spelled in lowercase).</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
integer
</term>
<listitem>
<simpara>
       The value for many variables that specify various sizes can
       be suffixed with <emphasis>k</emphasis>, <emphasis>M</emphasis>,&#8230; to mean "scale the number by
       1024", "by 1024x1024", etc.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color
</term>
<listitem>
<simpara>
       The value for a variable that takes a color is a list of
       colors (at most two, one for foreground and one for background)
       and attributes (as many as you want), separated by spaces.
</simpara>
<simpara>The basic colors accepted are <emphasis>normal</emphasis>, <emphasis>black</emphasis>, <emphasis>red</emphasis>, <emphasis>green</emphasis>,
<emphasis>yellow</emphasis>, <emphasis>blue</emphasis>, <emphasis>magenta</emphasis>, <emphasis>cyan</emphasis>, <emphasis>white</emphasis> and <emphasis>default</emphasis>.  The first
color given is the foreground; the second is the background.  All the
basic colors except <emphasis>normal</emphasis> and <emphasis>default</emphasis> have a bright variant that can
be specified by prefixing the color with <emphasis>bright</emphasis>, like <emphasis>brightred</emphasis>.</simpara>
<simpara>The color <emphasis>normal</emphasis> makes no change to the color. It is the same as an
empty string, but can be used as the foreground color when specifying a
background color alone (for example, "normal red").</simpara>
<simpara>The color <emphasis>default</emphasis> explicitly resets the color to the terminal default,
for example to specify a cleared background. Although it varies between
terminals, this is usually not the same as setting to "white black".</simpara>
<simpara>Colors may also be given as numbers between 0 and 255; these use ANSI
256-color mode (but note that not all terminals may support this).  If
your terminal supports it, you may also specify 24-bit RGB values as
hex, like <emphasis>#ff0ab3</emphasis>, or 12-bit RGB values like <emphasis>#f1b</emphasis>, which is
equivalent to the 24-bit color <emphasis>#ff11bb</emphasis>.</simpara>
<simpara>The accepted attributes are <emphasis>bold</emphasis>, <emphasis>dim</emphasis>, <emphasis>ul</emphasis>, <emphasis>blink</emphasis>, <emphasis>reverse</emphasis>,
<emphasis>italic</emphasis>, and <emphasis>strike</emphasis> (for crossed-out or "strikethrough" letters).
The position of any attributes with respect to the colors
(before, after, or in between), doesn't matter. Specific attributes may
be turned off by prefixing them with <emphasis>no</emphasis> or <emphasis>no-</emphasis> (e.g., <emphasis>noreverse</emphasis>,
<emphasis>no-ul</emphasis>, etc).</simpara>
<simpara>The pseudo-attribute <emphasis>reset</emphasis> resets all colors and attributes before
applying the specified coloring. For example, <emphasis>reset green</emphasis> will result
in a green foreground and default background without any active
attributes.</simpara>
<simpara>An empty color string produces no color effect at all. This can be used
to avoid coloring specific elements without disabling color entirely.</simpara>
<simpara>For git's pre-defined color slots, the attributes are meant to be reset
at the beginning of each item in the colored output. So setting
<emphasis>color.decorate.branch</emphasis> to <emphasis>black</emphasis> will paint that branch name in a
plain <emphasis>black</emphasis>, even if the previous thing on the same output line (e.g.
opening parenthesis before the list of branch names in <emphasis>log --decorate</emphasis>
output) is set to be painted with <emphasis>bold</emphasis> or some other attribute.
However, custom log formats may do more complicated and layered
coloring, and the negated forms may be useful there.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pathname
</term>
<listitem>
<simpara>
        A variable that takes a pathname value can be given a
        string that begins with "<emphasis>~/</emphasis>" or "<emphasis>~user/</emphasis>", and the usual
        tilde expansion happens to such a string: <emphasis>~/</emphasis>
        is expanded to the value of <emphasis>$HOME</emphasis>, and <emphasis>~user/</emphasis> to the
        specified user's home directory.
</simpara>
<simpara>If a path starts with <emphasis>%(prefix)/</emphasis>, the remainder is interpreted as a
path relative to Git's "runtime prefix", i.e. relative to the location
where Git itself was installed. For example, <emphasis>%(prefix)/bin/</emphasis> refers to
the directory in which the Git executable itself lives. If Git was
compiled without runtime prefix support, the compiled-in prefix will be
substituted instead. In the unlikely event that a literal path needs to
be specified that should <emphasis>not</emphasis> be expanded, it needs to be prefixed by
<emphasis>./</emphasis>, like so: <emphasis>./%(prefix)/bin</emphasis>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="git-config(1)__variables">
<title>Variables</title>
<simpara>Note that this list is non-comprehensive and not necessarily complete.
For command-specific variables, you will find a more detailed description
in the appropriate manual page.</simpara>
<simpara>Other git-related tools may and do use their own variables.  When
inventing new variables for use in your own tool, make sure their
names do not conflict with those that are used by Git itself and
other popular tools, and describe them in your documentation.</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>add.ignoreErrors</emphasis>
</term>
<term>
<emphasis>add.ignore-errors</emphasis> (deprecated)
</term>
<listitem>
<simpara>
        Tells <emphasis>git add</emphasis> to continue adding files when some files cannot be
        added due to indexing errors.
        Equivalent to the <emphasis>--ignore-errors</emphasis> option of <xref linkend="git-add(1)" />.
        <emphasis>add.ignore-errors</emphasis> is deprecated, as it does not follow the usual
        naming convention for configuration variables.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
advice.*
</term>
<listitem>
<simpara>
        These variables control various optional help messages designed to
        aid new users.  When left unconfigured, Git will give the message
        alongside instructions on how to squelch it.  You can tell Git
        that you have understood the issue and no longer need a specific
        help message by setting the corresponding variable to <emphasis>false</emphasis>.
</simpara>
<simpara>As they are intended to help human users, these messages are output to
the standard error. When tools that run Git as a subprocess find them
disruptive, they can set <emphasis>GIT_ADVICE=0</emphasis> in the environment to squelch
all advice messages.</simpara>
<variablelist>
<varlistentry>
<term>
addEmbeddedRepo
</term>
<listitem>
<simpara>
                Shown when the user accidentally adds one
                git repo inside of another.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
addEmptyPathspec
</term>
<listitem>
<simpara>
                Shown when the user runs <emphasis>git add</emphasis> without providing
                the pathspec parameter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
addIgnoredFile
</term>
<listitem>
<simpara>
                Shown when the user attempts to add an ignored file to
                the index.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
amWorkDir
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-am(1)" /> fails to apply a patch
                file, to tell the user the location of the file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
ambiguousFetchRefspec
</term>
<listitem>
<simpara>
                Shown when a fetch refspec for multiple remotes maps to
                the same remote-tracking branch namespace and causes branch
                tracking set-up to fail.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
checkoutAmbiguousRemoteBranchName
</term>
<listitem>
<simpara>
                Shown when the argument to
                <xref linkend="git-checkout(1)" /> and <xref linkend="git-switch(1)" />
                ambiguously resolves to a
                remote tracking branch on more than one remote in
                situations where an unambiguous argument would have
                otherwise caused a remote-tracking branch to be
                checked out. See the <emphasis>checkout.defaultRemote</emphasis>
                configuration variable for how to set a given remote
                to be used by default in some situations where this
                advice would be printed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commitBeforeMerge
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-merge(1)" /> refuses to
                merge to avoid overwriting local changes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
detachedHead
</term>
<listitem>
<simpara>
                Shown when the user uses
                <xref linkend="git-switch(1)" /> or <xref linkend="git-checkout(1)" />
                to move to the detached HEAD state, to tell the user how
                to create a local branch after the fact.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diverging
</term>
<listitem>
<simpara>
                Shown when a fast-forward is not possible.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetchShowForcedUpdates
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-fetch(1)" /> takes a long time
                to calculate forced updates after ref updates, or to warn
                that the check is disabled.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
forceDeleteBranch
</term>
<listitem>
<simpara>
                Shown when the user tries to delete a not fully merged
                branch without the force option set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
ignoredHook
</term>
<listitem>
<simpara>
                Shown when a hook is ignored because the hook is not
                set as executable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
implicitIdentity
</term>
<listitem>
<simpara>
                Shown when the user's information is guessed from the
                system username and domain name, to tell the user how to
                set their identity configuration.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergeConflict
</term>
<listitem>
<simpara>
                Shown when various commands stop because of conflicts.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
nestedTag
</term>
<listitem>
<simpara>
                Shown when a user attempts to recursively tag a tag object.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushAlreadyExists
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-push(1)" /> rejects an update that
                does not qualify for fast-forwarding (e.g., a tag.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushFetchFirst
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-push(1)" /> rejects an update that
                tries to overwrite a remote ref that points at an
                object we do not have.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushNeedsForce
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-push(1)" /> rejects an update that
                tries to overwrite a remote ref that points at an
                object that is not a commit-ish, or make the remote
                ref point at an object that is not a commit-ish.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushNonFFCurrent
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-push(1)" /> fails due to a
                non-fast-forward update to the current branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushNonFFMatching
</term>
<listitem>
<simpara>
                Shown when the user ran <xref linkend="git-push(1)" /> and pushed
                "matching refs" explicitly (i.e. used <emphasis>:</emphasis>, or
                specified a refspec that isn't the current branch) and
                it resulted in a non-fast-forward error.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushRefNeedsUpdate
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-push(1)" /> rejects a forced update of
                a branch when its remote-tracking ref has updates that we
                do not have locally.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushUnqualifiedRefname
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-push(1)" /> gives up trying to
                guess based on the source and destination refs what
                remote ref namespace the source belongs in, but where
                we can still suggest that the user push to either
                <emphasis>refs/heads/*</emphasis> or <emphasis>refs/tags/*</emphasis> based on the type of the
                source object.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushUpdateRejected
</term>
<listitem>
<simpara>
                Set this variable to <emphasis>false</emphasis> if you want to disable
                <emphasis>pushNonFFCurrent</emphasis>, <emphasis>pushNonFFMatching</emphasis>, <emphasis>pushAlreadyExists</emphasis>,
                <emphasis>pushFetchFirst</emphasis>, <emphasis>pushNeedsForce</emphasis>, and <emphasis>pushRefNeedsUpdate</emphasis>
                simultaneously.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebaseTodoError
</term>
<listitem>
<simpara>
                Shown when there is an error after editing the rebase todo list.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
refSyntax
</term>
<listitem>
<simpara>
                Shown when the user provides an illegal ref name, to
                tell the user about the ref syntax documentation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
resetNoRefresh
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-reset(1)" /> takes more than 2
                seconds to refresh the index after reset, to tell the user
                that they can use the <emphasis>--no-refresh</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
resolveConflict
</term>
<listitem>
<simpara>
                Shown by various commands when conflicts
                prevent the operation from being performed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rmHints
</term>
<listitem>
<simpara>
                Shown on failure in the output of <xref linkend="git-rm(1)" />, to
                give directions on how to proceed from the current state.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sequencerInUse
</term>
<listitem>
<simpara>
                Shown when a sequencer command is already in progress.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
skippedCherryPicks
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-rebase(1)" /> skips a commit that has already
                been cherry-picked onto the upstream branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sparseIndexExpanded
</term>
<listitem>
<simpara>
                Shown when a sparse index is expanded to a full index, which is likely
                due to an unexpected set of files existing outside of the
                sparse-checkout.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
statusAheadBehind
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-status(1)" /> computes the ahead/behind
                counts for a local ref compared to its remote tracking ref,
                and that calculation takes longer than expected. Will not
                appear if <emphasis>status.aheadBehind</emphasis> is false or the option
                <emphasis>--no-ahead-behind</emphasis> is given.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
statusHints
</term>
<listitem>
<simpara>
                Show directions on how to proceed from the current
                state in the output of <xref linkend="git-status(1)" />, in
                the template shown when writing commit messages in
                <xref linkend="git-commit(1)" />, and in the help message shown
                by <xref linkend="git-switch(1)" /> or
                <xref linkend="git-checkout(1)" /> when switching branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
statusUoption
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-status(1)" /> takes more than 2
                seconds to enumerate untracked files, to tell the user that
                they can use the <emphasis>-u</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submoduleAlternateErrorStrategyDie
</term>
<listitem>
<simpara>
                Shown when a submodule.alternateErrorStrategy option
                configured to "die" causes a fatal error.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submoduleMergeConflict
</term>
<listitem>
<simpara>
                Advice shown when a non-trivial submodule merge conflict is
                encountered.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodulesNotUpdated
</term>
<listitem>
<simpara>
                Shown when a user runs a submodule command that fails
                because <emphasis>git submodule update --init</emphasis> was not run.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
suggestDetachingHead
</term>
<listitem>
<simpara>
                Shown when <xref linkend="git-switch(1)" /> refuses to detach HEAD
                without the explicit <emphasis>--detach</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
updateSparsePath
</term>
<listitem>
<simpara>
                Shown when either <xref linkend="git-add(1)" /> or <xref linkend="git-rm(1)" />
                is asked to update index entries outside the current sparse
                checkout.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
waitingForEditor
</term>
<listitem>
<simpara>
                Shown when Git is waiting for editor input. Relevant
                when e.g. the editor is not launched inside the terminal.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
worktreeAddOrphan
</term>
<listitem>
<simpara>
                Shown when the user tries to create a worktree from an
                invalid reference, to tell the user how to create a new unborn
                branch instead.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
alias.*
</term>
<listitem>
<simpara>
        Command aliases for the <xref linkend="git(1)" /> command wrapper - e.g.
        after defining <emphasis>alias.last = cat-file commit HEAD</emphasis>, the invocation
        <emphasis>git last</emphasis> is equivalent to <emphasis>git cat-file commit HEAD</emphasis>. To avoid
        confusion and troubles with script usage, aliases that
        hide existing Git commands are ignored. Arguments are split by
        spaces, the usual shell quoting and escaping are supported.
        A quote pair or a backslash can be used to quote them.
</simpara>
<simpara>Note that the first word of an alias does not necessarily have to be a
command. It can be a command-line option that will be passed into the
invocation of <emphasis>git</emphasis>. In particular, this is useful when used with <emphasis>-c</emphasis>
to pass in one-time configurations or <emphasis>-p</emphasis> to force pagination. For example,
<emphasis>loud-rebase = -c commit.verbose=true rebase</emphasis> can be defined such that
running <emphasis>git loud-rebase</emphasis> would be equivalent to
<emphasis>git -c commit.verbose=true rebase</emphasis>. Also, <emphasis>ps = -p status</emphasis> would be a
helpful alias since <emphasis>git ps</emphasis> would paginate the output of <emphasis>git status</emphasis>
where the original command does not.</simpara>
<simpara>If the alias expansion is prefixed with an exclamation point,
it will be treated as a shell command.  For example, defining
<emphasis>alias.new = !gitk --all --not ORIG_HEAD</emphasis>, the invocation
<emphasis>git new</emphasis> is equivalent to running the shell command
<emphasis>gitk --all --not ORIG_HEAD</emphasis>.  Note:</simpara>
<itemizedlist>
<listitem>
<simpara>
Shell commands will be executed from the top-level directory of a
  repository, which may not necessarily be the current directory.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>GIT_PREFIX</emphasis> is set as returned by running <emphasis>git rev-parse --show-prefix</emphasis>
  from the original current directory. See <xref linkend="git-rev-parse(1)" />.
</simpara>
</listitem>
<listitem>
<simpara>
Shell command aliases always receive any extra arguments provided to
  the Git command-line as positional arguments.
</simpara>
<itemizedlist>
<listitem>
<simpara>
Care should be taken if your shell alias is a "one-liner" script
   with multiple commands (e.g. in a pipeline), references multiple
   arguments, or is otherwise not able to handle positional arguments
   added at the end.  For example: <emphasis>alias.cmd = "!echo $1 | grep $2"</emphasis>
   called as <emphasis>git cmd 1 2</emphasis> will be executed as <emphasis>echo $1 | grep $2
   1 2</emphasis>, which is not what you want.
</simpara>
</listitem>
<listitem>
<simpara>
A convenient way to deal with this is to write your script
   operations in an inline function that is then called with any
   arguments from the command-line.  For example `alias.cmd = "!c() {
   echo $1 | grep $2 ; }; c" will correctly execute the prior example.
</simpara>
</listitem>
<listitem>
<simpara>
Setting <emphasis>GIT_TRACE=1</emphasis> can help you debug the command being run for
   your alias.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
am.keepcr
</term>
<listitem>
<simpara>
        If true, git-am will call git-mailsplit for patches in mbox format
        with parameter <emphasis>--keep-cr</emphasis>. In this case git-mailsplit will
        not remove <emphasis>\r</emphasis> from lines ending with <emphasis>\r\n</emphasis>. Can be overridden
        by giving <emphasis>--no-keep-cr</emphasis> from the command line.
        See <xref linkend="git-am(1)" />, <xref linkend="git-mailsplit(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
am.threeWay
</term>
<listitem>
<simpara>
        By default, <emphasis>git am</emphasis> will fail if the patch does not apply cleanly. When
        set to true, this setting tells <emphasis>git am</emphasis> to fall back on 3-way merge if
        the patch records the identity of blobs it is supposed to apply to and
        we have those blobs available locally (equivalent to giving the <emphasis>--3way</emphasis>
        option from the command line). Defaults to <emphasis>false</emphasis>.
        See <xref linkend="git-am(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
apply.ignoreWhitespace
</term>
<listitem>
<simpara>
        When set to <emphasis>change</emphasis>, tells <emphasis>git apply</emphasis> to ignore changes in
        whitespace, in the same way as the <emphasis>--ignore-space-change</emphasis>
        option.
        When set to one of: no, none, never, false, it tells <emphasis>git apply</emphasis> to
        respect all whitespace differences.
        See <xref linkend="git-apply(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
apply.whitespace
</term>
<listitem>
<simpara>
        Tells <emphasis>git apply</emphasis> how to handle whitespace, in the same way
        as the <emphasis>--whitespace</emphasis> option. See <xref linkend="git-apply(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
attr.tree
</term>
<listitem>
<simpara>
        A reference to a tree in the repository from which to read attributes,
        instead of the <emphasis>.gitattributes</emphasis> file in the working tree. If the value
        does not resolve to a valid tree object, an empty tree is used instead.
        When the <emphasis>GIT_ATTR_SOURCE</emphasis> environment variable or <emphasis>--attr-source</emphasis>
        command line option are used, this configuration variable has no effect.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<note><simpara>The configuration options in <emphasis>bitmapPseudoMerge.*</emphasis> are considered
EXPERIMENTAL and may be subject to change or be removed entirely in the
future. For more information about the pseudo-merge bitmap feature, see
the "Pseudo-merge bitmaps" section of <xref linkend="gitpacking(7)" />.</simpara></note>
<variablelist>
<varlistentry>
<term>
bitmapPseudoMerge.&lt;name&gt;.pattern
</term>
<listitem>
<simpara>
        Regular expression used to match reference names. Commits
        pointed to by references matching this pattern (and meeting
        the below criteria, like <emphasis>bitmapPseudoMerge.&lt;name&gt;.sampleRate</emphasis>
        and <emphasis>bitmapPseudoMerge.&lt;name&gt;.threshold</emphasis>) will be considered
        for inclusion in a pseudo-merge bitmap.
</simpara>
<simpara>Commits are grouped into pseudo-merge groups based on whether or not
any reference(s) that point at a given commit match the pattern, which
is an extended regular expression.</simpara>
<simpara>Within a pseudo-merge group, commits may be further grouped into
sub-groups based on the capture groups in the pattern. These
sub-groupings are formed from the regular expressions by concatenating
any capture groups from the regular expression, with a <emphasis>-</emphasis> dash in
between.</simpara>
<simpara>For example, if the pattern is <emphasis>refs/tags/</emphasis>, then all tags (provided
they meet the below criteria) will be considered candidates for the
same pseudo-merge group. However, if the pattern is instead
<emphasis>refs/remotes/([0-9])+/tags/</emphasis>, then tags from different remotes will
be grouped into separate pseudo-merge groups, based on the remote
number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bitmapPseudoMerge.&lt;name&gt;.decay
</term>
<listitem>
<simpara>
        Determines the rate at which consecutive pseudo-merge bitmap
        groups decrease in size. Must be non-negative. This parameter
        can be thought of as <emphasis>k</emphasis> in the function <emphasis>f(n) = C * n^-k</emphasis>,
        where <emphasis>f(n)</emphasis> is the size of the `n`th group.
</simpara>
<simpara>Setting the decay rate equal to <emphasis>0</emphasis> will cause all groups to be the
same size. Setting the decay rate equal to <emphasis>1</emphasis> will cause the <emphasis>n`th
group to be `1/n</emphasis> the size of the initial group.  Higher values of the
decay rate cause consecutive groups to shrink at an increasing rate.
The default is <emphasis>1</emphasis>.</simpara>
<simpara>If all groups are the same size, it is possible that groups containing
newer commits will be able to be used less often than earlier groups,
since it is more likely that the references pointing at newer commits
will be updated more often than a reference pointing at an old commit.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bitmapPseudoMerge.&lt;name&gt;.sampleRate
</term>
<listitem>
<simpara>
        Determines the proportion of non-bitmapped commits (among
        reference tips) which are selected for inclusion in an
        unstable pseudo-merge bitmap. Must be between <emphasis>0</emphasis> and <emphasis>1</emphasis>
        (inclusive). The default is <emphasis>1</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bitmapPseudoMerge.&lt;name&gt;.threshold
</term>
<listitem>
<simpara>
        Determines the minimum age of non-bitmapped commits (among
        reference tips, as above) which are candidates for inclusion
        in an unstable pseudo-merge bitmap. The default is
        <emphasis>1.week.ago</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bitmapPseudoMerge.&lt;name&gt;.maxMerges
</term>
<listitem>
<simpara>
        Determines the maximum number of pseudo-merge commits among
        which commits may be distributed.
</simpara>
<simpara>For pseudo-merge groups whose pattern does not contain any capture
groups, this setting is applied for all commits matching the regular
expression. For patterns that have one or more capture groups, this
setting is applied for each distinct capture group.</simpara>
<simpara>For example, if your capture group is <emphasis>refs/tags/</emphasis>, then this setting
will distribute all tags into a maximum of <emphasis>maxMerges</emphasis> pseudo-merge
commits. However, if your capture group is, say,
<emphasis>refs/remotes/([0-9]+)/tags/</emphasis>, then this setting will be applied to
each remote's set of tags individually.</simpara>
<simpara>Must be non-negative. The default value is 64.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bitmapPseudoMerge.&lt;name&gt;.stableThreshold
</term>
<listitem>
<simpara>
        Determines the minimum age of commits (among reference tips,
        as above, however stable commits are still considered
        candidates even when they have been covered by a bitmap) which
        are candidates for a stable a pseudo-merge bitmap. The default
        is <emphasis>1.month.ago</emphasis>.
</simpara>
<simpara>Setting this threshold to a smaller value (e.g., 1.week.ago) will cause
more stable groups to be generated (which impose a one-time generation
cost) but those groups will likely become stale over time. Using a
larger value incurs the opposite penalty (fewer stable groups which are
more useful).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bitmapPseudoMerge.&lt;name&gt;.stableSize
</term>
<listitem>
<simpara>
        Determines the size (in number of commits) of a stable
        psuedo-merge bitmap. The default is <emphasis>512</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.blankBoundary
</term>
<listitem>
<simpara>
        Show blank commit object name for boundary commits in
        <xref linkend="git-blame(1)" />. This option defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.coloring
</term>
<listitem>
<simpara>
        This determines the coloring scheme to be applied to blame
        output. It can be <emphasis>repeatedLines</emphasis>, <emphasis>highlightRecent</emphasis>,
        or <emphasis>none</emphasis> which is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.date
</term>
<listitem>
<simpara>
        Specifies the format used to output dates in <xref linkend="git-blame(1)" />.
        If unset the iso format is used. For supported values,
        see the discussion of the <emphasis>--date</emphasis> option at <xref linkend="git-log(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.showEmail
</term>
<listitem>
<simpara>
        Show the author email instead of author name in <xref linkend="git-blame(1)" />.
        This option defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.showRoot
</term>
<listitem>
<simpara>
        Do not treat root commits as boundaries in <xref linkend="git-blame(1)" />.
        This option defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.ignoreRevsFile
</term>
<listitem>
<simpara>
        Ignore revisions listed in the file, one unabbreviated object name per
        line, in <xref linkend="git-blame(1)" />.  Whitespace and comments beginning with
        <emphasis>#</emphasis> are ignored.  This option may be repeated multiple times.  Empty
        file names will reset the list of ignored revisions.  This option will
        be handled before the command line option <emphasis>--ignore-revs-file</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.markUnblamableLines
</term>
<listitem>
<simpara>
        Mark lines that were changed by an ignored revision that we could not
        attribute to another commit with a <emphasis>*</emphasis> in the output of
        <xref linkend="git-blame(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.markIgnoredLines
</term>
<listitem>
<simpara>
        Mark lines that were changed by an ignored revision that we attributed to
        another commit with a <emphasis>?</emphasis> in the output of <xref linkend="git-blame(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>branch.autoSetupMerge</emphasis>
</term>
<listitem>
<simpara>
        Tells <emphasis>git branch</emphasis>, <emphasis>git switch</emphasis> and <emphasis>git checkout</emphasis> to set up new branches
        so that <xref linkend="git-pull(1)" /> will appropriately merge from the
        starting point branch. Note that even if this option is not set,
        this behavior can be chosen per-branch using the <emphasis>--track</emphasis>
        and <emphasis>--no-track</emphasis> options.  This option defaults to <emphasis>true</emphasis>. The valid settings
        are:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>false</emphasis>
</term>
<listitem>
<simpara>
no automatic setup is done
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>true</emphasis>
</term>
<listitem>
<simpara>
automatic setup is done when the starting point is a remote-tracking branch
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>always</emphasis>
</term>
<listitem>
<simpara>
automatic setup is done when the starting point is either a
        local branch or remote-tracking branch
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>inherit</emphasis>
</term>
<listitem>
<simpara>
if the starting point has a tracking configuration, it is copied to the new
        branch
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>simple</emphasis>
</term>
<listitem>
<simpara>
automatic setup is done only when the starting point
        is a remote-tracking branch and the new branch has the same name as the
        remote branch.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>branch.autoSetupRebase</emphasis>
</term>
<listitem>
<simpara>
        When a new branch is created with <emphasis>git branch</emphasis>, <emphasis>git switch</emphasis> or <emphasis>git checkout</emphasis>
        that tracks another branch, this variable tells Git to set
        up pull to rebase instead of merge (see <emphasis>branch.&lt;name&gt;.rebase</emphasis>).
        The valid settings are:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>never</emphasis>
</term>
<listitem>
<simpara>
rebase is never automatically set to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>local</emphasis>
</term>
<listitem>
<simpara>
rebase is set to true for tracked branches of other local branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>remote</emphasis>
</term>
<listitem>
<simpara>
rebase is set to true for tracked branches of remote-tracking branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>always</emphasis>
</term>
<listitem>
<simpara>
rebase will be set to true for all tracking branches.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>See <emphasis>branch.autoSetupMerge</emphasis> for details on how to set up a branch to track another branch.
This option defaults to <emphasis>never</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>branch.sort</emphasis>
</term>
<listitem>
<simpara>
        This variable controls the sort ordering of branches when displayed by
        <xref linkend="git-branch(1)" />. Without the <emphasis>--sort=&lt;value&gt;</emphasis> option provided, the
        value of this variable will be used as the default.
        See <xref linkend="git-for-each-ref(1)" /> field names for valid values.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>branch.&lt;name&gt;.remote</emphasis>
</term>
<listitem>
<simpara>
        When on branch <emphasis>&lt;name&gt;</emphasis>, it tells <emphasis>git fetch</emphasis> and <emphasis>git push</emphasis>
        which remote to fetch from or push to.  The remote to push to
        may be overridden with <emphasis>remote.pushDefault</emphasis> (for all branches).
        The remote to push to, for the current branch, may be further
        overridden by <emphasis>branch.&lt;name&gt;.pushRemote</emphasis>.  If no remote is
        configured, or if you are not on any branch and there is more than
        one remote defined in the repository, it defaults to <emphasis>origin</emphasis> for
        fetching and <emphasis>remote.pushDefault</emphasis> for pushing.
        Additionally, <emphasis>.</emphasis> (a period) is the current local repository
        (a dot-repository), see <emphasis>branch.&lt;name&gt;.merge</emphasis>'s final note below.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>branch.&lt;name&gt;.pushRemote</emphasis>
</term>
<listitem>
<simpara>
        When on branch <emphasis>&lt;name&gt;</emphasis>, it overrides <emphasis>branch.&lt;name&gt;.remote</emphasis> for
        pushing.  It also overrides <emphasis>remote.pushDefault</emphasis> for pushing
        from branch <emphasis>&lt;name&gt;</emphasis>.  When you pull from one place (e.g. your
        upstream) and push to another place (e.g. your own publishing
        repository), you would want to set <emphasis>remote.pushDefault</emphasis> to
        specify the remote to push to for all branches, and use this
        option to override it for a specific branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>branch.&lt;name&gt;.merge</emphasis>
</term>
<listitem>
<simpara>
        Defines, together with <emphasis>branch.&lt;name&gt;.remote</emphasis>, the upstream branch
        for the given branch. It tells <emphasis>git fetch</emphasis>/<emphasis>git pull</emphasis>/<emphasis>git rebase</emphasis> which
        branch to merge and can also affect <emphasis>git push</emphasis> (see <emphasis>push.default</emphasis>).
        When in branch <emphasis>&lt;name&gt;</emphasis>, it tells <emphasis>git fetch</emphasis> the default
        refspec to be marked for merging in <emphasis>FETCH_HEAD</emphasis>. The value is
        handled like the remote part of a refspec, and must match a
        ref which is fetched from the remote given by
        <emphasis>branch.&lt;name&gt;.remote</emphasis>.
        The merge information is used by <emphasis>git pull</emphasis> (which first calls
        <emphasis>git fetch</emphasis>) to lookup the default branch for merging. Without
        this option, <emphasis>git pull</emphasis> defaults to merge the first refspec fetched.
        Specify multiple values to get an octopus merge.
        If you wish to setup <emphasis>git pull</emphasis> so that it merges into &lt;name&gt; from
        another branch in the local repository, you can point
        branch.&lt;name&gt;.merge to the desired branch, and use the relative path
        setting <emphasis>.</emphasis> (a period) for <emphasis>branch.&lt;name&gt;.remote</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>branch.&lt;name&gt;.mergeOptions</emphasis>
</term>
<listitem>
<simpara>
        Sets default options for merging into branch <emphasis>&lt;name&gt;</emphasis>. The syntax and
        supported options are the same as those of <xref linkend="git-merge(1)" />, but
        option values containing whitespace characters are currently not
        supported.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>branch.&lt;name&gt;.rebase</emphasis>
</term>
<listitem>
<simpara>
        When true, rebase the branch <emphasis>&lt;name&gt;</emphasis> on top of the fetched branch,
        instead of merging the default branch from the default remote when
        <emphasis>git pull</emphasis> is run. See <emphasis>pull.rebase</emphasis> for doing this in a non
        branch-specific manner.
</simpara>
<simpara>When <emphasis>merges</emphasis> (or just <emphasis>m</emphasis>), pass the <emphasis>--rebase-merges</emphasis> option to <emphasis>git rebase</emphasis>
so that the local merge commits are included in the rebase (see
<xref linkend="git-rebase(1)" /> for details).</simpara>
<simpara>When the value is <emphasis>interactive</emphasis> (or just <emphasis>i</emphasis>), the rebase is run in interactive
mode.</simpara>
<simpara><emphasis role="strong">NOTE</emphasis>: this is a possibly dangerous operation; do <emphasis role="strong">not</emphasis> use
it unless you understand the implications (see <xref linkend="git-rebase(1)" />
for details).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>branch.&lt;name&gt;.description</emphasis>
</term>
<listitem>
<simpara>
        Branch description, can be edited with
        <emphasis>git branch --edit-description</emphasis>. Branch description is
        automatically added to the <emphasis>format-patch</emphasis> cover letter or
        <emphasis>request-pull</emphasis> summary.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
browser.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified browser. The
        specified command is evaluated in shell with the URLs passed
        as arguments. (See <xref linkend="git-web&#45;&#45;browse(1)" />.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
browser.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool that may be used to
        browse HTML help (see <emphasis>-w</emphasis> option in <xref linkend="git-help(1)" />) or a
        working repository in gitweb (see <xref linkend="git-instaweb(1)" />).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bundle.*
</term>
<listitem>
<simpara>
        The <emphasis>bundle.*</emphasis> keys may appear in a bundle list file found via the
        <emphasis>git clone --bundle-uri</emphasis> option. These keys currently have no effect
        if placed in a repository config file, though this will change in the
        future. See <ulink url="https://www.kernel.org/pub/software/scm/git/docs/technical/bundle-uri.html"><citetitle>the bundle URI design
        document</citetitle></ulink> for more details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bundle.version
</term>
<listitem>
<simpara>
        This integer value advertises the version of the bundle list format
        used by the bundle list. Currently, the only accepted value is <emphasis>1</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bundle.mode
</term>
<listitem>
<simpara>
        This string value should be either <emphasis>all</emphasis> or <emphasis>any</emphasis>. This value describes
        whether all of the advertised bundles are required to unbundle a
        complete understanding of the bundled information (<emphasis>all</emphasis>) or if any one
        of the listed bundle URIs is sufficient (<emphasis>any</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bundle.heuristic
</term>
<listitem>
<simpara>
        If this string-valued key exists, then the bundle list is designed to
        work well with incremental <emphasis>git fetch</emphasis> commands. The heuristic signals
        that there are additional keys available for each bundle that help
        determine which subset of bundles the client should download. The
        only value currently understood is <emphasis>creationToken</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bundle.&lt;id&gt;.*
</term>
<listitem>
<simpara>
        The <emphasis>bundle.&lt;id&gt;.*</emphasis> keys are used to describe a single item in the
        bundle list, grouped under <emphasis>&lt;id&gt;</emphasis> for identification purposes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
bundle.&lt;id&gt;.uri
</term>
<listitem>
<simpara>
        This string value defines the URI by which Git can reach the contents
        of this <emphasis>&lt;id&gt;</emphasis>. This URI may be a bundle file or another bundle list.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>checkout.defaultRemote</emphasis>
</term>
<listitem>
<simpara>
        When you run <emphasis>git checkout &lt;something&gt;</emphasis>
        or <emphasis>git switch &lt;something&gt;</emphasis> and only have one
        remote, it may implicitly fall back on checking out and
        tracking e.g. <emphasis>origin/&lt;something&gt;</emphasis>. This stops working as soon
        as you have more than one remote with a <emphasis>&lt;something&gt;</emphasis>
        reference. This setting allows for setting the name of a
        preferred remote that should always win when it comes to
        disambiguation. The typical use-case is to set this to
        <emphasis>origin</emphasis>.
</simpara>
<simpara>Currently this is used by <xref linkend="git-switch(1)" /> and
<xref linkend="git-checkout(1)" /> when <emphasis>git checkout &lt;something&gt;</emphasis>
or <emphasis>git switch &lt;something&gt;</emphasis>
will checkout the <emphasis>&lt;something&gt;</emphasis> branch on another remote,
and by <xref linkend="git-worktree(1)" /> when <emphasis>git worktree add</emphasis> refers to a
remote branch. This setting might be used for other checkout-like
commands or functionality in the future.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>checkout.guess</emphasis>
</term>
<listitem>
<simpara>
        Provides the default value for the <emphasis>--guess</emphasis> or <emphasis>--no-guess</emphasis>
        option in <emphasis>git checkout</emphasis> and <emphasis>git switch</emphasis>. See
        <xref linkend="git-switch(1)" /> and <xref linkend="git-checkout(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>checkout.workers</emphasis>
</term>
<listitem>
<simpara>
        The number of parallel workers to use when updating the working tree.
        The default is one, i.e. sequential execution. If set to a value less
        than one, Git will use as many workers as the number of logical cores
        available. This setting and <emphasis>checkout.thresholdForParallelism</emphasis> affect
        all commands that perform checkout. E.g. checkout, clone, reset,
        sparse-checkout, etc.
</simpara>
<note><simpara>Parallel checkout usually delivers better performance for repositories
located on SSDs or over NFS. For repositories on spinning disks and/or machines
with a small number of cores, the default sequential checkout often performs
better. The size and compression level of a repository might also influence how
well the parallel version performs.</simpara></note>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>checkout.thresholdForParallelism</emphasis>
</term>
<listitem>
<simpara>
        When running parallel checkout with a small number of files, the cost
        of subprocess spawning and inter-process communication might outweigh
        the parallelization gains. This setting allows you to define the minimum
        number of files for which parallel checkout should be attempted. The
        default is 100.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
clean.requireForce
</term>
<listitem>
<simpara>
        A boolean to make git-clean refuse to delete files unless -f
        is given. Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>clone.defaultRemoteName</emphasis>
</term>
<listitem>
<simpara>
        The name of the remote to create when cloning a repository.  Defaults to
        <emphasis>origin</emphasis>.
        It can be overridden by passing the <emphasis>--origin</emphasis> command-line
        option to <xref linkend="git-clone(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>clone.rejectShallow</emphasis>
</term>
<listitem>
<simpara>
        Reject cloning a repository if it is a shallow one; this can be overridden by
        passing the <emphasis>--reject-shallow</emphasis> option on the command line.
        See <xref linkend="git-clone(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>clone.filterSubmodules</emphasis>
</term>
<listitem>
<simpara>
        If a partial clone filter is provided (see <emphasis>--filter</emphasis> in
        <xref linkend="git-rev-list(1)" />) and <emphasis>--recurse-submodules</emphasis> is used, also apply
        the filter to submodules.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.advice
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in hints (e.g. when a push
        failed, see <emphasis>advice.*</emphasis> for a list).  May be set to <emphasis>always</emphasis>,
        <emphasis>false</emphasis> (or <emphasis>never</emphasis>) or <emphasis>auto</emphasis> (or <emphasis>true</emphasis>), in which case colors
        are used only when the error output goes to a terminal. If
        unset, then the value of <emphasis>color.ui</emphasis> is used (<emphasis>auto</emphasis> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.advice.hint
</term>
<listitem>
<simpara>
        Use customized color for hints.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.blame.highlightRecent
</term>
<listitem>
<simpara>
        Specify the line annotation color for <emphasis>git blame --color-by-age</emphasis>
        depending upon the age of the line.
</simpara>
<simpara>This setting should be set to a comma-separated list of color and
date settings, starting and ending with a color, the dates should be
set from oldest to newest. The metadata will be colored with the
specified colors if the line was introduced before the given
timestamp, overwriting older timestamped colors.</simpara>
<simpara>Instead of an absolute timestamp relative timestamps work as well,
e.g. <emphasis>2.weeks.ago</emphasis> is valid to address anything older than 2 weeks.</simpara>
<simpara>It defaults to <emphasis>blue,12 month ago,white,1 month ago,red</emphasis>, which
colors everything older than one year blue, recent changes between
one month and one year old are kept white, and lines introduced
within the last month are colored red.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.blame.repeatedLines
</term>
<listitem>
<simpara>
        Use the specified color to colorize line annotations for
        <emphasis>git blame --color-lines</emphasis>, if they come from the same commit as the
        preceding line. Defaults to cyan.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.branch
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in the output of
        <xref linkend="git-branch(1)" />. May be set to <emphasis>always</emphasis>,
        <emphasis>false</emphasis> (or <emphasis>never</emphasis>) or <emphasis>auto</emphasis> (or <emphasis>true</emphasis>), in which case colors are used
        only when the output is to a terminal. If unset, then the
        value of <emphasis>color.ui</emphasis> is used (<emphasis>auto</emphasis> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.branch.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for branch coloration. <emphasis>&lt;slot&gt;</emphasis> is one of
        <emphasis>current</emphasis> (the current branch), <emphasis>local</emphasis> (a local branch),
        <emphasis>remote</emphasis> (a remote-tracking branch in refs/remotes/),
        <emphasis>upstream</emphasis> (upstream tracking branch), <emphasis>plain</emphasis> (other
        refs).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.diff
</term>
<listitem>
<simpara>
        Whether to use ANSI escape sequences to add color to patches.
        If this is set to <emphasis>always</emphasis>, <xref linkend="git-diff(1)" />,
        <xref linkend="git-log(1)" />, and <xref linkend="git-show(1)" /> will use color
        for all patches.  If it is set to <emphasis>true</emphasis> or <emphasis>auto</emphasis>, those
        commands will only use color when output is to the terminal.
        If unset, then the value of <emphasis>color.ui</emphasis> is used (<emphasis>auto</emphasis> by
        default).
</simpara>
<simpara>This does not affect <xref linkend="git-format-patch(1)" /> or the
<emphasis>git-diff-&#42;</emphasis> plumbing commands.  Can be overridden on the
command line with the <emphasis>--color[=&lt;when&gt;]</emphasis> option.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.diff.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for diff colorization.  <emphasis>&lt;slot&gt;</emphasis> specifies
        which part of the patch to use the specified color, and is one
        of <emphasis>context</emphasis> (context text - <emphasis>plain</emphasis> is a historical synonym),
        <emphasis>meta</emphasis> (metainformation), <emphasis>frag</emphasis>
        (hunk header), <emphasis>func</emphasis> (function in hunk header), <emphasis>old</emphasis> (removed lines),
        <emphasis>new</emphasis> (added lines), <emphasis>commit</emphasis> (commit headers), <emphasis>whitespace</emphasis>
        (highlighting whitespace errors), <emphasis>oldMoved</emphasis> (deleted lines),
        <emphasis>newMoved</emphasis> (added lines), <emphasis>oldMovedDimmed</emphasis>, <emphasis>oldMovedAlternative</emphasis>,
        <emphasis>oldMovedAlternativeDimmed</emphasis>, <emphasis>newMovedDimmed</emphasis>, <emphasis>newMovedAlternative</emphasis>
        <emphasis>newMovedAlternativeDimmed</emphasis> (See the <emphasis>&lt;mode&gt;</emphasis>
        setting of <emphasis>--color-moved</emphasis> in <xref linkend="git-diff(1)" /> for details),
        <emphasis>contextDimmed</emphasis>, <emphasis>oldDimmed</emphasis>, <emphasis>newDimmed</emphasis>, <emphasis>contextBold</emphasis>,
        <emphasis>oldBold</emphasis>, and <emphasis>newBold</emphasis> (see <xref linkend="git-range-diff(1)" /> for details).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.decorate.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for <emphasis>git log --decorate</emphasis> output.  <emphasis>&lt;slot&gt;</emphasis> is one
        of <emphasis>branch</emphasis>, <emphasis>remoteBranch</emphasis>, <emphasis>tag</emphasis>, <emphasis>stash</emphasis> or <emphasis>HEAD</emphasis> for local
        branches, remote-tracking branches, tags, stash and HEAD, respectively
        and <emphasis>grafted</emphasis> for grafted commits.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.grep
</term>
<listitem>
<simpara>
        When set to <emphasis>always</emphasis>, always highlight matches.  When <emphasis>false</emphasis> (or
        <emphasis>never</emphasis>), never.  When set to <emphasis>true</emphasis> or <emphasis>auto</emphasis>, use color only
        when the output is written to the terminal.  If unset, then the
        value of <emphasis>color.ui</emphasis> is used (<emphasis>auto</emphasis> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.grep.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for grep colorization.  <emphasis>&lt;slot&gt;</emphasis> specifies which
        part of the line to use the specified color, and is one of
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>context</emphasis>
</term>
<listitem>
<simpara>
        non-matching text in context lines (when using <emphasis>-A</emphasis>, <emphasis>-B</emphasis>, or <emphasis>-C</emphasis>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>filename</emphasis>
</term>
<listitem>
<simpara>
        filename prefix (when not using <emphasis>-h</emphasis>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>function</emphasis>
</term>
<listitem>
<simpara>
        function name lines (when using <emphasis>-p</emphasis>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>lineNumber</emphasis>
</term>
<listitem>
<simpara>
        line number prefix (when using <emphasis>-n</emphasis>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>column</emphasis>
</term>
<listitem>
<simpara>
        column number prefix (when using <emphasis>--column</emphasis>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>match</emphasis>
</term>
<listitem>
<simpara>
        matching text (same as setting <emphasis>matchContext</emphasis> and <emphasis>matchSelected</emphasis>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>matchContext</emphasis>
</term>
<listitem>
<simpara>
        matching text in context lines
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>matchSelected</emphasis>
</term>
<listitem>
<simpara>
        matching text in selected lines. Also, used to customize the following
        <xref linkend="git-log(1)" /> subcommands: <emphasis>--grep</emphasis>, <emphasis>--author</emphasis>, and <emphasis>--committer</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>selected</emphasis>
</term>
<listitem>
<simpara>
        non-matching text in selected lines. Also, used to customize the
        following <xref linkend="git-log(1)" /> subcommands: <emphasis>--grep</emphasis>, <emphasis>--author</emphasis> and
        <emphasis>--committer</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>separator</emphasis>
</term>
<listitem>
<simpara>
        separators between fields on a line (<emphasis>:</emphasis>, <emphasis>-</emphasis>, and <emphasis>=</emphasis>)
        and between hunks (<emphasis>--</emphasis>)
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.interactive
</term>
<listitem>
<simpara>
        When set to <emphasis>always</emphasis>, always use colors for interactive prompts
        and displays (such as those used by "git-add --interactive" and
        "git-clean --interactive"). When false (or <emphasis>never</emphasis>), never.
        When set to <emphasis>true</emphasis> or <emphasis>auto</emphasis>, use colors only when the output is
        to the terminal. If unset, then the value of <emphasis>color.ui</emphasis> is
        used (<emphasis>auto</emphasis> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.interactive.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for <emphasis>git add --interactive</emphasis> and <emphasis>git clean
        --interactive</emphasis> output. <emphasis>&lt;slot&gt;</emphasis> may be <emphasis>prompt</emphasis>, <emphasis>header</emphasis>, <emphasis>help</emphasis>
        or <emphasis>error</emphasis>, for four distinct types of normal output from
        interactive commands.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.pager
</term>
<listitem>
<simpara>
        A boolean to specify whether <emphasis>auto</emphasis> color modes should colorize
        output going to the pager. Defaults to true; set this to false
        if your pager does not understand ANSI color codes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.push
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in push errors. May be set to
        <emphasis>always</emphasis>, <emphasis>false</emphasis> (or <emphasis>never</emphasis>) or <emphasis>auto</emphasis> (or <emphasis>true</emphasis>), in which
        case colors are used only when the error output goes to a terminal.
        If unset, then the value of <emphasis>color.ui</emphasis> is used (<emphasis>auto</emphasis> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.push.error
</term>
<listitem>
<simpara>
        Use customized color for push errors.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.remote
</term>
<listitem>
<simpara>
        If set, keywords at the start of the line are highlighted. The
        keywords are "error", "warning", "hint" and "success", and are
        matched case-insensitively. May be set to <emphasis>always</emphasis>, <emphasis>false</emphasis> (or
        <emphasis>never</emphasis>) or <emphasis>auto</emphasis> (or <emphasis>true</emphasis>). If unset, then the value of
        <emphasis>color.ui</emphasis> is used (<emphasis>auto</emphasis> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.remote.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for each remote keyword. <emphasis>&lt;slot&gt;</emphasis> may be
        <emphasis>hint</emphasis>, <emphasis>warning</emphasis>, <emphasis>success</emphasis> or <emphasis>error</emphasis> which match the
        corresponding keyword.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.showBranch
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in the output of
        <xref linkend="git-show-branch(1)" />. May be set to <emphasis>always</emphasis>,
        <emphasis>false</emphasis> (or <emphasis>never</emphasis>) or <emphasis>auto</emphasis> (or <emphasis>true</emphasis>), in which case colors are used
        only when the output is to a terminal. If unset, then the
        value of <emphasis>color.ui</emphasis> is used (<emphasis>auto</emphasis> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.status
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in the output of
        <xref linkend="git-status(1)" />. May be set to <emphasis>always</emphasis>,
        <emphasis>false</emphasis> (or <emphasis>never</emphasis>) or <emphasis>auto</emphasis> (or <emphasis>true</emphasis>), in which case colors are used
        only when the output is to a terminal. If unset, then the
        value of <emphasis>color.ui</emphasis> is used (<emphasis>auto</emphasis> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.status.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for status colorization. <emphasis>&lt;slot&gt;</emphasis> is
        one of <emphasis>header</emphasis> (the header text of the status message),
        <emphasis>added</emphasis> or <emphasis>updated</emphasis> (files which are added but not committed),
        <emphasis>changed</emphasis> (files which are changed but not added in the index),
        <emphasis>untracked</emphasis> (files which are not tracked by Git),
        <emphasis>branch</emphasis> (the current branch),
        <emphasis>nobranch</emphasis> (the color the <emphasis>no branch</emphasis> warning is shown in, defaulting
        to red),
        <emphasis>localBranch</emphasis> or <emphasis>remoteBranch</emphasis> (the local and remote branch names,
        respectively, when branch and tracking information is displayed in the
        status short-format), or
        <emphasis>unmerged</emphasis> (files which have unmerged changes).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.transport
</term>
<listitem>
<simpara>
        A boolean to enable/disable color when pushes are rejected. May be
        set to <emphasis>always</emphasis>, <emphasis>false</emphasis> (or <emphasis>never</emphasis>) or <emphasis>auto</emphasis> (or <emphasis>true</emphasis>), in which
        case colors are used only when the error output goes to a terminal.
        If unset, then the value of <emphasis>color.ui</emphasis> is used (<emphasis>auto</emphasis> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.transport.rejected
</term>
<listitem>
<simpara>
        Use customized color when a push was rejected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.ui
</term>
<listitem>
<simpara>
        This variable determines the default value for variables such
        as <emphasis>color.diff</emphasis> and <emphasis>color.grep</emphasis> that control the use of color
        per command family. Its scope will expand as more commands learn
        configuration to set a default for the <emphasis>--color</emphasis> option.  Set it
        to <emphasis>false</emphasis> or <emphasis>never</emphasis> if you prefer Git commands not to use
        color unless enabled explicitly with some other configuration
        or the <emphasis>--color</emphasis> option. Set it to <emphasis>always</emphasis> if you want all
        output not intended for machine consumption to use color, to
        <emphasis>true</emphasis> or <emphasis>auto</emphasis> (this is the default since Git 1.8.4) if you
        want such output to use color when written to the terminal.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
column.ui
</term>
<listitem>
<simpara>
        Specify whether supported commands should output in columns.
        This variable consists of a list of tokens separated by spaces
        or commas:
</simpara>
<simpara>These options control when the feature should be enabled
(defaults to <emphasis>never</emphasis>):</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>always</emphasis>
</term>
<listitem>
<simpara>
        always show in columns
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>never</emphasis>
</term>
<listitem>
<simpara>
        never show in columns
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>auto</emphasis>
</term>
<listitem>
<simpara>
        show in columns if the output is to the terminal
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>These options control layout (defaults to <emphasis>column</emphasis>).  Setting any
of these implies <emphasis>always</emphasis> if none of <emphasis>always</emphasis>, <emphasis>never</emphasis>, or <emphasis>auto</emphasis> are
specified.</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>column</emphasis>
</term>
<listitem>
<simpara>
        fill columns before rows
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>row</emphasis>
</term>
<listitem>
<simpara>
        fill rows before columns
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>plain</emphasis>
</term>
<listitem>
<simpara>
        show in one column
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Finally, these options can be combined with a layout option (defaults
to <emphasis>nodense</emphasis>):</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>dense</emphasis>
</term>
<listitem>
<simpara>
        make unequal size columns to utilize more space
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>nodense</emphasis>
</term>
<listitem>
<simpara>
        make equal size columns
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
column.branch
</term>
<listitem>
<simpara>
        Specify whether to output branch listing in <emphasis>git branch</emphasis> in columns.
        See <emphasis>column.ui</emphasis> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
column.clean
</term>
<listitem>
<simpara>
        Specify the layout when listing items in <emphasis>git clean -i</emphasis>, which always
        shows files and directories in columns. See <emphasis>column.ui</emphasis> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
column.status
</term>
<listitem>
<simpara>
        Specify whether to output untracked files in <emphasis>git status</emphasis> in columns.
        See <emphasis>column.ui</emphasis> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
column.tag
</term>
<listitem>
<simpara>
        Specify whether to output tag listings in <emphasis>git tag</emphasis> in columns.
        See <emphasis>column.ui</emphasis> for details.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>
<emphasis>commit.cleanup</emphasis>
</term>
<listitem>
<simpara>
        This setting overrides the default of the <emphasis>--cleanup</emphasis> option in
        <emphasis>git commit</emphasis>. See <xref linkend="git-commit(1)" /> for details. Changing the default can be useful
        when you always want to keep lines that begin
        with the comment character (<emphasis>core.commentChar</emphasis>, default <emphasis>#</emphasis>)
        in your log message, in which case you
        would do <emphasis>git config commit.cleanup whitespace</emphasis> (note that you will
        have to remove the help lines that begin with the comment character
        in the commit log template yourself, if you do this).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>commit.gpgSign</emphasis>
</term>
<listitem>
<simpara>
        A boolean to specify whether all commits should be GPG signed.
        Use of this option when doing operations such as rebase can
        result in a large number of commits being signed. It may be
        convenient to use an agent to avoid typing your GPG passphrase
        several times.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>commit.status</emphasis>
</term>
<listitem>
<simpara>
        A boolean to enable/disable inclusion of status information in the
        commit message template when using an editor to prepare the commit
        message.  Defaults to <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>commit.template</emphasis>
</term>
<listitem>
<simpara>
        Specify the pathname of a file to use as the template for
        new commit messages.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>commit.verbose</emphasis>
</term>
<listitem>
<simpara>
        A boolean or int to specify the level of verbosity with <emphasis>git commit</emphasis>.
        See <xref linkend="git-commit(1)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commitGraph.generationVersion
</term>
<listitem>
<simpara>
        Specifies the type of generation number version to use when writing
        or reading the commit-graph file. If version 1 is specified, then
        the corrected commit dates will not be written or read. Defaults to
        2.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commitGraph.maxNewFilters
</term>
<listitem>
<simpara>
        Specifies the default value for the <emphasis>--max-new-filters</emphasis> option of <emphasis>git
        commit-graph write</emphasis> (c.f., <xref linkend="git-commit-graph(1)" />).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commitGraph.readChangedPaths
</term>
<listitem>
<simpara>
        Deprecated. Equivalent to commitGraph.changedPathsVersion=-1 if true, and
        commitGraph.changedPathsVersion=0 if false. (If commitGraph.changedPathVersion
        is also set, commitGraph.changedPathsVersion takes precedence.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commitGraph.changedPathsVersion
</term>
<listitem>
<simpara>
        Specifies the version of the changed-path Bloom filters that Git will read and
        write. May be -1, 0, 1, or 2. Note that values greater than 1 may be
        incompatible with older versions of Git which do not yet understand
        those versions. Use caution when operating in a mixed-version
        environment.
</simpara>
<simpara>Defaults to -1.</simpara>
<simpara>If -1, Git will use the version of the changed-path Bloom filters in the
repository, defaulting to 1 if there are none.</simpara>
<simpara>If 0, Git will not read any Bloom filters, and will write version 1 Bloom
filters when instructed to write.</simpara>
<simpara>If 1, Git will only read version 1 Bloom filters, and will write version 1
Bloom filters.</simpara>
<simpara>If 2, Git will only read version 2 Bloom filters, and will write version 2
Bloom filters.</simpara>
<simpara>See <xref linkend="git-commit-graph(1)" /> for more information.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
completion.commands
</term>
<listitem>
<simpara>
        This is only used by git-completion.bash to add or remove
        commands from the list of completed commands. Normally only
        porcelain commands and a few select others are completed. You
        can add more commands, separated by space, in this
        variable. Prefixing the command with <emphasis>-</emphasis> will remove it from
        the existing list.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fileMode
</term>
<listitem>
<simpara>
        Tells Git if the executable bit of files in the working tree
        is to be honored.
</simpara>
<simpara>Some filesystems lose the executable bit when a file that is
marked as executable is checked out, or checks out a
non-executable file with executable bit on.
<xref linkend="git-clone(1)" /> or <xref linkend="git-init(1)" /> probe the filesystem
to see if it handles the executable bit correctly
and this variable is automatically set as necessary.</simpara>
<simpara>A repository, however, may be on a filesystem that handles
the filemode correctly, and this variable is set to <emphasis>true</emphasis>
when created, but later may be made accessible from another
environment that loses the filemode (e.g. exporting ext4 via
CIFS mount, visiting a Cygwin created repository with
Git for Windows or Eclipse).
In such a case it may be necessary to set this variable to <emphasis>false</emphasis>.
See <xref linkend="git-update-index(1)" />.</simpara>
<simpara>The default is true (when core.filemode is not specified in the config file).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.hideDotFiles
</term>
<listitem>
<simpara>
        (Windows-only) If true, mark newly-created directories and files whose
        name starts with a dot as hidden.  If <emphasis>dotGitOnly</emphasis>, only the <emphasis>.git/</emphasis>
        directory is hidden, but no other files starting with a dot.  The
        default mode is <emphasis>dotGitOnly</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.ignoreCase
</term>
<listitem>
<simpara>
        Internal variable which enables various workarounds to enable
        Git to work better on filesystems that are not case sensitive,
        like APFS, HFS+, FAT, NTFS, etc. For example, if a directory listing
        finds "makefile" when Git expects "Makefile", Git will assume
        it is really the same file, and continue to remember it as
        "Makefile".
</simpara>
<simpara>The default is false, except <xref linkend="git-clone(1)" /> or <xref linkend="git-init(1)" />
will probe and set core.ignoreCase true if appropriate when the repository
is created.</simpara>
<simpara>Git relies on the proper configuration of this variable for your operating
and file system. Modifying this value may result in unexpected behavior.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.precomposeUnicode
</term>
<listitem>
<simpara>
        This option is only used by Mac OS implementation of Git.
        When core.precomposeUnicode=true, Git reverts the unicode decomposition
        of filenames done by Mac OS. This is useful when sharing a repository
        between Mac OS and Linux or Windows.
        (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7).
        When false, file names are handled fully transparent by Git,
        which is backward compatible with older versions of Git.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.protectHFS
</term>
<listitem>
<simpara>
        If set to true, do not allow checkout of paths that would
        be considered equivalent to <emphasis>.git</emphasis> on an HFS+ filesystem.
        Defaults to <emphasis>true</emphasis> on Mac OS, and <emphasis>false</emphasis> elsewhere.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.protectNTFS
</term>
<listitem>
<simpara>
        If set to true, do not allow checkout of paths that would
        cause problems with the NTFS filesystem, e.g. conflict with
        8.3 "short" names.
        Defaults to <emphasis>true</emphasis> on Windows, and <emphasis>false</emphasis> elsewhere.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fsmonitor
</term>
<listitem>
<simpara>
        If set to true, enable the built-in file system monitor
        daemon for this working directory (<xref linkend="git-fsmonitor&#45;&#45;daemon(1)" />).
</simpara>
<simpara>Like hook-based file system monitors, the built-in file system monitor
can speed up Git commands that need to refresh the Git index
(e.g. <emphasis>git status</emphasis>) in a working directory with many files.  The
built-in monitor eliminates the need to install and maintain an
external third-party tool.</simpara>
<simpara>The built-in file system monitor is currently available only on a
limited set of supported platforms.  Currently, this includes Windows
and MacOS.</simpara>
<literallayout class="monospaced">Otherwise, this variable contains the pathname of the "fsmonitor"
hook command.</literallayout>
<simpara>This hook command is used to identify all files that may have changed
since the requested date/time. This information is used to speed up
git by avoiding unnecessary scanning of files that have not changed.</simpara>
<simpara>See the "fsmonitor-watchman" section of <xref linkend="githooks(5)" />.</simpara>
<simpara>Note that if you concurrently use multiple versions of Git, such
as one version on the command line and another version in an IDE
tool, that the definition of <emphasis>core.fsmonitor</emphasis> was extended to
allow boolean values in addition to hook pathnames.  Git versions
2.35.1 and prior will not understand the boolean values and will
consider the "true" or "false" values as hook pathnames to be
invoked.  Git versions 2.26 thru 2.35.1 default to hook protocol
V2 and will fall back to no fsmonitor (full scan).  Git versions
prior to 2.26 default to hook protocol V1 and will silently
assume there were no changes to report (no scan), so status
commands may report incomplete results.  For this reason, it is
best to upgrade all of your Git versions before using the built-in
file system monitor.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fsmonitorHookVersion
</term>
<listitem>
<simpara>
        Sets the protocol version to be used when invoking the
        "fsmonitor" hook.
</simpara>
<simpara>There are currently versions 1 and 2. When this is not set,
version 2 will be tried first and if it fails then version 1
will be tried. Version 1 uses a timestamp as input to determine
which files have changes since that time but some monitors
like Watchman have race conditions when used with a timestamp.
Version 2 uses an opaque string so that the monitor can return
something that can be used to determine what files have changed
without race conditions.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.trustctime
</term>
<listitem>
<simpara>
        If false, the ctime differences between the index and the
        working tree are ignored; useful when the inode change time
        is regularly modified by something outside Git (file system
        crawlers and some backup systems).
        See <xref linkend="git-update-index(1)" />. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.splitIndex
</term>
<listitem>
<simpara>
        If true, the split-index feature of the index will be used.
        See <xref linkend="git-update-index(1)" />. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.untrackedCache
</term>
<listitem>
<simpara>
        Determines what to do about the untracked cache feature of the
        index. It will be kept, if this variable is unset or set to
        <emphasis>keep</emphasis>. It will automatically be added if set to <emphasis>true</emphasis>. And
        it will automatically be removed, if set to <emphasis>false</emphasis>. Before
        setting it to <emphasis>true</emphasis>, you should check that mtime is working
        properly on your system.
        See <xref linkend="git-update-index(1)" />. <emphasis>keep</emphasis> by default, unless
        <emphasis>feature.manyFiles</emphasis> is enabled which sets this setting to
        <emphasis>true</emphasis> by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.checkStat
</term>
<listitem>
<simpara>
        When missing or is set to <emphasis>default</emphasis>, many fields in the stat
        structure are checked to detect if a file has been modified
        since Git looked at it.  When this configuration variable is
        set to <emphasis>minimal</emphasis>, sub-second part of mtime and ctime, the
        uid and gid of the owner of the file, the inode number (and
        the device number, if Git was compiled to use it), are
        excluded from the check among these fields, leaving only the
        whole-second part of mtime (and ctime, if <emphasis>core.trustCtime</emphasis>
        is set) and the filesize to be checked.
</simpara>
<simpara>There are implementations of Git that do not leave usable values in
some fields (e.g. JGit); by excluding these fields from the
comparison, the <emphasis>minimal</emphasis> mode may help interoperability when the
same repository is used by these other systems at the same time.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.quotePath
</term>
<listitem>
<simpara>
        Commands that output paths (e.g. <emphasis>ls-files</emphasis>, <emphasis>diff</emphasis>), will
        quote "unusual" characters in the pathname by enclosing the
        pathname in double-quotes and escaping those characters with
        backslashes in the same way C escapes control characters (e.g.
        <emphasis>\t</emphasis> for TAB, <emphasis>\n</emphasis> for LF, <emphasis>\\</emphasis> for backslash) or bytes with
        values larger than 0x80 (e.g. octal <emphasis>\302\265</emphasis> for "micro" in
        UTF-8).  If this variable is set to false, bytes higher than
        0x80 are not considered "unusual" any more. Double-quotes,
        backslash and control characters are always escaped regardless
        of the setting of this variable.  A simple space character is
        not considered "unusual".  Many commands can output pathnames
        completely verbatim using the <emphasis>-z</emphasis> option. The default value
        is true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.eol
</term>
<listitem>
<simpara>
        Sets the line ending type to use in the working directory for
        files that are marked as text (either by having the <emphasis>text</emphasis>
        attribute set, or by having <emphasis>text=auto</emphasis> and Git auto-detecting
        the contents as text).
        Alternatives are <emphasis>lf</emphasis>, <emphasis>crlf</emphasis> and <emphasis>native</emphasis>, which uses the platform's
        native line ending.  The default value is <emphasis>native</emphasis>.  See
        <xref linkend="gitattributes(5)" /> for more information on end-of-line
        conversion. Note that this value is ignored if <emphasis>core.autocrlf</emphasis>
        is set to <emphasis>true</emphasis> or <emphasis>input</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.safecrlf
</term>
<listitem>
<simpara>
        If true, makes Git check if converting <emphasis>CRLF</emphasis> is reversible when
        end-of-line conversion is active.  Git will verify if a command
        modifies a file in the work tree either directly or indirectly.
        For example, committing a file followed by checking out the
        same file should yield the original file in the work tree.  If
        this is not the case for the current setting of
        <emphasis>core.autocrlf</emphasis>, Git will reject the file.  The variable can
        be set to "warn", in which case Git will only warn about an
        irreversible conversion but continue the operation.
</simpara>
<simpara>CRLF conversion bears a slight chance of corrupting data.
When it is enabled, Git will convert CRLF to LF during commit and LF to
CRLF during checkout.  A file that contains a mixture of LF and
CRLF before the commit cannot be recreated by Git.  For text
files this is the right thing to do: it corrects line endings
such that we have only LF line endings in the repository.
But for binary files that are accidentally classified as text the
conversion can corrupt data.</simpara>
<simpara>If you recognize such corruption early you can easily fix it by
setting the conversion type explicitly in .gitattributes.  Right
after committing you still have the original file in your work
tree and this file is not yet corrupted.  You can explicitly tell
Git that this file is binary and Git will handle the file
appropriately.</simpara>
<simpara>Unfortunately, the desired effect of cleaning up text files with
mixed line endings and the undesired effect of corrupting binary
files cannot be distinguished.  In both cases CRLFs are removed
in an irreversible way.  For text files this is the right thing
to do because CRLFs are line endings, while for binary files
converting CRLFs corrupts data.</simpara>
<simpara>Note, this safety check does not mean that a checkout will generate a
file identical to the original file for a different setting of
<emphasis>core.eol</emphasis> and <emphasis>core.autocrlf</emphasis>, but only for the current one.  For
example, a text file with <emphasis>LF</emphasis> would be accepted with <emphasis>core.eol=lf</emphasis>
and could later be checked out with <emphasis>core.eol=crlf</emphasis>, in which case the
resulting file would contain <emphasis>CRLF</emphasis>, although the original file
contained <emphasis>LF</emphasis>.  However, in both work trees the line endings would be
consistent, that is either all <emphasis>LF</emphasis> or all <emphasis>CRLF</emphasis>, but never mixed.  A
file with mixed line endings would be reported by the <emphasis>core.safecrlf</emphasis>
mechanism.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.autocrlf
</term>
<listitem>
<simpara>
        Setting this variable to "true" is the same as setting
        the <emphasis>text</emphasis> attribute to "auto" on all files and core.eol to "crlf".
        Set to true if you want to have <emphasis>CRLF</emphasis> line endings in your
        working directory and the repository has LF line endings.
        This variable can be set to <emphasis>input</emphasis>,
        in which case no output conversion is performed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.checkRoundtripEncoding
</term>
<listitem>
<simpara>
        A comma and/or whitespace separated list of encodings that Git
        performs UTF-8 round trip checks on if they are used in an
        <emphasis>working-tree-encoding</emphasis> attribute (see <xref linkend="gitattributes(5)" />).
        The default value is <emphasis>SHIFT-JIS</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.symlinks
</term>
<listitem>
<simpara>
        If false, symbolic links are checked out as small plain files that
        contain the link text. <xref linkend="git-update-index(1)" /> and
        <xref linkend="git-add(1)" /> will not change the recorded type to regular
        file. Useful on filesystems like FAT that do not support
        symbolic links.
</simpara>
<simpara>The default is true, except <xref linkend="git-clone(1)" /> or <xref linkend="git-init(1)" />
will probe and set core.symlinks false if appropriate when the repository
is created.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.gitProxy
</term>
<listitem>
<simpara>
        A "proxy command" to execute (as <emphasis>command host port</emphasis>) instead
        of establishing direct connection to the remote server when
        using the Git protocol for fetching. If the variable value is
        in the "COMMAND for DOMAIN" format, the command is applied only
        on hostnames ending with the specified domain string. This variable
        may be set multiple times and is matched in the given order;
        the first match wins.
</simpara>
<simpara>Can be overridden by the <emphasis>GIT_PROXY_COMMAND</emphasis> environment variable
(which always applies universally, without the special "for"
handling).</simpara>
<simpara>The special string <emphasis>none</emphasis> can be used as the proxy command to
specify that no proxy be used for a given domain pattern.
This is useful for excluding servers inside a firewall from
proxy use, while defaulting to a common proxy for external domains.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.sshCommand
</term>
<listitem>
<simpara>
        If this variable is set, <emphasis>git fetch</emphasis> and <emphasis>git push</emphasis> will
        use the specified command instead of <emphasis>ssh</emphasis> when they need to
        connect to a remote system. The command is in the same form as
        the <emphasis>GIT_SSH_COMMAND</emphasis> environment variable and is overridden
        when the environment variable is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.ignoreStat
</term>
<listitem>
<simpara>
        If true, Git will avoid using lstat() calls to detect if files have
        changed by setting the "assume-unchanged" bit for those tracked files
        which it has updated identically in both the index and working tree.
</simpara>
<simpara>When files are modified outside of Git, the user will need to stage
the modified files explicitly (e.g. see <emphasis>Examples</emphasis> section in
<xref linkend="git-update-index(1)" />).
Git will not normally detect changes to those files.</simpara>
<simpara>This is useful on systems where lstat() calls are very slow, such as
CIFS/Microsoft Windows.</simpara>
<simpara>False by default.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.preferSymlinkRefs
</term>
<listitem>
<simpara>
        Instead of the default "symref" format for HEAD
        and other symbolic reference files, use symbolic links.
        This is sometimes needed to work with old scripts that
        expect HEAD to be a symbolic link.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.alternateRefsCommand
</term>
<listitem>
<simpara>
        When advertising tips of available history from an alternate, use the shell to
        execute the specified command instead of <xref linkend="git-for-each-ref(1)" />. The
        first argument is the absolute path of the alternate. Output must contain one
        hex object id per line (i.e., the same as produced by <emphasis>git for-each-ref
        --format='%(objectname)'</emphasis>).
</simpara>
<simpara>Note that you cannot generally put <emphasis>git for-each-ref</emphasis> directly into the config
value, as it does not take a repository path as an argument (but you can wrap
the command above in a shell script).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.alternateRefsPrefixes
</term>
<listitem>
<simpara>
        When listing references from an alternate, list only references that begin
        with the given prefix. Prefixes match as if they were given as arguments to
        <xref linkend="git-for-each-ref(1)" />. To list multiple prefixes, separate them with
        whitespace. If <emphasis>core.alternateRefsCommand</emphasis> is set, setting
        <emphasis>core.alternateRefsPrefixes</emphasis> has no effect.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.bare
</term>
<listitem>
<simpara>
        If true this repository is assumed to be <emphasis>bare</emphasis> and has no
        working directory associated with it.  If this is the case a
        number of commands that require a working directory will be
        disabled, such as <xref linkend="git-add(1)" /> or <xref linkend="git-merge(1)" />.
</simpara>
<simpara>This setting is automatically guessed by <xref linkend="git-clone(1)" /> or
<xref linkend="git-init(1)" /> when the repository was created.  By default a
repository that ends in "/.git" is assumed to be not bare (bare =
false), while all other repositories are assumed to be bare (bare
= true).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.worktree
</term>
<listitem>
<simpara>
        Set the path to the root of the working tree.
        If <emphasis>GIT_COMMON_DIR</emphasis> environment variable is set, core.worktree
        is ignored and not used for determining the root of working tree.
        This can be overridden by the <emphasis>GIT_WORK_TREE</emphasis> environment
        variable and the <emphasis>--work-tree</emphasis> command-line option.
        The value can be an absolute path or relative to the path to
        the .git directory, which is either specified by --git-dir
        or GIT_DIR, or automatically discovered.
        If --git-dir or GIT_DIR is specified but none of
        --work-tree, GIT_WORK_TREE and core.worktree is specified,
        the current working directory is regarded as the top level
        of your working tree.
</simpara>
<simpara>Note that this variable is honored even when set in a configuration
file in a ".git" subdirectory of a directory and its value differs
from the latter directory (e.g. "/path/to/.git/config" has
core.worktree set to "/different/path"), which is most likely a
misconfiguration.  Running Git commands in the "/path/to" directory will
still use "/different/path" as the root of the work tree and can cause
confusion unless you know what you are doing (e.g. you are creating a
read-only snapshot of the same index to a location different from the
repository's usual working tree).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.logAllRefUpdates
</term>
<listitem>
<simpara>
        Enable the reflog. Updates to a ref &lt;ref&gt; is logged to the file
        "<emphasis>$GIT_DIR/logs/&lt;ref&gt;</emphasis>", by appending the new and old
        SHA-1, the date/time and the reason of the update, but
        only when the file exists.  If this configuration
        variable is set to <emphasis>true</emphasis>, missing "<emphasis>$GIT_DIR/logs/&lt;ref&gt;</emphasis>"
        file is automatically created for branch heads (i.e. under
        <emphasis>refs/heads/</emphasis>), remote refs (i.e. under <emphasis>refs/remotes/</emphasis>),
        note refs (i.e. under <emphasis>refs/notes/</emphasis>), and the symbolic ref <emphasis>HEAD</emphasis>.
        If it is set to <emphasis>always</emphasis>, then a missing reflog is automatically
        created for any ref under <emphasis>refs/</emphasis>.
</simpara>
<simpara>This information can be used to determine what commit
was the tip of a branch "2 days ago".</simpara>
<simpara>This value is true by default in a repository that has
a working directory associated with it, and false by
default in a bare repository.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.repositoryFormatVersion
</term>
<listitem>
<simpara>
        Internal variable identifying the repository format and layout
        version. See <xref linkend="gitrepository-layout(5)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.sharedRepository
</term>
<listitem>
<simpara>
        When <emphasis>group</emphasis> (or <emphasis>true</emphasis>), the repository is made shareable between
        several users in a group (making sure all the files and objects are
        group-writable). When <emphasis>all</emphasis> (or <emphasis>world</emphasis> or <emphasis>everybody</emphasis>), the
        repository will be readable by all users, additionally to being
        group-shareable. When <emphasis>umask</emphasis> (or <emphasis>false</emphasis>), Git will use permissions
        reported by umask(2). When <emphasis>0xxx</emphasis>, where <emphasis>0xxx</emphasis> is an octal number,
        files in the repository will have this mode value. <emphasis>0xxx</emphasis> will override
        user's umask value (whereas the other options will only override
        requested parts of the user's umask value). Examples: <emphasis>0660</emphasis> will make
        the repo read/write-able for the owner and group, but inaccessible to
        others (equivalent to <emphasis>group</emphasis> unless umask is e.g. <emphasis>0022</emphasis>). <emphasis>0640</emphasis> is a
        repository that is group-readable but not group-writable.
        See <xref linkend="git-init(1)" />. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.warnAmbiguousRefs
</term>
<listitem>
<simpara>
        If true, Git will warn you if the ref name you passed it is ambiguous
        and might match multiple refs in the repository. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.compression
</term>
<listitem>
<simpara>
        An integer -1..9, indicating a default compression level.
        -1 is the zlib default. 0 means no compression,
        and 1..9 are various speed/size tradeoffs, 9 being slowest.
        If set, this provides a default to other compression variables,
        such as <emphasis>core.looseCompression</emphasis> and <emphasis>pack.compression</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.looseCompression
</term>
<listitem>
<simpara>
        An integer -1..9, indicating the compression level for objects that
        are not in a pack file. -1 is the zlib default. 0 means no
        compression, and 1..9 are various speed/size tradeoffs, 9 being
        slowest.  If not set,  defaults to core.compression.  If that is
        not set,  defaults to 1 (best speed).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.packedGitWindowSize
</term>
<listitem>
<simpara>
        Number of bytes of a pack file to map into memory in a
        single mapping operation.  Larger window sizes may allow
        your system to process a smaller number of large pack files
        more quickly.  Smaller window sizes will negatively affect
        performance due to increased calls to the operating system's
        memory manager, but may improve performance when accessing
        a large number of large pack files.
</simpara>
<simpara>Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32
MiB on 32 bit platforms and 1 GiB on 64 bit platforms.  This should
be reasonable for all users/operating systems.  You probably do
not need to adjust this value.</simpara>
<simpara>Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.packedGitLimit
</term>
<listitem>
<simpara>
        Maximum number of bytes to map simultaneously into memory
        from pack files.  If Git needs to access more than this many
        bytes at once to complete an operation it will unmap existing
        regions to reclaim virtual address space within the process.
</simpara>
<simpara>Default is 256 MiB on 32 bit platforms and 32 TiB (effectively
unlimited) on 64 bit platforms.
This should be reasonable for all users/operating systems, except on
the largest projects.  You probably do not need to adjust this value.</simpara>
<simpara>Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.deltaBaseCacheLimit
</term>
<listitem>
<simpara>
        Maximum number of bytes per thread to reserve for caching base objects
        that may be referenced by multiple deltified objects.  By storing the
        entire decompressed base objects in a cache Git is able
        to avoid unpacking and decompressing frequently used base
        objects multiple times.
</simpara>
<simpara>Default is 96 MiB on all platforms.  This should be reasonable
for all users/operating systems, except on the largest projects.
You probably do not need to adjust this value.</simpara>
<simpara>Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.bigFileThreshold
</term>
<listitem>
<simpara>
        The size of files considered "big", which as discussed below
        changes the behavior of numerous git commands, as well as how
        such files are stored within the repository. The default is
        512 MiB. Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are
        supported.
</simpara>
<simpara>Files above the configured limit will be:</simpara>
<itemizedlist>
<listitem>
<simpara>
Stored deflated in packfiles, without attempting delta compression.
</simpara>
<simpara>The default limit is primarily set with this use-case in mind. With it,
most projects will have their source code and other text files delta
compressed, but not larger binary media files.</simpara>
<simpara>Storing large files without delta compression avoids excessive memory
usage, at the slight expense of increased disk usage.</simpara>
</listitem>
<listitem>
<simpara>
Will be treated as if they were labeled "binary" (see
  <xref linkend="gitattributes(5)" />). e.g. <xref linkend="git-log(1)" /> and
  <xref linkend="git-diff(1)" /> will not compute diffs for files above this limit.
</simpara>
</listitem>
<listitem>
<simpara>
Will generally be streamed when written, which avoids excessive
memory usage, at the cost of some fixed overhead. Commands that make
use of this include <xref linkend="git-archive(1)" />,
<xref linkend="git-fast-import(1)" />, <xref linkend="git-index-pack(1)" />,
<xref linkend="git-unpack-objects(1)" /> and <xref linkend="git-fsck(1)" />.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.excludesFile
</term>
<listitem>
<simpara>
        Specifies the pathname to the file that contains patterns to
        describe paths that are not meant to be tracked, in addition
        to <emphasis>.gitignore</emphasis> (per-directory) and <emphasis>.git/info/exclude</emphasis>.
        Defaults to <emphasis>$XDG_CONFIG_HOME/git/ignore</emphasis>.
        If <emphasis>$XDG_CONFIG_HOME</emphasis> is either not set or empty, <emphasis>$HOME/.config/git/ignore</emphasis>
        is used instead. See <xref linkend="gitignore(5)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.askPass
</term>
<listitem>
<simpara>
        Some commands (e.g. svn and http interfaces) that interactively
        ask for a password can be told to use an external program given
        via the value of this variable. Can be overridden by the <emphasis>GIT_ASKPASS</emphasis>
        environment variable. If not set, fall back to the value of the
        <emphasis>SSH_ASKPASS</emphasis> environment variable or, failing that, a simple password
        prompt. The external program shall be given a suitable prompt as
        command-line argument and write the password on its STDOUT.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.attributesFile
</term>
<listitem>
<simpara>
        In addition to <emphasis>.gitattributes</emphasis> (per-directory) and
        <emphasis>.git/info/attributes</emphasis>, Git looks into this file for attributes
        (see <xref linkend="gitattributes(5)" />). Path expansions are made the same
        way as for <emphasis>core.excludesFile</emphasis>. Its default value is
        <emphasis>$XDG_CONFIG_HOME/git/attributes</emphasis>. If <emphasis>$XDG_CONFIG_HOME</emphasis> is either not
        set or empty, <emphasis>$HOME/.config/git/attributes</emphasis> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.hooksPath
</term>
<listitem>
<simpara>
        By default Git will look for your hooks in the
        <emphasis>$GIT_DIR/hooks</emphasis> directory. Set this to different path,
        e.g. <emphasis>/etc/git/hooks</emphasis>, and Git will try to find your hooks in
        that directory, e.g. <emphasis>/etc/git/hooks/pre-receive</emphasis> instead of
        in <emphasis>$GIT_DIR/hooks/pre-receive</emphasis>.
</simpara>
<simpara>The path can be either absolute or relative. A relative path is
taken as relative to the directory where the hooks are run (see
the "DESCRIPTION" section of <xref linkend="githooks(5)" />).</simpara>
<simpara>This configuration variable is useful in cases where you'd like to
centrally configure your Git hooks instead of configuring them on a
per-repository basis, or as a more flexible and centralized
alternative to having an <emphasis>init.templateDir</emphasis> where you've changed
default hooks.</simpara>
<simpara>You can also disable all hooks entirely by setting <emphasis>core.hooksPath</emphasis>
to <emphasis>/dev/null</emphasis>. This is usually only advisable for expert users and
on a per-command basis using configuration parameters of the form
<emphasis>git -c core.hooksPath=/dev/null ...</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.editor
</term>
<listitem>
<simpara>
        Commands such as <emphasis>commit</emphasis> and <emphasis>tag</emphasis> that let you edit
        messages by launching an editor use the value of this
        variable when it is set, and the environment variable
        <emphasis>GIT_EDITOR</emphasis> is not set.  See <xref linkend="git-var(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.commentChar
</term>
<term>
core.commentString
</term>
<listitem>
<simpara>
        Commands such as <emphasis>commit</emphasis> and <emphasis>tag</emphasis> that let you edit
        messages consider a line that begins with this character
        commented, and removes them after the editor returns
        (default <emphasis>#</emphasis>).
</simpara>
<simpara>If set to "auto", <emphasis>git-commit</emphasis> would select a character that is not
the beginning character of any line in existing commit messages.</simpara>
<simpara>Note that these two variables are aliases of each other, and in modern
versions of Git you are free to use a string (e.g., <emphasis>//</emphasis> or <emphasis>⁑⁕⁑</emphasis>) with
<emphasis>commentChar</emphasis>. Versions of Git prior to v2.45.0 will ignore
<emphasis>commentString</emphasis> but will reject a value of <emphasis>commentChar</emphasis> that consists
of more than a single ASCII byte. If you plan to use your config with
older and newer versions of Git, you may want to specify both:</simpara>
<literallayout class="monospaced">[core]
# single character for older versions
commentChar = "#"
# string for newer versions (which will override commentChar
# because it comes later in the file)
commentString = "//"</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.filesRefLockTimeout
</term>
<listitem>
<simpara>
        The length of time, in milliseconds, to retry when trying to
        lock an individual reference. Value 0 means not to retry at
        all; -1 means to try indefinitely. Default is 100 (i.e.,
        retry for 100ms).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.packedRefsTimeout
</term>
<listitem>
<simpara>
        The length of time, in milliseconds, to retry when trying to
        lock the <emphasis>packed-refs</emphasis> file. Value 0 means not to retry at
        all; -1 means to try indefinitely. Default is 1000 (i.e.,
        retry for 1 second).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.pager
</term>
<listitem>
<simpara>
        Text viewer for use by Git commands (e.g., <emphasis>less</emphasis>).  The value
        is meant to be interpreted by the shell.  The order of preference
        is the <emphasis>$GIT_PAGER</emphasis> environment variable, then <emphasis>core.pager</emphasis>
        configuration, then <emphasis>$PAGER</emphasis>, and then the default chosen at
        compile time (usually <emphasis>less</emphasis>).
</simpara>
<simpara>When the <emphasis>LESS</emphasis> environment variable is unset, Git sets it to <emphasis>FRX</emphasis>
(if <emphasis>LESS</emphasis> environment variable is set, Git does not change it at
all).  If you want to selectively override Git's default setting
for <emphasis>LESS</emphasis>, you can set <emphasis>core.pager</emphasis> to e.g. <emphasis>less -S</emphasis>.  This will
be passed to the shell by Git, which will translate the final
command to <emphasis>LESS=FRX less -S</emphasis>. The environment does not set the
<emphasis>S</emphasis> option but the command line does, instructing less to truncate
long lines. Similarly, setting <emphasis>core.pager</emphasis> to <emphasis>less -+F</emphasis> will
deactivate the <emphasis>F</emphasis> option specified by the environment from the
command-line, deactivating the "quit if one screen" behavior of
<emphasis>less</emphasis>.  One can specifically activate some flags for particular
commands: for example, setting <emphasis>pager.blame</emphasis> to <emphasis>less -S</emphasis> enables
line truncation only for <emphasis>git blame</emphasis>.</simpara>
<simpara>Likewise, when the <emphasis>LV</emphasis> environment variable is unset, Git sets it
to <emphasis>-c</emphasis>.  You can override this setting by exporting <emphasis>LV</emphasis> with
another value or setting <emphasis>core.pager</emphasis> to <emphasis>lv +c</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.whitespace
</term>
<listitem>
<simpara>
        A comma separated list of common whitespace problems to
        notice.  <emphasis>git diff</emphasis> will use <emphasis>color.diff.whitespace</emphasis> to
        highlight them, and <emphasis>git apply --whitespace=error</emphasis> will
        consider them as errors.  You can prefix <emphasis>-</emphasis> to disable
        any of them (e.g. <emphasis>-trailing-space</emphasis>):
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>blank-at-eol</emphasis> treats trailing whitespaces at the end of the line
  as an error (enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>space-before-tab</emphasis> treats a space character that appears immediately
  before a tab character in the initial indent part of the line as an
  error (enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>indent-with-non-tab</emphasis> treats a line that is indented with space
  characters instead of the equivalent tabs as an error (not enabled by
  default).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>tab-in-indent</emphasis> treats a tab character in the initial indent part of
  the line as an error (not enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>blank-at-eof</emphasis> treats blank lines added at the end of file as an error
  (enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>trailing-space</emphasis> is a short-hand to cover both <emphasis>blank-at-eol</emphasis> and
  <emphasis>blank-at-eof</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>cr-at-eol</emphasis> treats a carriage-return at the end of line as
  part of the line terminator, i.e. with it, <emphasis>trailing-space</emphasis>
  does not trigger if the character before such a carriage-return
  is not a whitespace (not enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>tabwidth=&lt;n&gt;</emphasis> tells how many character positions a tab occupies; this
  is relevant for <emphasis>indent-with-non-tab</emphasis> and when Git fixes <emphasis>tab-in-indent</emphasis>
  errors. The default tab width is 8. Allowed values are 1 to 63.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fsync
</term>
<listitem>
<simpara>
        A comma-separated list of components of the repository that
        should be hardened via the core.fsyncMethod when created or
        modified.  You can disable hardening of any component by
        prefixing it with a <emphasis>-</emphasis>.  Items that are not hardened may be
        lost in the event of an unclean system shutdown. Unless you
        have special requirements, it is recommended that you leave
        this option empty or pick one of <emphasis>committed</emphasis>, <emphasis>added</emphasis>,
        or <emphasis>all</emphasis>.
</simpara>
<simpara>When this configuration is encountered, the set of components starts with
the platform default value, disabled components are removed, and additional
components are added. <emphasis>none</emphasis> resets the state so that the platform default
is ignored.</simpara>
<simpara>The empty string resets the fsync configuration to the platform
default. The default on most platforms is equivalent to
<emphasis>core.fsync=committed,-loose-object</emphasis>, which has good performance,
but risks losing recent work in the event of an unclean system shutdown.</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>none</emphasis> clears the set of fsynced components.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>loose-object</emphasis> hardens objects added to the repo in loose-object form.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>pack</emphasis> hardens objects added to the repo in packfile form.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>pack-metadata</emphasis> hardens packfile bitmaps and indexes.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>commit-graph</emphasis> hardens the commit-graph file.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>index</emphasis> hardens the index when it is modified.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>objects</emphasis> is an aggregate option that is equivalent to
  <emphasis>loose-object,pack</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>reference</emphasis> hardens references modified in the repo.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>derived-metadata</emphasis> is an aggregate option that is equivalent to
  <emphasis>pack-metadata,commit-graph</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>committed</emphasis> is an aggregate option that is currently equivalent to
  <emphasis>objects</emphasis>. This mode sacrifices some performance to ensure that work
  that is committed to the repository with <emphasis>git commit</emphasis> or similar commands
  is hardened.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>added</emphasis> is an aggregate option that is currently equivalent to
  <emphasis>committed,index</emphasis>. This mode sacrifices additional performance to
  ensure that the results of commands like <emphasis>git add</emphasis> and similar operations
  are hardened.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>all</emphasis> is an aggregate option that syncs all individual components above.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fsyncMethod
</term>
<listitem>
<simpara>
        A value indicating the strategy Git will use to harden repository data
        using fsync and related primitives.
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>fsync</emphasis> uses the fsync() system call or platform equivalents.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>writeout-only</emphasis> issues pagecache writeback requests, but depending on the
  filesystem and storage hardware, data added to the repository may not be
  durable in the event of a system crash. This is the default mode on macOS.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>batch</emphasis> enables a mode that uses writeout-only flushes to stage multiple
  updates in the disk writeback cache and then does a single full fsync of
  a dummy file to trigger the disk cache flush at the end of the operation.
</simpara>
<simpara>Currently <emphasis>batch</emphasis> mode only applies to loose-object files. Other repository
data is made durable as if <emphasis>fsync</emphasis> was specified. This mode is expected to
be as safe as <emphasis>fsync</emphasis> on macOS for repos stored on HFS+ or APFS filesystems
and on Windows for repos stored on NTFS or ReFS filesystems.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fsyncObjectFiles
</term>
<listitem>
<simpara>
        This boolean will enable <emphasis>fsync()</emphasis> when writing object files.
        This setting is deprecated. Use core.fsync instead.
</simpara>
<simpara>This setting affects data added to the Git repository in loose-object
form. When set to true, Git will issue an fsync or similar system call
to flush caches so that loose-objects remain consistent in the face
of a unclean system shutdown.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.preloadIndex
</term>
<listitem>
<simpara>
        Enable parallel index preload for operations like <emphasis>git diff</emphasis>
</simpara>
<simpara>This can speed up operations like <emphasis>git diff</emphasis> and <emphasis>git status</emphasis> especially
on filesystems like NFS that have weak caching semantics and thus
relatively high IO latencies.  When enabled, Git will do the
index comparison to the filesystem data in parallel, allowing
overlapping IO's.  Defaults to true.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.unsetenvvars
</term>
<listitem>
<simpara>
        Windows-only: comma-separated list of environment variables'
        names that need to be unset before spawning any other process.
        Defaults to <emphasis>PERL5LIB</emphasis> to account for the fact that Git for
        Windows insists on using its own Perl interpreter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.restrictinheritedhandles
</term>
<listitem>
<simpara>
        Windows-only: override whether spawned processes inherit only standard
        file handles (<emphasis>stdin</emphasis>, <emphasis>stdout</emphasis> and <emphasis>stderr</emphasis>) or all handles. Can be
        <emphasis>auto</emphasis>, <emphasis>true</emphasis> or <emphasis>false</emphasis>. Defaults to <emphasis>auto</emphasis>, which means <emphasis>true</emphasis> on
        Windows 7 and later, and <emphasis>false</emphasis> on older Windows versions.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.createObject
</term>
<listitem>
<simpara>
        You can set this to <emphasis>link</emphasis>, in which case a hardlink followed by
        a delete of the source are used to make sure that object creation
        will not overwrite existing objects.
</simpara>
<simpara>On some file system/operating system combinations, this is unreliable.
Set this config setting to <emphasis>rename</emphasis> there; however, this will remove the
check that makes sure that existing object files will not get overwritten.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.notesRef
</term>
<listitem>
<simpara>
        When showing commit messages, also show notes which are stored in
        the given ref.  The ref must be fully qualified.  If the given
        ref does not exist, it is not an error but means that no
        notes should be printed.
</simpara>
<simpara>This setting defaults to "refs/notes/commits", and it can be overridden by
the <emphasis>GIT_NOTES_REF</emphasis> environment variable.  See <xref linkend="git-notes(1)" />.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.commitGraph
</term>
<listitem>
<simpara>
        If true, then git will read the commit-graph file (if it exists)
        to parse the graph structure of commits. Defaults to true. See
        <xref linkend="git-commit-graph(1)" /> for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.useReplaceRefs
</term>
<listitem>
<simpara>
        If set to <emphasis>false</emphasis>, behave as if the <emphasis>--no-replace-objects</emphasis>
        option was given on the command line. See <xref linkend="git(1)" /> and
        <xref linkend="git-replace(1)" /> for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.multiPackIndex
</term>
<listitem>
<simpara>
        Use the multi-pack-index file to track multiple packfiles using a
        single index. See <xref linkend="git-multi-pack-index(1)" /> for more
        information. Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.sparseCheckout
</term>
<listitem>
<simpara>
        Enable "sparse checkout" feature. See <xref linkend="git-sparse-checkout(1)" />
        for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.sparseCheckoutCone
</term>
<listitem>
<simpara>
        Enables the "cone mode" of the sparse checkout feature. When the
        sparse-checkout file contains a limited set of patterns, this
        mode provides significant performance advantages. The "non-cone
        mode" can be requested to allow specifying more flexible
        patterns by setting this variable to <emphasis>false</emphasis>. See
        <xref linkend="git-sparse-checkout(1)" /> for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.abbrev
</term>
<listitem>
<simpara>
        Set the length object names are abbreviated to.  If
        unspecified or set to "auto", an appropriate value is
        computed based on the approximate number of packed objects
        in your repository, which hopefully is enough for
        abbreviated object names to stay unique for some time.
        If set to "no", no abbreviation is made and the object names
        are shown in their full length.
        The minimum length is 4.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.maxTreeDepth
</term>
<listitem>
<simpara>
        The maximum depth Git is willing to recurse while traversing a
        tree (e.g., "a/b/cde/f" has a depth of 4). This is a fail-safe
        to allow Git to abort cleanly, and should not generally need to
        be adjusted. When Git is compiled with MSVC, the default is 512.
        Otherwise, the default is 2048.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.helper
</term>
<listitem>
<simpara>
        Specify an external helper to be called when a username or
        password credential is needed; the helper may consult external
        storage to avoid prompting the user for the credentials. This is
        normally the name of a credential helper with possible
        arguments, but may also be an absolute path with arguments or, if
        preceded by <emphasis>!</emphasis>, shell commands.
</simpara>
<simpara>Note that multiple helpers may be defined. See <xref linkend="gitcredentials(7)" />
for details and examples.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.interactive
</term>
<listitem>
<simpara>
        By default, Git and any configured credential helpers will ask for
        user input when new credentials are required. Many of these helpers
        will succeed based on stored credentials if those credentials are
        still valid. To avoid the possibility of user interactivity from
        Git, set <emphasis>credential.interactive=false</emphasis>. Some credential helpers
        respect this option as well.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.useHttpPath
</term>
<listitem>
<simpara>
        When acquiring credentials, consider the "path" component of an http
        or https URL to be important. Defaults to false. See
        <xref linkend="gitcredentials(7)" /> for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.sanitizePrompt
</term>
<listitem>
<simpara>
        By default, user names and hosts that are shown as part of the
        password prompt are not allowed to contain control characters (they
        will be URL-encoded by default). Configure this setting to <emphasis>false</emphasis> to
        override that behavior.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.protectProtocol
</term>
<listitem>
<simpara>
        By default, Carriage Return characters are not allowed in the protocol
        that is used when Git talks to a credential helper. This setting allows
        users to override this default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.username
</term>
<listitem>
<simpara>
        If no username is set for a network authentication, use this username
        by default. See credential.&lt;context&gt;.* below, and
        <xref linkend="gitcredentials(7)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.&lt;url&gt;.*
</term>
<listitem>
<simpara>
        Any of the credential.* options above can be applied selectively to
        some credentials. For example, "credential.https://example.com.username"
        would set the default username only for https connections to
        example.com. See <xref linkend="gitcredentials(7)" /> for details on how URLs are
        matched.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credentialCache.ignoreSIGHUP
</term>
<listitem>
<simpara>
        Tell git-credential-cache--daemon to ignore SIGHUP, instead of quitting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credentialStore.lockTimeoutMS
</term>
<listitem>
<simpara>
        The length of time, in milliseconds, for git-credential-store to retry
        when trying to lock the credentials file. A value of 0 means not to retry at
        all; -1 means to try indefinitely. Default is 1000 (i.e., retry for
        1s).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.autoRefreshIndex</emphasis>
</term>
<listitem>
<simpara>
        When using <emphasis>git diff</emphasis> to compare with work tree
        files, do not consider stat-only changes as changed.
        Instead, silently run <emphasis>git update-index --refresh</emphasis> to
        update the cached stat information for paths whose
        contents in the work tree match the contents in the
        index.  This option defaults to <emphasis>true</emphasis>.  Note that this
        affects only <emphasis>git diff</emphasis> Porcelain, and not lower level
        <emphasis>diff</emphasis> commands such as <emphasis>git diff-files</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.dirstat</emphasis>
</term>
<listitem>
<simpara>
        A comma separated list of <emphasis>--dirstat</emphasis> parameters specifying the
        default behavior of the <emphasis>--dirstat</emphasis> option to <xref linkend="git-diff(1)" />
        and friends.
        The defaults can be overridden on the command line
        (using <emphasis>--dirstat=&lt;param&gt;,...</emphasis>). The fallback defaults
        (when not changed by <emphasis>diff.dirstat</emphasis>) are <emphasis>changes,noncumulative,3</emphasis>.
        The following parameters are available:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>changes</emphasis>
</term>
<listitem>
<simpara>
        Compute the dirstat numbers by counting the lines that have been
        removed from the source, or added to the destination. This ignores
        the amount of pure code movements within a file.  In other words,
        rearranging lines in a file is not counted as much as other changes.
        This is the default behavior when no parameter is given.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>lines</emphasis>
</term>
<listitem>
<simpara>
        Compute the dirstat numbers by doing the regular line-based diff
        analysis, and summing the removed/added line counts. (For binary
        files, count 64-byte chunks instead, since binary files have no
        natural concept of lines). This is a more expensive <emphasis>--dirstat</emphasis>
        behavior than the <emphasis>changes</emphasis> behavior, but it does count rearranged
        lines within a file as much as other changes. The resulting output
        is consistent with what you get from the other <emphasis>--*stat</emphasis> options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>files</emphasis>
</term>
<listitem>
<simpara>
        Compute the dirstat numbers by counting the number of files changed.
        Each changed file counts equally in the dirstat analysis. This is
        the computationally cheapest <emphasis>--dirstat</emphasis> behavior, since it does
        not have to look at the file contents at all.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>cumulative</emphasis>
</term>
<listitem>
<simpara>
        Count changes in a child directory for the parent directory as well.
        Note that when using <emphasis>cumulative</emphasis>, the sum of the percentages
        reported may exceed 100%. The default (non-cumulative) behavior can
        be specified with the <emphasis>noncumulative</emphasis> parameter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>&lt;limit&gt;</emphasis>
</term>
<listitem>
<simpara>
        An integer parameter specifies a cut-off percent (3% by default).
        Directories contributing less than this percentage of the changes
        are not shown in the output.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Example: The following will count changed files, while ignoring
directories with less than 10% of the total amount of changed files,
and accumulating child directory counts in the parent directories:
<emphasis>files,10,cumulative</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.statNameWidth</emphasis>
</term>
<listitem>
<simpara>
        Limit the width of the filename part in <emphasis>--stat</emphasis> output. If set, applies
        to all commands generating <emphasis>--stat</emphasis> output except <emphasis>format-patch</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.statGraphWidth</emphasis>
</term>
<listitem>
<simpara>
        Limit the width of the graph part in <emphasis>--stat</emphasis> output. If set, applies
        to all commands generating <emphasis>--stat</emphasis> output except <emphasis>format-patch</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.context</emphasis>
</term>
<listitem>
<simpara>
        Generate diffs with <emphasis>&lt;n&gt;</emphasis> lines of context instead of the default
        of 3. This value is overridden by the <emphasis>-U</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.interHunkContext</emphasis>
</term>
<listitem>
<simpara>
        Show the context between diff hunks, up to the specified number
        of lines, thereby fusing the hunks that are close to each other.
        This value serves as the default for the <emphasis>--inter-hunk-context</emphasis>
        command line option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.external</emphasis>
</term>
<listitem>
<simpara>
        If this config variable is set, diff generation is not
        performed using the internal diff machinery, but using the
        given command.  Can be overridden with the <emphasis>GIT_EXTERNAL_DIFF</emphasis>
        environment variable.  The command is called with parameters
        as described under "git Diffs" in <xref linkend="git(1)" />.  Note: if
        you want to use an external diff program only on a subset of
        your files, you might want to use <xref linkend="gitattributes(5)" /> instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.trustExitCode</emphasis>
</term>
<listitem>
<simpara>
        If this boolean value is set to <emphasis>true</emphasis> then the
        <emphasis>diff.external</emphasis> command is expected to return exit code
        0 if it considers the input files to be equal or 1 if it
        considers them to be different, like <emphasis>diff</emphasis>(1).
        If it is set to <emphasis>false</emphasis>, which is the default, then the command
        is expected to return exit code <emphasis>0</emphasis> regardless of equality.
        Any other exit code causes Git to report a fatal error.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.ignoreSubmodules</emphasis>
</term>
<listitem>
<simpara>
        Sets the default value of <emphasis>--ignore-submodules</emphasis>. Note that this
        affects only <emphasis>git diff</emphasis> Porcelain, and not lower level <emphasis>diff</emphasis>
        commands such as <emphasis>git diff-files</emphasis>. <emphasis>git checkout</emphasis>
        and <emphasis>git switch</emphasis> also honor
        this setting when reporting uncommitted changes. Setting it to
        <emphasis>all</emphasis> disables the submodule summary normally shown by <emphasis>git commit</emphasis>
        and <emphasis>git status</emphasis> when <emphasis>status.submoduleSummary</emphasis> is set unless it is
        overridden by using the <emphasis>--ignore-submodules</emphasis> command-line option.
        The <emphasis>git submodule</emphasis> commands are not affected by this setting.
        By default this is set to untracked so that any untracked
        submodules are ignored.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.mnemonicPrefix</emphasis>
</term>
<listitem>
<simpara>
        If set, <emphasis>git diff</emphasis> uses a prefix pair that is different from the
        standard <emphasis>a/</emphasis> and <emphasis>b/</emphasis> depending on what is being compared.  When
        this configuration is in effect, reverse diff output also swaps
        the order of the prefixes:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>git diff</emphasis>
</term>
<listitem>
<simpara>
        compares the (i)ndex and the (w)ork tree;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git diff HEAD</emphasis>
</term>
<listitem>
<simpara>
         compares a (c)ommit and the (w)ork tree;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git diff --cached</emphasis>
</term>
<listitem>
<simpara>
        compares a (c)ommit and the (i)ndex;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git diff HEAD:&lt;file1&gt; &lt;file2&gt;</emphasis>
</term>
<listitem>
<simpara>
        compares an (o)bject and a (w)ork tree entity;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git diff --no-index &lt;a&gt; &lt;b&gt;</emphasis>
</term>
<listitem>
<simpara>
        compares two non-git things <emphasis>&lt;a&gt;</emphasis> and <emphasis>&lt;b&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.noPrefix</emphasis>
</term>
<listitem>
<simpara>
        If set, <emphasis>git diff</emphasis> does not show any source or destination prefix.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.srcPrefix</emphasis>
</term>
<listitem>
<simpara>
        If set, <emphasis>git diff</emphasis> uses this source prefix. Defaults to <emphasis>a/</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.dstPrefix</emphasis>
</term>
<listitem>
<simpara>
        If set, <emphasis>git diff</emphasis> uses this destination prefix. Defaults to <emphasis>b/</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.relative</emphasis>
</term>
<listitem>
<simpara>
        If set to <emphasis>true</emphasis>, <emphasis>git diff</emphasis> does not show changes outside of the directory
        and show pathnames relative to the current directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.orderFile</emphasis>
</term>
<listitem>
<simpara>
        File indicating how to order files within a diff.
        See the <emphasis>-O</emphasis> option to <xref linkend="git-diff(1)" /> for details.
        If <emphasis>diff.orderFile</emphasis> is a relative pathname, it is treated as
        relative to the top of the working tree.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.renameLimit</emphasis>
</term>
<listitem>
<simpara>
        The number of files to consider in the exhaustive portion of
        copy/rename detection; equivalent to the <emphasis>git diff</emphasis> option
        <emphasis>-l</emphasis>.  If not set, the default value is currently 1000.  This
        setting has no effect if rename detection is turned off.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.renames</emphasis>
</term>
<listitem>
<simpara>
        Whether and how Git detects renames.  If set to <emphasis>false</emphasis>,
        rename detection is disabled. If set to <emphasis>true</emphasis>, basic rename
        detection is enabled.  If set to <emphasis>copies</emphasis> or <emphasis>copy</emphasis>, Git will
        detect copies, as well.  Defaults to <emphasis>true</emphasis>.  Note that this
        affects only <emphasis>git diff</emphasis> Porcelain like <xref linkend="git-diff(1)" /> and
        <xref linkend="git-log(1)" />, and not lower level commands such as
        <xref linkend="git-diff-files(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.suppressBlankEmpty</emphasis>
</term>
<listitem>
<simpara>
        A boolean to inhibit the standard behavior of printing a space
        before each empty output line. Defaults to <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.submodule</emphasis>
</term>
<listitem>
<simpara>
        Specify the format in which differences in submodules are
        shown.  The <emphasis>short</emphasis> format just shows the names of the commits
        at the beginning and end of the range. The <emphasis>log</emphasis> format lists
        the commits in the range like <xref linkend="git-submodule(1)" /> <emphasis>summary</emphasis>
        does. The <emphasis>diff</emphasis> format shows an inline diff of the changed
        contents of the submodule. Defaults to <emphasis>short</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.wordRegex</emphasis>
</term>
<listitem>
<simpara>
        A POSIX Extended Regular Expression used to determine what is a "word"
        when performing word-by-word difference calculations.  Character
        sequences that match the regular expression are "words", all other
        characters are <emphasis role="strong">ignorable</emphasis> whitespace.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.&lt;driver&gt;.command</emphasis>
</term>
<listitem>
<simpara>
        The custom diff driver command.  See <xref linkend="gitattributes(5)" />
        for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.&lt;driver&gt;.trustExitCode</emphasis>
</term>
<listitem>
<simpara>
        If this boolean value is set to <emphasis>true</emphasis> then the
        <emphasis>diff.&lt;driver&gt;.command</emphasis> command is expected to return exit code
        0 if it considers the input files to be equal or 1 if it
        considers them to be different, like <emphasis>diff</emphasis>(1).
        If it is set to <emphasis>false</emphasis>, which is the default, then the command
        is expected to return exit code 0 regardless of equality.
        Any other exit code causes Git to report a fatal error.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.&lt;driver&gt;.xfuncname</emphasis>
</term>
<listitem>
<simpara>
        The regular expression that the diff driver should use to
        recognize the hunk header.  A built-in pattern may also be used.
        See <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.&lt;driver&gt;.binary</emphasis>
</term>
<listitem>
<simpara>
        Set this option to <emphasis>true</emphasis> to make the diff driver treat files as
        binary.  See <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.&lt;driver&gt;.textconv</emphasis>
</term>
<listitem>
<simpara>
        The command that the diff driver should call to generate the
        text-converted version of a file.  The result of the
        conversion is used to generate a human-readable diff.  See
        <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.&lt;driver&gt;.wordRegex</emphasis>
</term>
<listitem>
<simpara>
        The regular expression that the diff driver should use to
        split words in a line.  See <xref linkend="gitattributes(5)" /> for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.&lt;driver&gt;.cachetextconv</emphasis>
</term>
<listitem>
<simpara>
        Set this option to <emphasis>true</emphasis> to make the diff driver cache the text
        conversion outputs.  See <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.indentHeuristic</emphasis>
</term>
<listitem>
<simpara>
        Set this option to <emphasis>false</emphasis> to disable the default heuristics
        that shift diff hunk boundaries to make patches easier to read.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.algorithm</emphasis>
</term>
<listitem>
<simpara>
        Choose a diff algorithm.  The variants are as follows:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>default</emphasis>
</term>
<term>
<emphasis>myers</emphasis>
</term>
<listitem>
<simpara>
        The basic greedy diff algorithm. Currently, this is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>minimal</emphasis>
</term>
<listitem>
<simpara>
        Spend extra time to make sure the smallest possible diff is
        produced.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>patience</emphasis>
</term>
<listitem>
<simpara>
        Use "patience diff" algorithm when generating patches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>histogram</emphasis>
</term>
<listitem>
<simpara>
        This algorithm extends the patience algorithm to "support
        low-occurrence common elements".
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.wsErrorHighlight</emphasis>
</term>
<listitem>
<simpara>
        Highlight whitespace errors in the <emphasis>context</emphasis>, <emphasis>old</emphasis> or <emphasis>new</emphasis>
        lines of the diff.  Multiple values are separated by comma,
        <emphasis>none</emphasis> resets previous values, <emphasis>default</emphasis> reset the list to
        <emphasis>new</emphasis> and <emphasis>all</emphasis> is a shorthand for <emphasis>old,new,context</emphasis>.  The
        whitespace errors are colored with <emphasis>color.diff.whitespace</emphasis>.
        The command line option <emphasis>--ws-error-highlight=&lt;kind&gt;</emphasis>
        overrides this setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.colorMoved</emphasis>
</term>
<listitem>
<simpara>
        If set to either a valid <emphasis>&lt;mode&gt;</emphasis> or a <emphasis>true</emphasis> value, moved lines
        in a diff are colored differently.
        For details of valid modes see <emphasis>--color-moved</emphasis> in <xref linkend="git-diff(1)" />.
        If simply set to <emphasis>true</emphasis> the default color mode will be used. When
        set to <emphasis>false</emphasis>, moved lines are not colored.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff.colorMovedWS</emphasis>
</term>
<listitem>
<simpara>
        When moved lines are colored using e.g. the <emphasis>diff.colorMoved</emphasis> setting,
        this option controls the mode how spaces are treated.
        For details of valid modes see <emphasis>--color-moved-ws</emphasis> in <xref linkend="git-diff(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.tool
</term>
<listitem>
<simpara>
        Controls which diff tool is used by <xref linkend="git-difftool(1)" />.
        This variable overrides the value configured in <emphasis>merge.tool</emphasis>.
        The list below shows the valid built-in values.
        Any other value is treated as a custom diff tool and requires
        that a corresponding difftool.&lt;tool&gt;.cmd variable is defined.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.guitool
</term>
<listitem>
<simpara>
        Controls which diff tool is used by <xref linkend="git-difftool(1)" /> when
        the -g/--gui flag is specified. This variable overrides the value
        configured in <emphasis>merge.guitool</emphasis>. The list below shows the valid
        built-in values. Any other value is treated as a custom diff tool
        and requires that a corresponding difftool.&lt;guitool&gt;.cmd variable
        is defined.
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>araxis</emphasis>
</term>
<listitem>
<simpara>
Use Araxis Merge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>bc</emphasis>
</term>
<listitem>
<simpara>
Use Beyond Compare (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>bc3</emphasis>
</term>
<listitem>
<simpara>
Use Beyond Compare (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>bc4</emphasis>
</term>
<listitem>
<simpara>
Use Beyond Compare (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>codecompare</emphasis>
</term>
<listitem>
<simpara>
Use Code Compare (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>deltawalker</emphasis>
</term>
<listitem>
<simpara>
Use DeltaWalker (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diffmerge</emphasis>
</term>
<listitem>
<simpara>
Use DiffMerge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diffuse</emphasis>
</term>
<listitem>
<simpara>
Use Diffuse (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>ecmerge</emphasis>
</term>
<listitem>
<simpara>
Use ECMerge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>emerge</emphasis>
</term>
<listitem>
<simpara>
Use Emacs' Emerge
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>examdiff</emphasis>
</term>
<listitem>
<simpara>
Use ExamDiff Pro (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>guiffy</emphasis>
</term>
<listitem>
<simpara>
Use Guiffy's Diff Tool (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>gvimdiff</emphasis>
</term>
<listitem>
<simpara>
Use gVim (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>kdiff3</emphasis>
</term>
<listitem>
<simpara>
Use KDiff3 (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>kompare</emphasis>
</term>
<listitem>
<simpara>
Use Kompare (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>meld</emphasis>
</term>
<listitem>
<simpara>
Use Meld (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>nvimdiff</emphasis>
</term>
<listitem>
<simpara>
Use Neovim
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>opendiff</emphasis>
</term>
<listitem>
<simpara>
Use FileMerge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>p4merge</emphasis>
</term>
<listitem>
<simpara>
Use HelixCore P4Merge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>smerge</emphasis>
</term>
<listitem>
<simpara>
Use Sublime Merge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>tkdiff</emphasis>
</term>
<listitem>
<simpara>
Use TkDiff (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>vimdiff</emphasis>
</term>
<listitem>
<simpara>
Use Vim
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>vscode</emphasis>
</term>
<listitem>
<simpara>
Use Visual Studio Code (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>winmerge</emphasis>
</term>
<listitem>
<simpara>
Use WinMerge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>xxdiff</emphasis>
</term>
<listitem>
<simpara>
Use xxdiff (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
difftool.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified diff tool.
        The specified command is evaluated in shell with the following
        variables available:  <emphasis>LOCAL</emphasis> is set to the name of the temporary
        file containing the contents of the diff pre-image and <emphasis>REMOTE</emphasis>
        is set to the name of the temporary file containing the contents
        of the diff post-image.
</simpara>
<simpara>See the <emphasis>--tool=&lt;tool&gt;</emphasis> option in <xref linkend="git-difftool(1)" /> for more details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
difftool.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool.  This is useful in case
        your tool is not in the PATH.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
difftool.trustExitCode
</term>
<listitem>
<simpara>
        Exit difftool if the invoked diff tool returns a non-zero exit status.
</simpara>
<simpara>See the <emphasis>--trust-exit-code</emphasis> option in <xref linkend="git-difftool(1)" /> for more details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
difftool.prompt
</term>
<listitem>
<simpara>
        Prompt before each invocation of the diff tool.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
difftool.guiDefault
</term>
<listitem>
<simpara>
        Set <emphasis>true</emphasis> to use the <emphasis>diff.guitool</emphasis> by default (equivalent to specifying
        the <emphasis>--gui</emphasis> argument), or <emphasis>auto</emphasis> to select <emphasis>diff.guitool</emphasis> or <emphasis>diff.tool</emphasis>
        depending on the presence of a <emphasis>DISPLAY</emphasis> environment variable value. The
        default is <emphasis>false</emphasis>, where the <emphasis>--gui</emphasis> argument must be provided
        explicitly for the <emphasis>diff.guitool</emphasis> to be used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
extensions.*
</term>
<listitem>
<simpara>
        Unless otherwise stated, is an error to specify an extension if
        <emphasis>core.repositoryFormatVersion</emphasis> is not <emphasis>1</emphasis>. See
        <xref linkend="gitrepository-layout(5)" />.
</simpara>
<variablelist>
<varlistentry>
<term>
compatObjectFormat
</term>
<listitem>
<simpara>
        Specify a compatibility hash algorithm to use.  The acceptable values
        are <emphasis>sha1</emphasis> and <emphasis>sha256</emphasis>.  The value specified must be different from the
        value of <emphasis>extensions.objectFormat</emphasis>.  This allows client level
        interoperability between git repositories whose objectFormat matches
        this compatObjectFormat.  In particular when fully implemented the
        pushes and pulls from a repository in whose objectFormat matches
        compatObjectFormat.  As well as being able to use oids encoded in
        compatObjectFormat in addition to oids encoded with objectFormat to
        locally specify objects.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
noop
</term>
<listitem>
<simpara>
        This extension does not change git's behavior at all. It is useful only
        for testing format-1 compatibility.
</simpara>
<simpara>For historical reasons, this extension is respected regardless of the
<emphasis>core.repositoryFormatVersion</emphasis> setting.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
noop-v1
</term>
<listitem>
<simpara>
        This extension does not change git's behavior at all. It is useful only
        for testing format-1 compatibility.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
objectFormat
</term>
<listitem>
<simpara>
        Specify the hash algorithm to use.  The acceptable values are <emphasis>sha1</emphasis> and
        <emphasis>sha256</emphasis>.  If not specified, <emphasis>sha1</emphasis> is assumed.
</simpara>
<simpara>Note that this setting should only be set by <xref linkend="git-init(1)" /> or
<xref linkend="git-clone(1)" />.  Trying to change it after initialization will not
work and will produce hard-to-diagnose issues.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
partialClone
</term>
<listitem>
<simpara>
        When enabled, indicates that the repo was created with a partial clone
        (or later performed a partial fetch) and that the remote may have
        omitted sending certain unwanted objects.  Such a remote is called a
        "promisor remote" and it promises that all such omitted objects can
        be fetched from it in the future.
</simpara>
<simpara>The value of this key is the name of the promisor remote.</simpara>
<simpara>For historical reasons, this extension is respected regardless of the
<emphasis>core.repositoryFormatVersion</emphasis> setting.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
preciousObjects
</term>
<listitem>
<simpara>
        If enabled, indicates that objects in the repository MUST NOT be deleted
        (e.g., by <emphasis>git-prune</emphasis> or <emphasis>git repack -d</emphasis>).
</simpara>
<simpara>For historical reasons, this extension is respected regardless of the
<emphasis>core.repositoryFormatVersion</emphasis> setting.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
refStorage
</term>
<listitem>
<simpara>
        Specify the ref storage format to use. The acceptable values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>files</emphasis> for loose files with packed-refs. This is the default.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>reftable</emphasis> for the reftable format. This format is experimental and its
  internals are subject to change.
</simpara>
</listitem>
</itemizedlist>
<simpara>Note that this setting should only be set by <xref linkend="git-init(1)" /> or
<xref linkend="git-clone(1)" />. Trying to change it after initialization will not
work and will produce hard-to-diagnose issues.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
relativeWorktrees
</term>
<listitem>
<simpara>
        If enabled, indicates at least one worktree has been linked with
        relative paths. Automatically set if a worktree has been created or
        repaired with either the <emphasis>--relative-paths</emphasis> option or with the
        <emphasis>worktree.useRelativePaths</emphasis> config set to <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
worktreeConfig
</term>
<listitem>
<simpara>
        If enabled, then worktrees will load config settings from the
        <emphasis>$GIT_DIR/config.worktree</emphasis> file in addition to the
        <emphasis>$GIT_COMMON_DIR/config</emphasis> file. Note that <emphasis>$GIT_COMMON_DIR</emphasis> and
        <emphasis>$GIT_DIR</emphasis> are the same for the main working tree, while other
        working trees have <emphasis>$GIT_DIR</emphasis> equal to
        <emphasis>$GIT_COMMON_DIR/worktrees/&lt;id&gt;/</emphasis>. The settings in the
        <emphasis>config.worktree</emphasis> file will override settings from any other
        config files.
</simpara>
<simpara>When enabling this extension, you must be careful to move
certain values from the common config file to the main working tree's
<emphasis>config.worktree</emphasis> file, if present:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>core.worktree</emphasis> must be moved from <emphasis>$GIT_COMMON_DIR/config</emphasis> to
  <emphasis>$GIT_COMMON_DIR/config.worktree</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
If <emphasis>core.bare</emphasis> is true, then it must be moved from <emphasis>$GIT_COMMON_DIR/config</emphasis>
  to <emphasis>$GIT_COMMON_DIR/config.worktree</emphasis>.
</simpara>
</listitem>
</itemizedlist>
<simpara>It may also be beneficial to adjust the locations of <emphasis>core.sparseCheckout</emphasis>
and <emphasis>core.sparseCheckoutCone</emphasis> depending on your desire for customizable
sparse-checkout settings for each worktree. By default, the <emphasis>git
sparse-checkout</emphasis> builtin enables this extension, assigns
these config values on a per-worktree basis, and uses the
<emphasis>$GIT_DIR/info/sparse-checkout</emphasis> file to specify the sparsity for each
worktree independently. See <xref linkend="git-sparse-checkout(1)" /> for more
details.</simpara>
<simpara>For historical reasons, this extension is respected regardless of the
<emphasis>core.repositoryFormatVersion</emphasis> setting.</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
fastimport.unpackLimit
</term>
<listitem>
<simpara>
        If the number of objects imported by <xref linkend="git-fast-import(1)" />
        is below this limit, then the objects will be unpacked into
        loose object files.  However, if the number of imported objects
        equals or exceeds this limit, then the pack will be stored as a
        pack.  Storing the pack from a fast-import can make the import
        operation complete faster, especially on slow filesystems.  If
        not set, the value of <emphasis>transfer.unpackLimit</emphasis> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
feature.*
</term>
<listitem>
<simpara>
        The config settings that start with <emphasis>feature.</emphasis> modify the defaults of
        a group of other config settings. These groups are created by the Git
        developer community as recommended defaults and are subject to change.
        In particular, new config options may be added with different defaults.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
feature.experimental
</term>
<listitem>
<simpara>
        Enable config options that are new to Git, and are being considered for
        future defaults. Config settings included here may be added or removed
        with each release, including minor version updates. These settings may
        have unintended interactions since they are so new. Please enable this
        setting if you are interested in providing feedback on experimental
        features. The new default values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>fetch.negotiationAlgorithm=skipping</emphasis> may improve fetch negotiation times by
skipping more commits at a time, reducing the number of round trips.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>pack.useBitmapBoundaryTraversal=true</emphasis> may improve bitmap traversal times by
walking fewer objects.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>pack.allowPackReuse=multi</emphasis> may improve the time it takes to create a pack by
reusing objects from multiple packs instead of just one.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
feature.manyFiles
</term>
<listitem>
<simpara>
        Enable config options that optimize for repos with many files in the
        working directory. With many files, commands such as <emphasis>git status</emphasis> and
        <emphasis>git checkout</emphasis> may be slow and these new defaults improve performance:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>index.skipHash=true</emphasis> speeds up index writes by not computing a trailing
  checksum. Note that this will cause Git versions earlier than 2.13.0 to
  refuse to parse the index and Git versions earlier than 2.40.0 will report
  a corrupted index during <emphasis>git fsck</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>index.version=4</emphasis> enables path-prefix compression in the index.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>core.untrackedCache=true</emphasis> enables the untracked cache. This setting assumes
that mtime is working on your machine.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.recurseSubmodules
</term>
<listitem>
<simpara>
        This option controls whether <emphasis>git fetch</emphasis> (and the underlying fetch
        in <emphasis>git pull</emphasis>) will recursively fetch into populated submodules.
        This option can be set either to a boolean value or to <emphasis>on-demand</emphasis>.
        Setting it to a boolean changes the behavior of fetch and pull to
        recurse unconditionally into submodules when set to true or to not
        recurse at all when set to false. When set to <emphasis>on-demand</emphasis>, fetch and
        pull will only recurse into a populated submodule when its
        superproject retrieves a commit that updates the submodule's
        reference.
        Defaults to <emphasis>on-demand</emphasis>, or to the value of <emphasis>submodule.recurse</emphasis> if set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.fsckObjects
</term>
<listitem>
<simpara>
        If it is set to true, git-fetch-pack will check all fetched
        objects. See <emphasis>transfer.fsckObjects</emphasis> for what's
        checked. Defaults to false. If not set, the value of
        <emphasis>transfer.fsckObjects</emphasis> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.fsck.&lt;msg-id&gt;
</term>
<listitem>
<simpara>
        Acts like <emphasis>fsck.&lt;msg-id&gt;</emphasis>, but is used by
        <xref linkend="git-fetch-pack(1)" /> instead of <xref linkend="git-fsck(1)" />. See
        the <emphasis>fsck.&lt;msg-id&gt;</emphasis> documentation for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.fsck.skipList
</term>
<listitem>
<simpara>
        Acts like <emphasis>fsck.skipList</emphasis>, but is used by
        <xref linkend="git-fetch-pack(1)" /> instead of <xref linkend="git-fsck(1)" />. See
        the <emphasis>fsck.skipList</emphasis> documentation for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.unpackLimit
</term>
<listitem>
<simpara>
        If the number of objects fetched over the Git native
        transfer is below this
        limit, then the objects will be unpacked into loose object
        files. However if the number of received objects equals or
        exceeds this limit then the received pack will be stored as
        a pack, after adding any missing delta bases.  Storing the
        pack from a push can make the push operation complete faster,
        especially on slow filesystems.  If not set, the value of
        <emphasis>transfer.unpackLimit</emphasis> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.prune
</term>
<listitem>
<simpara>
        If true, fetch will automatically behave as if the <emphasis>--prune</emphasis>
        option was given on the command line.  See also <emphasis>remote.&lt;name&gt;.prune</emphasis>
        and the PRUNING section of <xref linkend="git-fetch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.pruneTags
</term>
<listitem>
<simpara>
        If true, fetch will automatically behave as if the
        <emphasis>refs/tags/*:refs/tags/*</emphasis> refspec was provided when pruning,
        if not set already. This allows for setting both this option
        and <emphasis>fetch.prune</emphasis> to maintain a 1=1 mapping to upstream
        refs. See also <emphasis>remote.&lt;name&gt;.pruneTags</emphasis> and the PRUNING
        section of <xref linkend="git-fetch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.all
</term>
<listitem>
<simpara>
        If true, fetch will attempt to update all available remotes.
        This behavior can be overridden by passing <emphasis>--no-all</emphasis> or by
        explicitly specifying one or more remote(s) to fetch from.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.output
</term>
<listitem>
<simpara>
        Control how ref update status is printed. Valid values are
        <emphasis>full</emphasis> and <emphasis>compact</emphasis>. Default value is <emphasis>full</emphasis>. See the
        OUTPUT section in <xref linkend="git-fetch(1)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.negotiationAlgorithm
</term>
<listitem>
<simpara>
        Control how information about the commits in the local repository
        is sent when negotiating the contents of the packfile to be sent by
        the server.  Set to "consecutive" to use an algorithm that walks
        over consecutive commits checking each one.  Set to "skipping" to
        use an algorithm that skips commits in an effort to converge
        faster, but may result in a larger-than-necessary packfile; or set
        to "noop" to not send any information at all, which will almost
        certainly result in a larger-than-necessary packfile, but will skip
        the negotiation step.  Set to "default" to override settings made
        previously and use the default behaviour.  The default is normally
        "consecutive", but if <emphasis>feature.experimental</emphasis> is true, then the
        default is "skipping".  Unknown values will cause <emphasis>git fetch</emphasis> to
        error out.
</simpara>
<simpara>See also the <emphasis>--negotiate-only</emphasis> and <emphasis>--negotiation-tip</emphasis> options to
<xref linkend="git-fetch(1)" />.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.showForcedUpdates
</term>
<listitem>
<simpara>
        Set to false to enable <emphasis>--no-show-forced-updates</emphasis> in
        <xref linkend="git-fetch(1)" /> and <xref linkend="git-pull(1)" /> commands.
        Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.parallel
</term>
<listitem>
<simpara>
        Specifies the maximal number of fetch operations to be run in parallel
        at a time (submodules, or remotes when the <emphasis>--multiple</emphasis> option of
        <xref linkend="git-fetch(1)" /> is in effect).
</simpara>
<simpara>A value of 0 will give some reasonable default. If unset, it defaults to 1.</simpara>
<simpara>For submodules, this setting can be overridden using the <emphasis>submodule.fetchJobs</emphasis>
config setting.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.writeCommitGraph
</term>
<listitem>
<simpara>
        Set to true to write a commit-graph after every <emphasis>git fetch</emphasis> command
        that downloads a pack-file from a remote. Using the <emphasis>--split</emphasis> option,
        most executions will create a very small commit-graph file on top of
        the existing commit-graph file(s). Occasionally, these files will
        merge and the write may take longer. Having an updated commit-graph
        file helps performance of many Git commands, including <emphasis>git merge-base</emphasis>,
        <emphasis>git push -f</emphasis>, and <emphasis>git log --graph</emphasis>. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.bundleURI
</term>
<listitem>
<simpara>
        This value stores a URI for downloading Git object data from a bundle
        URI before performing an incremental fetch from the origin Git server.
        This is similar to how the <emphasis>--bundle-uri</emphasis> option behaves in
        <xref linkend="git-clone(1)" />. <emphasis>git clone --bundle-uri</emphasis> will set the
        <emphasis>fetch.bundleURI</emphasis> value if the supplied bundle URI contains a bundle
        list that is organized for incremental fetches.
</simpara>
<simpara>If you modify this value and your repository has a <emphasis>fetch.bundleCreationToken</emphasis>
value, then remove that <emphasis>fetch.bundleCreationToken</emphasis> value before fetching from
the new bundle URI.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.bundleCreationToken
</term>
<listitem>
<simpara>
        When using <emphasis>fetch.bundleURI</emphasis> to fetch incrementally from a bundle
        list that uses the "creationToken" heuristic, this config value
        stores the maximum <emphasis>creationToken</emphasis> value of the downloaded bundles.
        This value is used to prevent downloading bundles in the future
        if the advertised <emphasis>creationToken</emphasis> is not strictly larger than this
        value.
</simpara>
<simpara>The creation token values are chosen by the provider serving the specific
bundle URI. If you modify the URI at <emphasis>fetch.bundleURI</emphasis>, then be sure to
remove the value for the <emphasis>fetch.bundleCreationToken</emphasis> value before fetching.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
filter.&lt;driver&gt;.clean
</term>
<listitem>
<simpara>
        The command which is used to convert the content of a worktree
        file to a blob upon checkin.  See <xref linkend="gitattributes(5)" /> for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
filter.&lt;driver&gt;.smudge
</term>
<listitem>
<simpara>
        The command which is used to convert the content of a blob
        object to a worktree file upon checkout.  See
        <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.attach
</term>
<listitem>
<simpara>
        Enable multipart/mixed attachments as the default for
        <emphasis>format-patch</emphasis>.  The value can also be a double quoted string
        which will enable attachments as the default and set the
        value as the boundary.  See the --attach option in
        <xref linkend="git-format-patch(1)" />.  To countermand an earlier
        value, set it to an empty string.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.from
</term>
<listitem>
<simpara>
        Provides the default value for the <emphasis>--from</emphasis> option to format-patch.
        Accepts a boolean value, or a name and email address.  If false,
        format-patch defaults to <emphasis>--no-from</emphasis>, using commit authors directly in
        the "From:" field of patch mails.  If true, format-patch defaults to
        <emphasis>--from</emphasis>, using your committer identity in the "From:" field of patch
        mails and including a "From:" field in the body of the patch mail if
        different.  If set to a non-boolean value, format-patch uses that
        value instead of your committer identity.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.forceInBodyFrom
</term>
<listitem>
<simpara>
        Provides the default value for the <emphasis>--[no-]force-in-body-from</emphasis>
        option to format-patch.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.numbered
</term>
<listitem>
<simpara>
        A boolean which can enable or disable sequence numbers in patch
        subjects.  It defaults to "auto" which enables it only if there
        is more than one patch.  It can be enabled or disabled for all
        messages by setting it to "true" or "false".  See --numbered
        option in <xref linkend="git-format-patch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.headers
</term>
<listitem>
<simpara>
        Additional email headers to include in a patch to be submitted
        by mail.  See <xref linkend="git-format-patch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.to
</term>
<term>
format.cc
</term>
<listitem>
<simpara>
        Additional recipients to include in a patch to be submitted
        by mail.  See the --to and --cc options in
        <xref linkend="git-format-patch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.subjectPrefix
</term>
<listitem>
<simpara>
        The default for format-patch is to output files with the <emphasis>[PATCH]</emphasis>
        subject prefix. Use this variable to change that prefix.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.coverFromDescription
</term>
<listitem>
<simpara>
        The default mode for format-patch to determine which parts of
        the cover letter will be populated using the branch's
        description. See the <emphasis>--cover-from-description</emphasis> option in
        <xref linkend="git-format-patch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.signature
</term>
<listitem>
<simpara>
        The default for format-patch is to output a signature containing
        the Git version number. Use this variable to change that default.
        Set this variable to the empty string ("") to suppress
        signature generation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.signatureFile
</term>
<listitem>
<simpara>
        Works just like format.signature except the contents of the
        file specified by this variable will be used as the signature.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.suffix
</term>
<listitem>
<simpara>
        The default for format-patch is to output files with the suffix
        <emphasis>.patch</emphasis>. Use this variable to change that suffix (make sure to
        include the dot if you want it).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.encodeEmailHeaders
</term>
<listitem>
<simpara>
        Encode email headers that have non-ASCII characters with
        "Q-encoding" (described in RFC 2047) for email transmission.
        Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.pretty
</term>
<listitem>
<simpara>
        The default pretty format for log/show/whatchanged command.
        See <xref linkend="git-log(1)" />, <xref linkend="git-show(1)" />,
        <xref linkend="git-whatchanged(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.thread
</term>
<listitem>
<simpara>
        The default threading style for <emphasis>git format-patch</emphasis>.  Can be
        a boolean value, or <emphasis>shallow</emphasis> or <emphasis>deep</emphasis>.  <emphasis>shallow</emphasis> threading
        makes every mail a reply to the head of the series,
        where the head is chosen from the cover letter, the
        <emphasis>--in-reply-to</emphasis>, and the first patch mail, in this order.
        <emphasis>deep</emphasis> threading makes every mail a reply to the previous one.
        A true boolean value is the same as <emphasis>shallow</emphasis>, and a false
        value disables threading.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.signOff
</term>
<listitem>
<simpara>
        A boolean value which lets you enable the <emphasis>-s/--signoff</emphasis> option of
        format-patch by default. <emphasis role="strong">Note:</emphasis> Adding the <emphasis>Signed-off-by</emphasis> trailer to a
        patch should be a conscious act and means that you certify you have
        the rights to submit this work under the same open source license.
        Please see the <emphasis>SubmittingPatches</emphasis> document for further discussion.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.coverLetter
</term>
<listitem>
<simpara>
        A boolean that controls whether to generate a cover-letter when
        format-patch is invoked, but in addition can be set to "auto", to
        generate a cover-letter only when there's more than one patch.
        Default is false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.outputDirectory
</term>
<listitem>
<simpara>
        Set a custom directory to store the resulting files instead of the
        current working directory. All directory components will be created.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.filenameMaxLength
</term>
<listitem>
<simpara>
        The maximum length of the output filenames generated by the
        <emphasis>format-patch</emphasis> command; defaults to 64.  Can be overridden
        by the <emphasis>--filename-max-length=&lt;n&gt;</emphasis> command line option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.useAutoBase
</term>
<listitem>
<simpara>
        A boolean value which lets you enable the <emphasis>--base=auto</emphasis> option of
        format-patch by default. Can also be set to "whenAble" to allow
        enabling <emphasis>--base=auto</emphasis> if a suitable base is available, but to skip
        adding base info otherwise without the format dying.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.notes
</term>
<listitem>
<simpara>
        Provides the default value for the <emphasis>--notes</emphasis> option to
        format-patch. Accepts a boolean value, or a ref which specifies
        where to get notes. If false, format-patch defaults to
        <emphasis>--no-notes</emphasis>. If true, format-patch defaults to <emphasis>--notes</emphasis>. If
        set to a non-boolean value, format-patch defaults to
        <emphasis>--notes=&lt;ref&gt;</emphasis>, where <emphasis>ref</emphasis> is the non-boolean value. Defaults
        to false.
</simpara>
<simpara>If one wishes to use the ref <emphasis>refs/notes/true</emphasis>, please use that literal
instead.</simpara>
<simpara>This configuration can be specified multiple times in order to allow
multiple notes refs to be included. In that case, it will behave
similarly to multiple <emphasis>--[no-]notes[=]</emphasis> options passed in. That is, a
value of <emphasis>true</emphasis> will show the default notes, a value of <emphasis>&lt;ref&gt;</emphasis> will
also show notes from that notes ref and a value of <emphasis>false</emphasis> will negate
previous configurations and not show notes.</simpara>
<simpara>For example,</simpara>
<screen>[format]
        notes = true
        notes = foo
        notes = false
        notes = bar</screen>
<simpara>will only show notes from <emphasis>refs/notes/bar</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.mboxrd
</term>
<listitem>
<simpara>
        A boolean value which enables the robust "mboxrd" format when
        <emphasis>--stdout</emphasis> is in use to escape "^&gt;+From " lines.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.noprefix
</term>
<listitem>
<simpara>
        If set, do not show any source or destination prefix in patches.
        This is equivalent to the <emphasis>diff.noprefix</emphasis> option used by <emphasis>git
        diff</emphasis> (but which is not respected by <emphasis>format-patch</emphasis>). Note that
        by setting this, the receiver of any patches you generate will
        have to apply them using the <emphasis>-p0</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fsck.&lt;msg-id&gt;
</term>
<listitem>
<simpara>
        During fsck git may find issues with legacy data which
        wouldn't be generated by current versions of git, and which
        wouldn't be sent over the wire if <emphasis>transfer.fsckObjects</emphasis> was
        set. This feature is intended to support working with legacy
        repositories containing such data.
</simpara>
<simpara>Setting <emphasis>fsck.&lt;msg-id&gt;</emphasis> will be picked up by <xref linkend="git-fsck(1)" />, but
to accept pushes of such data set <emphasis>receive.fsck.&lt;msg-id&gt;</emphasis> instead, or
to clone or fetch it set <emphasis>fetch.fsck.&lt;msg-id&gt;</emphasis>.</simpara>
<simpara>The rest of the documentation discusses <emphasis>fsck.*</emphasis> for brevity, but the
same applies for the corresponding <emphasis>receive.fsck.*</emphasis> and
<emphasis>fetch.fsck.*</emphasis>. variables.</simpara>
<simpara>Unlike variables like <emphasis>color.ui</emphasis> and <emphasis>core.editor</emphasis>, the
<emphasis>receive.fsck.&lt;msg-id&gt;</emphasis> and <emphasis>fetch.fsck.&lt;msg-id&gt;</emphasis> variables will not
fall back on the <emphasis>fsck.&lt;msg-id&gt;</emphasis> configuration if they aren't set. To
uniformly configure the same fsck settings in different circumstances,
all three of them must be set to the same values.</simpara>
<simpara>When <emphasis>fsck.&lt;msg-id&gt;</emphasis> is set, errors can be switched to warnings and
vice versa by configuring the <emphasis>fsck.&lt;msg-id&gt;</emphasis> setting where the
<emphasis>&lt;msg-id&gt;</emphasis> is the fsck message ID and the value is one of <emphasis>error</emphasis>,
<emphasis>warn</emphasis> or <emphasis>ignore</emphasis>. For convenience, fsck prefixes the error/warning
with the message ID, e.g. "missingEmail: invalid author/committer
line - missing email" means that setting <emphasis>fsck.missingEmail = ignore</emphasis>
will hide that issue.</simpara>
<simpara>In general, it is better to enumerate existing objects with problems
with <emphasis>fsck.skipList</emphasis>, instead of listing the kind of breakages these
problematic objects share to be ignored, as doing the latter will
allow new instances of the same breakages go unnoticed.</simpara>
<simpara>Setting an unknown <emphasis>fsck.&lt;msg-id&gt;</emphasis> value will cause fsck to die, but
doing the same for <emphasis>receive.fsck.&lt;msg-id&gt;</emphasis> and <emphasis>fetch.fsck.&lt;msg-id&gt;</emphasis>
will only cause git to warn.</simpara>
<simpara>See the <emphasis>Fsck Messages</emphasis> section of <xref linkend="git-fsck(1)" /> for supported
values of <emphasis>&lt;msg-id&gt;</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fsck.skipList
</term>
<listitem>
<simpara>
        The path to a list of object names (i.e. one unabbreviated SHA-1 per
        line) that are known to be broken in a non-fatal way and should
        be ignored. On versions of Git 2.20 and later, comments (<emphasis>#</emphasis>), empty
        lines, and any leading and trailing whitespace are ignored. Everything
        but a SHA-1 per line will error out on older versions.
</simpara>
<simpara>This feature is useful when an established project should be accepted
despite early commits containing errors that can be safely ignored,
such as invalid committer email addresses.  Note: corrupt objects
cannot be skipped with this setting.</simpara>
<simpara>Like <emphasis>fsck.&lt;msg-id&gt;</emphasis> this variable has corresponding
<emphasis>receive.fsck.skipList</emphasis> and <emphasis>fetch.fsck.skipList</emphasis> variants.</simpara>
<simpara>Unlike variables like <emphasis>color.ui</emphasis> and <emphasis>core.editor</emphasis> the
<emphasis>receive.fsck.skipList</emphasis> and <emphasis>fetch.fsck.skipList</emphasis> variables will not
fall back on the <emphasis>fsck.skipList</emphasis> configuration if they aren't set. To
uniformly configure the same fsck settings in different circumstances,
all three of them must be set to the same values.</simpara>
<simpara>Older versions of Git (before 2.20) documented that the object names
list should be sorted. This was never a requirement; the object names
could appear in any order, but when reading the list we tracked whether
the list was sorted for the purposes of an internal binary search
implementation, which could save itself some work with an already sorted
list. Unless you had a humongous list there was no reason to go out of
your way to pre-sort the list. After Git version 2.20 a hash implementation
is used instead, so there's now no reason to pre-sort the list.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fsmonitor.allowRemote
</term>
<listitem>
<simpara>
    By default, the fsmonitor daemon refuses to work with network-mounted
    repositories. Setting <emphasis>fsmonitor.allowRemote</emphasis> to <emphasis>true</emphasis> overrides this
    behavior.  Only respected when <emphasis>core.fsmonitor</emphasis> is set to <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fsmonitor.socketDir
</term>
<listitem>
<simpara>
    This Mac OS-specific option, if set, specifies the directory in
    which to create the Unix domain socket used for communication
    between the fsmonitor daemon and various Git commands. The directory must
    reside on a native Mac OS filesystem.  Only respected when <emphasis>core.fsmonitor</emphasis>
    is set to <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.aggressiveDepth
</term>
<listitem>
<simpara>
        The depth parameter used in the delta compression
        algorithm used by <emphasis>git gc --aggressive</emphasis>.  This defaults
        to 50, which is the default for the <emphasis>--depth</emphasis> option when
        <emphasis>--aggressive</emphasis> isn't in use.
</simpara>
<simpara>See the documentation for the <emphasis>--depth</emphasis> option in
<xref linkend="git-repack(1)" /> for more details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.aggressiveWindow
</term>
<listitem>
<simpara>
        The window size parameter used in the delta compression
        algorithm used by <emphasis>git gc --aggressive</emphasis>.  This defaults
        to 250, which is a much more aggressive window size than
        the default <emphasis>--window</emphasis> of 10.
</simpara>
<simpara>See the documentation for the <emphasis>--window</emphasis> option in
<xref linkend="git-repack(1)" /> for more details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.auto
</term>
<listitem>
<simpara>
        When there are approximately more than this many loose
        objects in the repository, <emphasis>git gc --auto</emphasis> will pack them.
        Some Porcelain commands use this command to perform a
        light-weight garbage collection from time to time.  The
        default value is 6700.
</simpara>
<simpara>Setting this to 0 disables not only automatic packing based on the
number of loose objects, but also any other heuristic <emphasis>git gc --auto</emphasis> will
otherwise use to determine if there's work to do, such as
<emphasis>gc.autoPackLimit</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.autoPackLimit
</term>
<listitem>
<simpara>
        When there are more than this many packs that are not
        marked with <emphasis>*.keep</emphasis> file in the repository, <emphasis>git gc
        --auto</emphasis> consolidates them into one larger pack.  The
        default value is 50.  Setting this to 0 disables it.
        Setting <emphasis>gc.auto</emphasis> to 0 will also disable this.
</simpara>
<simpara>See the <emphasis>gc.bigPackThreshold</emphasis> configuration variable below. When in
use, it'll affect how the auto pack limit works.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.autoDetach
</term>
<listitem>
<simpara>
        Make <emphasis>git gc --auto</emphasis> return immediately and run in the background
        if the system supports it. Default is true. This config variable acts
        as a fallback in case <emphasis>maintenance.autoDetach</emphasis> is not set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.bigPackThreshold
</term>
<listitem>
<simpara>
        If non-zero, all non-cruft packs larger than this limit are kept
        when <emphasis>git gc</emphasis> is run. This is very similar to
        <emphasis>--keep-largest-pack</emphasis> except that all non-cruft packs that meet
        the threshold are kept, not just the largest pack. Defaults to
        zero. Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.
</simpara>
<simpara>Note that if the number of kept packs is more than gc.autoPackLimit,
this configuration variable is ignored, all packs except the base pack
will be repacked. After this the number of packs should go below
gc.autoPackLimit and gc.bigPackThreshold should be respected again.</simpara>
<simpara>If the amount of memory estimated for <emphasis>git repack</emphasis> to run smoothly is
not available and <emphasis>gc.bigPackThreshold</emphasis> is not set, the largest pack
will also be excluded (this is the equivalent of running <emphasis>git gc</emphasis> with
<emphasis>--keep-largest-pack</emphasis>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.writeCommitGraph
</term>
<listitem>
<simpara>
        If true, then gc will rewrite the commit-graph file when
        <xref linkend="git-gc(1)" /> is run. When using <emphasis>git gc --auto</emphasis>
        the commit-graph will be updated if housekeeping is
        required. Default is true. See <xref linkend="git-commit-graph(1)" />
        for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.logExpiry
</term>
<listitem>
<simpara>
        If the file gc.log exists, then <emphasis>git gc --auto</emphasis> will print
        its content and exit with status zero instead of running
        unless that file is more than <emphasis>gc.logExpiry</emphasis> old.  Default is
        "1.day".  See <emphasis>gc.pruneExpire</emphasis> for more ways to specify its
        value.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.packRefs
</term>
<listitem>
<simpara>
        Running <emphasis>git pack-refs</emphasis> in a repository renders it
        unclonable by Git versions prior to 1.5.1.2 over dumb
        transports such as HTTP.  This variable determines whether
        <emphasis>git gc</emphasis> runs <emphasis>git pack-refs</emphasis>. This can be set to <emphasis>notbare</emphasis>
        to enable it within all non-bare repos or it can be set to a
        boolean value.  The default is <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.cruftPacks
</term>
<listitem>
<simpara>
        Store unreachable objects in a cruft pack (see
        <xref linkend="git-repack(1)" />) instead of as loose objects. The default
        is <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.maxCruftSize
</term>
<listitem>
<simpara>
        Limit the size of new cruft packs when repacking. When
        specified in addition to <emphasis>--max-cruft-size</emphasis>, the command line
        option takes priority. See the <emphasis>--max-cruft-size</emphasis> option of
        <xref linkend="git-repack(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.pruneExpire
</term>
<listitem>
<simpara>
        When <emphasis>git gc</emphasis> is run, it will call <emphasis>prune --expire 2.weeks.ago</emphasis>
        (and <emphasis>repack --cruft --cruft-expiration 2.weeks.ago</emphasis> if using
        cruft packs via <emphasis>gc.cruftPacks</emphasis> or <emphasis>--cruft</emphasis>).  Override the
        grace period with this config variable.  The value "now" may be
        used to disable this grace period and always prune unreachable
        objects immediately, or "never" may be used to suppress pruning.
        This feature helps prevent corruption when <emphasis>git gc</emphasis> runs
        concurrently with another process writing to the repository; see
        the "NOTES" section of <xref linkend="git-gc(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.worktreePruneExpire
</term>
<listitem>
<simpara>
        When <emphasis>git gc</emphasis> is run, it calls
        <emphasis>git worktree prune --expire 3.months.ago</emphasis>.
        This config variable can be used to set a different grace
        period. The value "now" may be used to disable the grace
        period and prune <emphasis>$GIT_DIR/worktrees</emphasis> immediately, or "never"
        may be used to suppress pruning.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.reflogExpire
</term>
<term>
gc.&lt;pattern&gt;.reflogExpire
</term>
<listitem>
<simpara>
        <emphasis>git reflog expire</emphasis> removes reflog entries older than
        this time; defaults to 90 days. The value "now" expires all
        entries immediately, and "never" suppresses expiration
        altogether. With "&lt;pattern&gt;" (e.g.
        "refs/stash") in the middle the setting applies only to
        the refs that match the &lt;pattern&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.reflogExpireUnreachable
</term>
<term>
gc.&lt;pattern&gt;.reflogExpireUnreachable
</term>
<listitem>
<simpara>
        <emphasis>git reflog expire</emphasis> removes reflog entries older than
        this time and are not reachable from the current tip;
        defaults to 30 days. The value "now" expires all entries
        immediately, and "never" suppresses expiration altogether.
        With "&lt;pattern&gt;" (e.g. "refs/stash")
        in the middle, the setting applies only to the refs that
        match the &lt;pattern&gt;.
</simpara>
<simpara>These types of entries are generally created as a result of using <emphasis>git
commit --amend</emphasis> or <emphasis>git rebase</emphasis> and are the commits prior to the amend
or rebase occurring.  Since these changes are not part of the current
project most users will want to expire them sooner, which is why the
default is more aggressive than <emphasis>gc.reflogExpire</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.recentObjectsHook
</term>
<listitem>
<simpara>
        When considering whether or not to remove an object (either when
        generating a cruft pack or storing unreachable objects as
        loose), use the shell to execute the specified command(s).
        Interpret their output as object IDs which Git will consider as
        "recent", regardless of their age. By treating their mtimes as
        "now", any objects (and their descendants) mentioned in the
        output will be kept regardless of their true age.
</simpara>
<simpara>Output must contain exactly one hex object ID per line, and nothing
else. Objects which cannot be found in the repository are ignored.
Multiple hooks are supported, but all must exit successfully, else the
operation (either generating a cruft pack or unpacking unreachable
objects) will be halted.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.repackFilter
</term>
<listitem>
<simpara>
        When repacking, use the specified filter to move certain
        objects into a separate packfile.  See the
        <emphasis>--filter=&lt;filter-spec&gt;</emphasis> option of <xref linkend="git-repack(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.repackFilterTo
</term>
<listitem>
<simpara>
        When repacking and using a filter, see <emphasis>gc.repackFilter</emphasis>, the
        specified location will be used to create the packfile
        containing the filtered out objects. <emphasis role="strong">WARNING:</emphasis> The
        specified location should be accessible, using for example the
        Git alternates mechanism, otherwise the repo could be
        considered corrupt by Git as it might not be able to access the
        objects in that packfile. See the <emphasis>--filter-to=&lt;dir&gt;</emphasis> option
        of <xref linkend="git-repack(1)" /> and the <emphasis>objects/info/alternates</emphasis>
        section of <xref linkend="gitrepository-layout(5)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.rerereResolved
</term>
<listitem>
<simpara>
        Records of conflicted merge you resolved earlier are
        kept for this many days when <emphasis>git rerere gc</emphasis> is run.
        You can also use more human-readable "1.month.ago", etc.
        The default is 60 days.  See <xref linkend="git-rerere(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.rerereUnresolved
</term>
<listitem>
<simpara>
        Records of conflicted merge you have not resolved are
        kept for this many days when <emphasis>git rerere gc</emphasis> is run.
        You can also use more human-readable "1.month.ago", etc.
        The default is 15 days.  See <xref linkend="git-rerere(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.commitMsgAnnotation
</term>
<listitem>
<simpara>
        Append this string to each commit message. Set to empty string
        to disable this feature. Defaults to "via git-CVS emulator".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.enabled
</term>
<listitem>
<simpara>
        Whether the CVS server interface is enabled for this repository.
        See <xref linkend="git-cvsserver(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.logFile
</term>
<listitem>
<simpara>
        Path to a log file where the CVS server interface well&#8230; logs
        various stuff. See <xref linkend="git-cvsserver(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.usecrlfattr
</term>
<listitem>
<simpara>
        If true, the server will look up the end-of-line conversion
        attributes for files to determine the <emphasis>-k</emphasis> modes to use. If
        the attributes force Git to treat a file as text,
        the <emphasis>-k</emphasis> mode will be left blank so CVS clients will
        treat it as text. If they suppress text conversion, the file
        will be set with <emphasis>-kb</emphasis> mode, which suppresses any newline munging
        the client might otherwise do. If the attributes do not allow
        the file type to be determined, then <emphasis>gitcvs.allBinary</emphasis> is
        used. See <xref linkend="gitattributes(5)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.allBinary
</term>
<listitem>
<simpara>
        This is used if <emphasis>gitcvs.usecrlfattr</emphasis> does not resolve
        the correct <emphasis>-kb</emphasis> mode to use. If true, all
        unresolved files are sent to the client in
        mode <emphasis>-kb</emphasis>. This causes the client to treat them
        as binary files, which suppresses any newline munging it
        otherwise might do. Alternatively, if it is set to "guess",
        then the contents of the file are examined to decide if
        it is binary, similar to <emphasis>core.autocrlf</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbName
</term>
<listitem>
<simpara>
        Database used by git-cvsserver to cache revision information
        derived from the Git repository. The exact meaning depends on the
        used database driver, for SQLite (which is the default driver) this
        is a filename. Supports variable substitution (see
        <xref linkend="git-cvsserver(1)" /> for details). May not contain semicolons (<emphasis>;</emphasis>).
        Default: <emphasis>%Ggitcvs.%m.sqlite</emphasis>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbDriver
</term>
<listitem>
<simpara>
        Used Perl DBI driver. You can specify any available driver
        for this here, but it might not work. git-cvsserver is tested
        with <emphasis>DBD::SQLite</emphasis>, reported to work with <emphasis>DBD::Pg</emphasis>, and
        reported <emphasis role="strong">not</emphasis> to work with <emphasis>DBD::mysql</emphasis>. Experimental feature.
        May not contain double colons (<emphasis>:</emphasis>). Default: <emphasis>SQLite</emphasis>.
        See <xref linkend="git-cvsserver(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbUser
</term>
<term>
gitcvs.dbPass
</term>
<listitem>
<simpara>
        Database user and password. Only useful if setting <emphasis>gitcvs.dbDriver</emphasis>,
        since SQLite has no concept of database users and/or passwords.
        <emphasis>gitcvs.dbUser</emphasis> supports variable substitution (see
        <xref linkend="git-cvsserver(1)" /> for details).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbTableNamePrefix
</term>
<listitem>
<simpara>
        Database table name prefix.  Prepended to the names of any
        database tables used, allowing a single database to be used
        for several repositories.  Supports variable substitution (see
        <xref linkend="git-cvsserver(1)" /> for details).  Any non-alphabetic
        characters will be replaced with underscores.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>All gitcvs variables except for <emphasis>gitcvs.usecrlfattr</emphasis> and
<emphasis>gitcvs.allBinary</emphasis> can also be specified as
<emphasis>gitcvs.&lt;access_method&gt;.&lt;varname&gt;</emphasis> (where <emphasis>access_method</emphasis>
is one of "ext" and "pserver") to make them apply only for the given
access method.</simpara>
<variablelist>
<varlistentry>
<term>
gitweb.category
</term>
<term>
gitweb.description
</term>
<term>
gitweb.owner
</term>
<term>
gitweb.url
</term>
<listitem>
<simpara>
        See <xref linkend="gitweb(1)" /> for description.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitweb.avatar
</term>
<term>
gitweb.blame
</term>
<term>
gitweb.grep
</term>
<term>
gitweb.highlight
</term>
<term>
gitweb.patches
</term>
<term>
gitweb.pickaxe
</term>
<term>
gitweb.remote_heads
</term>
<term>
gitweb.showSizes
</term>
<term>
gitweb.snapshot
</term>
<listitem>
<simpara>
        See <xref linkend="gitweb.conf(5)" /> for description.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.program
</term>
<listitem>
<simpara>
        Use this custom program instead of "<emphasis>gpg</emphasis>" found on <emphasis>$PATH</emphasis> when
        making or verifying a PGP signature. The program must support the
        same command-line interface as GPG, namely, to verify a detached
        signature, "<emphasis>gpg --verify $signature - &lt;$file</emphasis>" is run, and the
        program is expected to signal a good signature by exiting with
        code 0.  To generate an ASCII-armored detached signature, the
        standard input of "<emphasis>gpg -bsau $key</emphasis>" is fed with the contents to be
        signed, and the program is expected to send the result to its
        standard output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.format
</term>
<listitem>
<simpara>
        Specifies which key format to use when signing with <emphasis>--gpg-sign</emphasis>.
        Default is "openpgp". Other possible values are "x509", "ssh".
</simpara>
<simpara>See <xref linkend="gitformat-signature(5)" /> for the signature format, which differs
based on the selected <emphasis>gpg.format</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.&lt;format&gt;.program
</term>
<listitem>
<simpara>
        Use this to customize the program used for the signing format you
        chose. (see <emphasis>gpg.program</emphasis> and <emphasis>gpg.format</emphasis>) <emphasis>gpg.program</emphasis> can still
        be used as a legacy synonym for <emphasis>gpg.openpgp.program</emphasis>. The default
        value for <emphasis>gpg.x509.program</emphasis> is "gpgsm" and <emphasis>gpg.ssh.program</emphasis> is "ssh-keygen".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.minTrustLevel
</term>
<listitem>
<simpara>
        Specifies a minimum trust level for signature verification.  If
        this option is unset, then signature verification for merge
        operations requires a key with at least <emphasis>marginal</emphasis> trust.  Other
        operations that perform signature verification require a key
        with at least <emphasis>undefined</emphasis> trust.  Setting this option overrides
        the required trust-level for all operations.  Supported values,
        in increasing order of significance:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>undefined</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>never</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>marginal</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>fully</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>ultimate</emphasis>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.ssh.defaultKeyCommand
</term>
<listitem>
<simpara>
        This command will be run when user.signingkey is not set and a ssh
        signature is requested. On successful exit a valid ssh public key
        prefixed with <emphasis>key::</emphasis> is expected in the first line of its output.
        This allows for a script doing a dynamic lookup of the correct public
        key when it is impractical to statically configure <emphasis>user.signingKey</emphasis>.
        For example when keys or SSH Certificates are rotated frequently or
        selection of the right key depends on external factors unknown to git.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.ssh.allowedSignersFile
</term>
<listitem>
<simpara>
        A file containing ssh public keys which you are willing to trust.
        The file consists of one or more lines of principals followed by an ssh
        public key.
        e.g.: <emphasis>user1@example.com,user2@example.com ssh-rsa AAAAX1...</emphasis>
        See ssh-keygen(1) "ALLOWED SIGNERS" for details.
        The principal is only used to identify the key and is available when
        verifying a signature.
</simpara>
<simpara>SSH has no concept of trust levels like gpg does. To be able to differentiate
between valid signatures and trusted signatures the trust level of a signature
verification is set to <emphasis>fully</emphasis> when the public key is present in the allowedSignersFile.
Otherwise the trust level is <emphasis>undefined</emphasis> and git verify-commit/tag will fail.</simpara>
<simpara>This file can be set to a location outside of the repository and every developer
maintains their own trust store. A central repository server could generate this
file automatically from ssh keys with push access to verify the code against.
In a corporate setting this file is probably generated at a global location
from automation that already handles developer ssh keys.</simpara>
<simpara>A repository that only allows signed commits can store the file
in the repository itself using a path relative to the top-level of the working tree.
This way only committers with an already valid key can add or change keys in the keyring.</simpara>
<simpara>Since OpensSSH 8.8 this file allows specifying a key lifetime using valid-after &amp;
valid-before options. Git will mark signatures as valid if the signing key was
valid at the time of the signature's creation. This allows users to change a
signing key without invalidating all previously made signatures.</simpara>
<simpara>Using a SSH CA key with the cert-authority option
(see ssh-keygen(1) "CERTIFICATES") is also valid.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.ssh.revocationFile
</term>
<listitem>
<simpara>
        Either a SSH KRL or a list of revoked public keys (without the principal prefix).
        See ssh-keygen(1) for details.
        If a public key is found in this file then it will always be treated
        as having trust level "never" and signatures will show as invalid.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.lineNumber
</term>
<listitem>
<simpara>
        If set to true, enable <emphasis>-n</emphasis> option by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.column
</term>
<listitem>
<simpara>
        If set to true, enable the <emphasis>--column</emphasis> option by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.patternType
</term>
<listitem>
<simpara>
        Set the default matching behavior. Using a value of <emphasis>basic</emphasis>, <emphasis>extended</emphasis>,
        <emphasis>fixed</emphasis>, or <emphasis>perl</emphasis> will enable the <emphasis>--basic-regexp</emphasis>, <emphasis>--extended-regexp</emphasis>,
        <emphasis>--fixed-strings</emphasis>, or <emphasis>--perl-regexp</emphasis> option accordingly, while the
        value <emphasis>default</emphasis> will use the <emphasis>grep.extendedRegexp</emphasis> option to choose
        between <emphasis>basic</emphasis> and <emphasis>extended</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.extendedRegexp
</term>
<listitem>
<simpara>
        If set to true, enable <emphasis>--extended-regexp</emphasis> option by default. This
        option is ignored when the <emphasis>grep.patternType</emphasis> option is set to a value
        other than <emphasis>default</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.threads
</term>
<listitem>
<simpara>
        Number of grep worker threads to use. If unset (or set to 0), Git will
        use as many threads as the number of logical cores available.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.fullName
</term>
<listitem>
<simpara>
        If set to true, enable <emphasis>--full-name</emphasis> option by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.fallbackToNoIndex
</term>
<listitem>
<simpara>
        If set to true, fall back to <emphasis>git grep --no-index</emphasis> if <emphasis>git grep</emphasis>
        is executed outside of a git repository.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.commitMsgWidth
</term>
<listitem>
<simpara>
        Defines how wide the commit message window is in the
        <xref linkend="git-gui(1)" />. "75" is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.diffContext
</term>
<listitem>
<simpara>
        Specifies how many context lines should be used in calls to diff
        made by the <xref linkend="git-gui(1)" />. The default is "5".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.displayUntracked
</term>
<listitem>
<simpara>
        Determines if <xref linkend="git-gui(1)" /> shows untracked files
        in the file list. The default is "true".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.encoding
</term>
<listitem>
<simpara>
        Specifies the default character encoding to use for displaying of
        file contents in <xref linkend="git-gui(1)" /> and <xref linkend="gitk(1)" />.
        It can be overridden by setting the <emphasis>encoding</emphasis> attribute
        for relevant files (see <xref linkend="gitattributes(5)" />).
        If this option is not set, the tools default to the
        locale encoding.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.matchTrackingBranch
</term>
<listitem>
<simpara>
        Determines if new branches created with <xref linkend="git-gui(1)" /> should
        default to tracking remote branches with matching names or
        not. Default: "false".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.newBranchTemplate
</term>
<listitem>
<simpara>
        Is used as a suggested name when creating new branches using the
        <xref linkend="git-gui(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.pruneDuringFetch
</term>
<listitem>
<simpara>
        "true" if <xref linkend="git-gui(1)" /> should prune remote-tracking branches when
        performing a fetch. The default value is "false".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.trustmtime
</term>
<listitem>
<simpara>
        Determines if <xref linkend="git-gui(1)" /> should trust the file modification
        timestamp or not. By default the timestamps are not trusted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.spellingDictionary
</term>
<listitem>
<simpara>
        Specifies the dictionary used for spell checking commit messages in
        the <xref linkend="git-gui(1)" />. When set to "none" spell checking is turned
        off.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.fastCopyBlame
</term>
<listitem>
<simpara>
        If true, <emphasis>git gui blame</emphasis> uses <emphasis>-C</emphasis> instead of <emphasis>-C -C</emphasis> for original
        location detection. It makes blame significantly faster on huge
        repositories at the expense of less thorough copy detection.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.copyBlameThreshold
</term>
<listitem>
<simpara>
        Specifies the threshold to use in <emphasis>git gui blame</emphasis> original location
        detection, measured in alphanumeric characters. See the
        <xref linkend="git-blame(1)" /> manual for more information on copy detection.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.blamehistoryctx
</term>
<listitem>
<simpara>
        Specifies the radius of history context in days to show in
        <xref linkend="gitk(1)" /> for the selected commit, when the <emphasis>Show History
        Context</emphasis> menu item is invoked from <emphasis>git gui blame</emphasis>. If this
        variable is set to zero, the whole history is shown.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.cmd
</term>
<listitem>
<simpara>
        Specifies the shell command line to execute when the corresponding item
        of the <xref linkend="git-gui(1)" /> <emphasis>Tools</emphasis> menu is invoked. This option is
        mandatory for every tool. The command is executed from the root of
        the working directory, and in the environment it receives the name of
        the tool as <emphasis>GIT_GUITOOL</emphasis>, the name of the currently selected file as
        <emphasis>FILENAME</emphasis>, and the name of the current branch as <emphasis>CUR_BRANCH</emphasis> (if
        the head is detached, <emphasis>CUR_BRANCH</emphasis> is empty).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.needsFile
</term>
<listitem>
<simpara>
        Run the tool only if a diff is selected in the GUI. It guarantees
        that <emphasis>FILENAME</emphasis> is not empty.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.noConsole
</term>
<listitem>
<simpara>
        Run the command silently, without creating a window to display its
        output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.noRescan
</term>
<listitem>
<simpara>
        Don't rescan the working directory for changes after the tool
        finishes execution.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.confirm
</term>
<listitem>
<simpara>
        Show a confirmation dialog before actually running the tool.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.argPrompt
</term>
<listitem>
<simpara>
        Request a string argument from the user, and pass it to the tool
        through the <emphasis>ARGS</emphasis> environment variable. Since requesting an
        argument implies confirmation, the <emphasis>confirm</emphasis> option has no effect
        if this is enabled. If the option is set to <emphasis>true</emphasis>, <emphasis>yes</emphasis>, or <emphasis>1</emphasis>,
        the dialog uses a built-in generic prompt; otherwise the exact
        value of the variable is used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.revPrompt
</term>
<listitem>
<simpara>
        Request a single valid revision from the user, and set the
        <emphasis>REVISION</emphasis> environment variable. In other aspects this option
        is similar to <emphasis>argPrompt</emphasis>, and can be used together with it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.revUnmerged
</term>
<listitem>
<simpara>
        Show only unmerged branches in the <emphasis>revPrompt</emphasis> subdialog.
        This is useful for tools similar to merge or rebase, but not
        for things like checkout or reset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.title
</term>
<listitem>
<simpara>
        Specifies the title to use for the prompt dialog. The default
        is the tool name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.prompt
</term>
<listitem>
<simpara>
        Specifies the general prompt string to display at the top of
        the dialog, before subsections for <emphasis>argPrompt</emphasis> and <emphasis>revPrompt</emphasis>.
        The default value includes the actual command.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.browser
</term>
<listitem>
<simpara>
        Specify the browser that will be used to display help in the
        <emphasis>web</emphasis> format. See <xref linkend="git-help(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.format
</term>
<listitem>
<simpara>
        Override the default help format used by <xref linkend="git-help(1)" />.
        Values <emphasis>man</emphasis>, <emphasis>info</emphasis>, <emphasis>web</emphasis> and <emphasis>html</emphasis> are supported. <emphasis>man</emphasis> is
        the default. <emphasis>web</emphasis> and <emphasis>html</emphasis> are the same.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.autoCorrect
</term>
<listitem>
<simpara>
        If git detects typos and can identify exactly one valid command similar
        to the error, git will try to suggest the correct command or even
        run the suggestion automatically. Possible config values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
0, "false", "off", "no", "show": show the suggested command (default).
</simpara>
</listitem>
<listitem>
<simpara>
1, "true", "on", "yes", "immediate": run the suggested command
immediately.
</simpara>
</listitem>
<listitem>
<simpara>
positive number &gt; 1: run the suggested command after specified
deciseconds (0.1 sec).
</simpara>
</listitem>
<listitem>
<simpara>
"never": don't run or show any suggested command.
</simpara>
</listitem>
<listitem>
<simpara>
"prompt": show the suggestion and prompt for confirmation to run
the command.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.htmlPath
</term>
<listitem>
<simpara>
        Specify the path where the HTML documentation resides. File system paths
        and URLs are supported. HTML pages will be prefixed with this path when
        help is displayed in the <emphasis>web</emphasis> format. This defaults to the documentation
        path of your Git installation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxy
</term>
<listitem>
<simpara>
        Override the HTTP proxy, normally configured using the <emphasis>http_proxy</emphasis>,
        <emphasis>https_proxy</emphasis>, and <emphasis>all_proxy</emphasis> environment variables (see <emphasis>curl(1)</emphasis>). In
        addition to the syntax understood by curl, it is possible to specify a
        proxy string with a user name but no password, in which case git will
        attempt to acquire one in the same way it does for other credentials. See
        <xref linkend="gitcredentials(7)" /> for more information. The syntax thus is
        <emphasis>[protocol://][user[:password]@]proxyhost[:port][/path]</emphasis>. This can be
        overridden on a per-remote basis; see remote.&lt;name&gt;.proxy
</simpara>
<simpara>Any proxy, however configured, must be completely transparent and must not
modify, transform, or buffer the request or response in any way.  Proxies which
are not completely transparent are known to cause various forms of breakage
with Git.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxyAuthMethod
</term>
<listitem>
<simpara>
        Set the method with which to authenticate against the HTTP proxy. This
        only takes effect if the configured proxy string contains a user name part
        (i.e. is of the form <emphasis>user@host</emphasis> or <emphasis>user@host:port</emphasis>). This can be
        overridden on a per-remote basis; see <emphasis>remote.&lt;name&gt;.proxyAuthMethod</emphasis>.
        Both can be overridden by the <emphasis>GIT_HTTP_PROXY_AUTHMETHOD</emphasis> environment
        variable.  Possible values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>anyauth</emphasis> - Automatically pick a suitable authentication method. It is
  assumed that the proxy answers an unauthenticated request with a 407
  status code and one or more Proxy-authenticate headers with supported
  authentication methods. This is the default.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>basic</emphasis> - HTTP Basic authentication
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>digest</emphasis> - HTTP Digest authentication; this prevents the password from being
  transmitted to the proxy in clear text
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>negotiate</emphasis> - GSS-Negotiate authentication (compare the --negotiate option
  of <emphasis>curl(1)</emphasis>)
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>ntlm</emphasis> - NTLM authentication (compare the --ntlm option of <emphasis>curl(1)</emphasis>)
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxySSLCert
</term>
<listitem>
<simpara>
        The pathname of a file that stores a client certificate to use to authenticate
        with an HTTPS proxy. Can be overridden by the <emphasis>GIT_PROXY_SSL_CERT</emphasis> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxySSLKey
</term>
<listitem>
<simpara>
        The pathname of a file that stores a private key to use to authenticate with
        an HTTPS proxy. Can be overridden by the <emphasis>GIT_PROXY_SSL_KEY</emphasis> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxySSLCertPasswordProtected
</term>
<listitem>
<simpara>
        Enable Git's password prompt for the proxy SSL certificate.  Otherwise OpenSSL
        will prompt the user, possibly many times, if the certificate or private key
        is encrypted. Can be overridden by the <emphasis>GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED</emphasis>
        environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxySSLCAInfo
</term>
<listitem>
<simpara>
        Pathname to the file containing the certificate bundle that should be used to
        verify the proxy with when using an HTTPS proxy. Can be overridden by the
        <emphasis>GIT_PROXY_SSL_CAINFO</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.emptyAuth
</term>
<listitem>
<simpara>
        Attempt authentication without seeking a username or password.  This
        can be used to attempt GSS-Negotiate authentication without specifying
        a username in the URL, as libcurl normally requires a username for
        authentication.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proactiveAuth
</term>
<listitem>
<simpara>
        Attempt authentication without first making an unauthenticated attempt and
        receiving a 401 response. This can be used to ensure that all requests are
        authenticated. If <emphasis>http.emptyAuth</emphasis> is set to true, this value has no effect.
</simpara>
<simpara>If the credential helper used specifies an authentication scheme (i.e., via the
<emphasis>authtype</emphasis> field), that value will be used; if a username and password is
provided without a scheme, then Basic authentication is used.  The value of the
option determines the scheme requested from the helper. Possible values are:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>basic</emphasis> - Request Basic authentication from the helper.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>auto</emphasis> - Allow the helper to pick an appropriate scheme.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>none</emphasis> - Disable proactive authentication.
</simpara>
</listitem>
</itemizedlist>
<simpara>Note that TLS should always be used with this configuration, since otherwise it
is easy to accidentally expose plaintext credentials if Basic authentication
is selected.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.delegation
</term>
<listitem>
<simpara>
        Control GSSAPI credential delegation. The delegation is disabled
        by default in libcurl since version 7.21.7. Set parameter to tell
        the server what it is allowed to delegate when it comes to user
        credentials. Used with GSS/kerberos. Possible values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>none</emphasis> - Don't allow any delegation.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>policy</emphasis> - Delegates if and only if the OK-AS-DELEGATE flag is set in the
  Kerberos service ticket, which is a matter of realm policy.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>always</emphasis> - Unconditionally allow the server to delegate.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.extraHeader
</term>
<listitem>
<simpara>
        Pass an additional HTTP header when communicating with a server.  If
        more than one such entry exists, all of them are added as extra
        headers.  To allow overriding the settings inherited from the system
        config, an empty value will reset the extra headers to the empty list.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.cookieFile
</term>
<listitem>
<simpara>
        The pathname of a file containing previously stored cookie lines,
        which should be used
        in the Git http session, if they match the server. The file format
        of the file to read cookies from should be plain HTTP headers or
        the Netscape/Mozilla cookie file format (see <emphasis>curl(1)</emphasis>).
        Set it to an empty string, to accept only new cookies from
        the server and send them back in successive requests within same
        connection.
        NOTE that the file specified with http.cookieFile is used only as
        input unless http.saveCookies is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.saveCookies
</term>
<listitem>
<simpara>
        If set, store cookies received during requests to the file specified by
        http.cookieFile. Has no effect if http.cookieFile is unset, or set to
        an empty string.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.version
</term>
<listitem>
<simpara>
        Use the specified HTTP protocol version when communicating with a server.
        If you want to force the default. The available and default version depend
        on libcurl. Currently the possible values of
        this option are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
HTTP/2
</simpara>
</listitem>
<listitem>
<simpara>
HTTP/1.1
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.curloptResolve
</term>
<listitem>
<simpara>
        Hostname resolution information that will be used first by
        libcurl when sending HTTP requests.  This information should
        be in one of the following formats:
</simpara>
<itemizedlist>
<listitem>
<simpara>
[+]HOST:PORT:ADDRESS[,ADDRESS]
</simpara>
</listitem>
<listitem>
<simpara>
-HOST:PORT
</simpara>
</listitem>
</itemizedlist>
<simpara>The first format redirects all requests to the given <emphasis>HOST:PORT</emphasis>
to the provided <emphasis>ADDRESS</emphasis>(s). The second format clears all
previous config values for that <emphasis>HOST:PORT</emphasis> combination.  To
allow easy overriding of all the settings inherited from the
system config, an empty value will reset all resolution
information to the empty list.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslVersion
</term>
<listitem>
<simpara>
        The SSL version to use when negotiating an SSL connection, if you
        want to force the default.  The available and default version
        depend on whether libcurl was built against NSS or OpenSSL and the
        particular configuration of the crypto library in use. Internally
        this sets the <emphasis>CURLOPT_SSL_VERSION</emphasis> option; see the libcurl
        documentation for more details on the format of this option and
        for the ssl version supported. Currently the possible values of
        this option are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
sslv2
</simpara>
</listitem>
<listitem>
<simpara>
sslv3
</simpara>
</listitem>
<listitem>
<simpara>
tlsv1
</simpara>
</listitem>
<listitem>
<simpara>
tlsv1.0
</simpara>
</listitem>
<listitem>
<simpara>
tlsv1.1
</simpara>
</listitem>
<listitem>
<simpara>
tlsv1.2
</simpara>
</listitem>
<listitem>
<simpara>
tlsv1.3
</simpara>
</listitem>
</itemizedlist>
<simpara>Can be overridden by the <emphasis>GIT_SSL_VERSION</emphasis> environment variable.
To force git to use libcurl's default ssl version and ignore any
explicit http.sslversion option, set <emphasis>GIT_SSL_VERSION</emphasis> to the
empty string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCipherList
</term>
<listitem>
<simpara>
  A list of SSL ciphers to use when negotiating an SSL connection.
  The available ciphers depend on whether libcurl was built against
  NSS or OpenSSL and the particular configuration of the crypto
  library in use.  Internally this sets the <emphasis>CURLOPT_SSL_CIPHER_LIST</emphasis>
  option; see the libcurl documentation for more details on the format
  of this list.
</simpara>
<simpara>Can be overridden by the <emphasis>GIT_SSL_CIPHER_LIST</emphasis> environment variable.
To force git to use libcurl's default cipher list and ignore any
explicit http.sslCipherList option, set <emphasis>GIT_SSL_CIPHER_LIST</emphasis> to the
empty string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslVerify
</term>
<listitem>
<simpara>
        Whether to verify the SSL certificate when fetching or pushing
        over HTTPS. Defaults to true. Can be overridden by the
        <emphasis>GIT_SSL_NO_VERIFY</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCert
</term>
<listitem>
<simpara>
        File containing the SSL certificate when fetching or pushing
        over HTTPS. Can be overridden by the <emphasis>GIT_SSL_CERT</emphasis> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslKey
</term>
<listitem>
<simpara>
        File containing the SSL private key when fetching or pushing
        over HTTPS. Can be overridden by the <emphasis>GIT_SSL_KEY</emphasis> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCertPasswordProtected
</term>
<listitem>
<simpara>
        Enable Git's password prompt for the SSL certificate.  Otherwise
        OpenSSL will prompt the user, possibly many times, if the
        certificate or private key is encrypted.  Can be overridden by the
        <emphasis>GIT_SSL_CERT_PASSWORD_PROTECTED</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCAInfo
</term>
<listitem>
<simpara>
        File containing the certificates to verify the peer with when
        fetching or pushing over HTTPS. Can be overridden by the
        <emphasis>GIT_SSL_CAINFO</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCAPath
</term>
<listitem>
<simpara>
        Path containing files with the CA certificates to verify the peer
        with when fetching or pushing over HTTPS. Can be overridden
        by the <emphasis>GIT_SSL_CAPATH</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslBackend
</term>
<listitem>
<simpara>
        Name of the SSL backend to use (e.g. "openssl" or "schannel").
        This option is ignored if cURL lacks support for choosing the SSL
        backend at runtime.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCertType
</term>
<listitem>
<simpara>
        Type of client certificate used when fetching or pushing over HTTPS.
        "PEM", "DER" are supported when using openssl or gnutls backends. "P12"
        is supported on "openssl", "schannel", "securetransport", and gnutls 8.11+.
        See also libcurl <emphasis>CURLOPT_SSLCERTTYPE</emphasis>. Can be overridden by the
        <emphasis>GIT_SSL_CERT_TYPE</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslKeyType
</term>
<listitem>
<simpara>
        Type of client private key used when fetching or pushing over HTTPS. (e.g.
        "PEM", "DER", or "ENG"). Only applicable when using "openssl" backend. "DER"
        is not supported with openssl. Particularly useful when set to "ENG" for
        authenticating with PKCS#11 tokens, with a PKCS#11 URL in sslCert option.
        See also libcurl <emphasis>CURLOPT_SSLKEYTYPE</emphasis>. Can be overridden by the
        <emphasis>GIT_SSL_KEY_TYPE</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.schannelCheckRevoke
</term>
<listitem>
<simpara>
        Used to enforce or disable certificate revocation checks in cURL
        when http.sslBackend is set to "schannel". Defaults to <emphasis>true</emphasis> if
        unset. Only necessary to disable this if Git consistently errors
        and the message is about checking the revocation status of a
        certificate. This option is ignored if cURL lacks support for
        setting the relevant SSL option at runtime.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.schannelUseSSLCAInfo
</term>
<listitem>
<simpara>
        As of cURL v7.60.0, the Secure Channel backend can use the
        certificate bundle provided via <emphasis>http.sslCAInfo</emphasis>, but that would
        override the Windows Certificate Store. Since this is not desirable
        by default, Git will tell cURL not to use that bundle by default
        when the <emphasis>schannel</emphasis> backend was configured via <emphasis>http.sslBackend</emphasis>,
        unless <emphasis>http.schannelUseSSLCAInfo</emphasis> overrides this behavior.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.pinnedPubkey
</term>
<listitem>
<simpara>
        Public key of the https service. It may either be the filename of
        a PEM or DER encoded public key file or a string starting with
        <emphasis>sha256//</emphasis> followed by the base64 encoded sha256 hash of the
        public key. See also libcurl <emphasis>CURLOPT_PINNEDPUBLICKEY</emphasis>. git will
        exit with an error if this option is set but not supported by
        cURL.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslTry
</term>
<listitem>
<simpara>
        Attempt to use AUTH SSL/TLS and encrypted data transfers
        when connecting via regular FTP protocol. This might be needed
        if the FTP server requires it for security reasons or you wish
        to connect securely whenever remote FTP server supports it.
        Default is false since it might trigger certificate verification
        errors on misconfigured servers.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.maxRequests
</term>
<listitem>
<simpara>
        How many HTTP requests to launch in parallel. Can be overridden
        by the <emphasis>GIT_HTTP_MAX_REQUESTS</emphasis> environment variable. Default is 5.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.minSessions
</term>
<listitem>
<simpara>
        The number of curl sessions (counted across slots) to be kept across
        requests. They will not be ended with curl_easy_cleanup() until
        http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this
        value will be capped at 1. Defaults to 1.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.postBuffer
</term>
<listitem>
<simpara>
        Maximum size in bytes of the buffer used by smart HTTP
        transports when POSTing data to the remote system.
        For requests larger than this buffer size, HTTP/1.1 and
        Transfer-Encoding: chunked is used to avoid creating a
        massive pack file locally.  Default is 1 MiB, which is
        sufficient for most requests.
</simpara>
<simpara>Note that raising this limit is only effective for disabling chunked
transfer encoding and therefore should be used only where the remote
server or a proxy only supports HTTP/1.0 or is noncompliant with the
HTTP standard.  Raising this is not, in general, an effective solution
for most push problems, but can increase memory consumption
significantly since the entire buffer is allocated even for small
pushes.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.lowSpeedLimit
</term>
<term>
http.lowSpeedTime
</term>
<listitem>
<simpara>
        If the HTTP transfer speed, in bytes per second, is less than
        <emphasis>http.lowSpeedLimit</emphasis> for longer than <emphasis>http.lowSpeedTime</emphasis> seconds,
        the transfer is aborted.
        Can be overridden by the <emphasis>GIT_HTTP_LOW_SPEED_LIMIT</emphasis> and
        <emphasis>GIT_HTTP_LOW_SPEED_TIME</emphasis> environment variables.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.keepAliveIdle
</term>
<listitem>
<simpara>
        Specifies how long in seconds to wait on an idle connection
        before sending TCP keepalive probes (if supported by the OS). If
        unset, curl's default value is used. Can be overridden by the
        <emphasis>GIT_HTTP_KEEPALIVE_IDLE</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.keepAliveInterval
</term>
<listitem>
<simpara>
        Specifies how long in seconds to wait between TCP keepalive
        probes (if supported by the OS). If unset, curl's default value
        is used. Can be overridden by the <emphasis>GIT_HTTP_KEEPALIVE_INTERVAL</emphasis>
        environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.keepAliveCount
</term>
<listitem>
<simpara>
        Specifies how many TCP keepalive probes to send before giving up
        and terminating the connection (if supported by the OS). If
        unset, curl's default value is used. Can be overridden by the
        <emphasis>GIT_HTTP_KEEPALIVE_COUNT</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.noEPSV
</term>
<listitem>
<simpara>
        A boolean which disables using of EPSV ftp command by curl.
        This can be helpful with some "poor" ftp servers which don't
        support EPSV mode. Can be overridden by the <emphasis>GIT_CURL_FTP_NO_EPSV</emphasis>
        environment variable. Default is false (curl will use EPSV).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.userAgent
</term>
<listitem>
<simpara>
        The HTTP USER_AGENT string presented to an HTTP server.  The default
        value represents the version of the Git client such as git/1.7.1.
        This option allows you to override this value to a more common value
        such as Mozilla/4.0.  This may be necessary, for instance, if
        connecting through a firewall that restricts HTTP connections to a set
        of common USER_AGENT strings (but not including those like git/1.7.1).
        Can be overridden by the <emphasis>GIT_HTTP_USER_AGENT</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.followRedirects
</term>
<listitem>
<simpara>
        Whether git should follow HTTP redirects. If set to <emphasis>true</emphasis>, git
        will transparently follow any redirect issued by a server it
        encounters. If set to <emphasis>false</emphasis>, git will treat all redirects as
        errors. If set to <emphasis>initial</emphasis>, git will follow redirects only for
        the initial request to a remote, but not for subsequent
        follow-up HTTP requests. Since git uses the redirected URL as
        the base for the follow-up requests, this is generally
        sufficient. The default is <emphasis>initial</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.&lt;url&gt;.*
</term>
<listitem>
<simpara>
        Any of the http.* options above can be applied selectively to some URLs.
        For a config key to match a URL, each element of the config key is
        compared to that of the URL, in the following order:
</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Scheme (e.g., <emphasis>https</emphasis> in <emphasis>https://example.com/</emphasis>). This field
  must match exactly between the config key and the URL.
</simpara>
</listitem>
<listitem>
<simpara>
Host/domain name (e.g., <emphasis>example.com</emphasis> in <emphasis>https://example.com/</emphasis>).
  This field must match between the config key and the URL. It is
  possible to specify a <emphasis>*</emphasis> as part of the host name to match all subdomains
  at this level. <emphasis>https://*.example.com/</emphasis> for example would match
  <emphasis>https://foo.example.com/</emphasis>, but not <emphasis>https://foo.bar.example.com/</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
Port number (e.g., <emphasis>8080</emphasis> in <emphasis>http://example.com:8080/</emphasis>).
  This field must match exactly between the config key and the URL.
  Omitted port numbers are automatically converted to the correct
  default for the scheme before matching.
</simpara>
</listitem>
<listitem>
<simpara>
Path (e.g., <emphasis>repo.git</emphasis> in <emphasis>https://example.com/repo.git</emphasis>). The
  path field of the config key must match the path field of the URL
  either exactly or as a prefix of slash-delimited path elements.  This means
  a config key with path <emphasis>foo/</emphasis> matches URL path <emphasis>foo/bar</emphasis>.  A prefix can only
  match on a slash (<emphasis>/</emphasis>) boundary.  Longer matches take precedence (so a config
  key with path <emphasis>foo/bar</emphasis> is a better match to URL path <emphasis>foo/bar</emphasis> than a config
  key with just path <emphasis>foo/</emphasis>).
</simpara>
</listitem>
<listitem>
<simpara>
User name (e.g., <emphasis>user</emphasis> in <emphasis>https://user@example.com/repo.git</emphasis>). If
  the config key has a user name it must match the user name in the
  URL exactly. If the config key does not have a user name, that
  config key will match a URL with any user name (including none),
  but at a lower precedence than a config key with a user name.
</simpara>
</listitem>
</orderedlist>
<simpara>The list above is ordered by decreasing precedence; a URL that matches
a config key's path is preferred to one that matches its user name. For example,
if the URL is <emphasis>https://user@example.com/foo/bar</emphasis> a config key match of
<emphasis>https://example.com/foo</emphasis> will be preferred over a config key match of
<emphasis>https://user@example.com</emphasis>.</simpara>
<simpara>All URLs are normalized before attempting any matching (the password part,
if embedded in the URL, is always ignored for matching purposes) so that
equivalent URLs that are simply spelled differently will match properly.
Environment variable settings always override any matches.  The URLs that are
matched against are those given directly to Git commands.  This means any URLs
visited as a result of a redirection do not participate in matching.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
i18n.commitEncoding
</term>
<listitem>
<simpara>
        Character encoding the commit messages are stored in; Git itself
        does not care per se, but this information is necessary e.g. when
        importing commits from emails or in the gitk graphical history
        browser (and possibly in other places in the future or in other
        porcelains). See e.g. <xref linkend="git-mailinfo(1)" />. Defaults to <emphasis>utf-8</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
i18n.logOutputEncoding
</term>
<listitem>
<simpara>
        Character encoding the commit messages are converted to when
        running <emphasis>git log</emphasis> and friends.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.folder
</term>
<listitem>
<simpara>
        The folder to drop the mails into, which is typically the Drafts
        folder. For example: "INBOX.Drafts", "INBOX/Drafts" or
        "[Gmail]/Drafts". Required.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.tunnel
</term>
<listitem>
<simpara>
        Command used to set up a tunnel to the IMAP server through which
        commands will be piped instead of using a direct network connection
        to the server. Required when imap.host is not set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.host
</term>
<listitem>
<simpara>
        A URL identifying the server. Use an <emphasis>imap://</emphasis> prefix for non-secure
        connections and an <emphasis>imaps://</emphasis> prefix for secure connections.
        Ignored when imap.tunnel is set, but required otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.user
</term>
<listitem>
<simpara>
        The username to use when logging in to the server.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.pass
</term>
<listitem>
<simpara>
        The password to use when logging in to the server.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.port
</term>
<listitem>
<simpara>
        An integer port number to connect to on the server.
        Defaults to 143 for imap:// hosts and 993 for imaps:// hosts.
        Ignored when imap.tunnel is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.sslverify
</term>
<listitem>
<simpara>
        A boolean to enable/disable verification of the server certificate
        used by the SSL/TLS connection. Default is <emphasis>true</emphasis>. Ignored when
        imap.tunnel is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.preformattedHTML
</term>
<listitem>
<simpara>
        A boolean to enable/disable the use of html encoding when sending
        a patch.  An html encoded patch will be bracketed with &lt;pre&gt;
        and have a content type of text/html.  Ironically, enabling this
        option causes Thunderbird to send the patch as a plain/text,
        format=fixed email.  Default is <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.authMethod
</term>
<listitem>
<simpara>
        Specify the authentication method for authenticating with the IMAP server.
        If Git was built with the NO_CURL option, or if your curl version is older
        than 7.34.0, or if you're running git-imap-send with the <emphasis>--no-curl</emphasis>
        option, the only supported method is <emphasis>CRAM-MD5</emphasis>. If this is not set
        then <emphasis>git imap-send</emphasis> uses the basic IMAP plaintext LOGIN command.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
include.path
</term>
<term>
includeIf.&lt;condition&gt;.path
</term>
<listitem>
<simpara>
        Special variables to include other configuration files. See
        the "CONFIGURATION FILE" section in the main
        <xref linkend="git-config(1)" /> documentation,
        specifically the "Includes" and "Conditional Includes" subsections.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.recordEndOfIndexEntries
</term>
<listitem>
<simpara>
        Specifies whether the index file should include an "End Of Index
        Entry" section. This reduces index load time on multiprocessor
        machines but produces a message "ignoring EOIE extension" when
        reading the index using Git versions before 2.20. Defaults to
        <emphasis>true</emphasis> if index.threads has been explicitly enabled, <emphasis>false</emphasis>
        otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.recordOffsetTable
</term>
<listitem>
<simpara>
        Specifies whether the index file should include an "Index Entry
        Offset Table" section. This reduces index load time on
        multiprocessor machines but produces a message "ignoring IEOT
        extension" when reading the index using Git versions before 2.20.
        Defaults to <emphasis>true</emphasis> if index.threads has been explicitly enabled,
        <emphasis>false</emphasis> otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.sparse
</term>
<listitem>
<simpara>
        When enabled, write the index using sparse-directory entries. This
        has no effect unless <emphasis>core.sparseCheckout</emphasis> and
        <emphasis>core.sparseCheckoutCone</emphasis> are both enabled. Defaults to <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.threads
</term>
<listitem>
<simpara>
        Specifies the number of threads to spawn when loading the index.
        This is meant to reduce index load time on multiprocessor machines.
        Specifying 0 or <emphasis>true</emphasis> will cause Git to auto-detect the number of
        CPUs and set the number of threads accordingly. Specifying 1 or
        <emphasis>false</emphasis> will disable multithreading. Defaults to <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.version
</term>
<listitem>
<simpara>
        Specify the version with which new index files should be
        initialized.  This does not affect existing repositories.
        If <emphasis>feature.manyFiles</emphasis> is enabled, then the default is 4.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.skipHash
</term>
<listitem>
<simpara>
        When enabled, do not compute the trailing hash for the index file.
        This accelerates Git commands that manipulate the index, such as
        <emphasis>git add</emphasis>, <emphasis>git commit</emphasis>, or <emphasis>git status</emphasis>. Instead of storing the
        checksum, write a trailing set of bytes with value zero, indicating
        that the computation was skipped.
</simpara>
<simpara>If you enable <emphasis>index.skipHash</emphasis>, then Git clients older than 2.13.0 will
refuse to parse the index and Git clients older than 2.40.0 will report an
error during <emphasis>git fsck</emphasis>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>
<emphasis>init.templateDir</emphasis>
</term>
<listitem>
<simpara>
        Specify the directory from which templates will be copied. (See the "TEMPLATE DIRECTORY" section of <xref linkend="git-init(1)" />.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>init.defaultBranch</emphasis>
</term>
<listitem>
<simpara>
        Allows overriding the default branch name e.g. when initializing
        a new repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>init.defaultObjectFormat</emphasis>
</term>
<listitem>
<simpara>
        Allows overriding the default object format for new repositories. See
        <emphasis>--object-format=</emphasis> in <xref linkend="git-init(1)" />. Both the command line option
        and the <emphasis>GIT_DEFAULT_HASH</emphasis> environment variable take precedence over
        this config.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>init.defaultRefFormat</emphasis>
</term>
<listitem>
<simpara>
        Allows overriding the default ref storage format for new repositories.
        See <emphasis>--ref-format=</emphasis> in <xref linkend="git-init(1)" />. Both the command line
        option and the <emphasis>GIT_DEFAULT_REF_FORMAT</emphasis> environment variable take
        precedence over this config.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.browser
</term>
<listitem>
<simpara>
        Specify the program that will be used to browse your working
        repository in gitweb. See <xref linkend="git-instaweb(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.httpd
</term>
<listitem>
<simpara>
        The HTTP daemon command-line to start gitweb on your working
        repository. See <xref linkend="git-instaweb(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.local
</term>
<listitem>
<simpara>
        If true the web server started by <xref linkend="git-instaweb(1)" /> will
        be bound to the local IP (127.0.0.1).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.modulePath
</term>
<listitem>
<simpara>
        The default module path for <xref linkend="git-instaweb(1)" /> to use
        instead of /usr/lib/apache2/modules.  Only used if httpd
        is Apache.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.port
</term>
<listitem>
<simpara>
        The port number to bind the gitweb httpd to. See
        <xref linkend="git-instaweb(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
interactive.singleKey
</term>
<listitem>
<simpara>
        When set to true, allow the user to provide one-letter input
        with a single key (i.e., without hitting the Enter key) in
        interactive commands.  This is currently used by the <emphasis>--patch</emphasis>
        mode of <xref linkend="git-add(1)" />, <xref linkend="git-checkout(1)" />,
        <xref linkend="git-restore(1)" />, <xref linkend="git-commit(1)" />,
        <xref linkend="git-reset(1)" />, and <xref linkend="git-stash(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
interactive.diffFilter
</term>
<listitem>
<simpara>
        When an interactive command (such as <emphasis>git add --patch</emphasis>) shows
        a colorized diff, git will pipe the diff through the shell
        command defined by this configuration variable. The command may
        mark up the diff further for human consumption, provided that it
        retains a one-to-one correspondence with the lines in the
        original diff. Defaults to disabled (no filtering).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.abbrevCommit
</term>
<listitem>
<simpara>
        If true, makes <xref linkend="git-log(1)" />, <xref linkend="git-show(1)" />, and
        <xref linkend="git-whatchanged(1)" /> assume <emphasis>--abbrev-commit</emphasis>. You may
        override this option with <emphasis>--no-abbrev-commit</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.date
</term>
<listitem>
<simpara>
        Set the default date-time mode for the <emphasis>log</emphasis> command.
        Setting a value for log.date is similar to using <emphasis>git log</emphasis>'s
        <emphasis>--date</emphasis> option.  See <xref linkend="git-log(1)" /> for details.
</simpara>
<simpara>If the format is set to "auto:foo" and the pager is in use, format
"foo" will be used for the date format. Otherwise, "default" will
be used.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.decorate
</term>
<listitem>
<simpara>
        Print out the ref names of any commits that are shown by the log
        command. If <emphasis>short</emphasis> is specified, the ref name prefixes <emphasis>refs/heads/</emphasis>,
        <emphasis>refs/tags/</emphasis> and <emphasis>refs/remotes/</emphasis> will not be printed. If <emphasis>full</emphasis> is
        specified, the full ref name (including prefix) will be printed.
        If <emphasis>auto</emphasis> is specified, then if the output is going to a terminal,
        the ref names are shown as if <emphasis>short</emphasis> were given, otherwise no ref
        names are shown. This is the same as the <emphasis>--decorate</emphasis> option
        of the <emphasis>git log</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.initialDecorationSet
</term>
<listitem>
<simpara>
        By default, <emphasis>git log</emphasis> only shows decorations for certain known ref
        namespaces. If <emphasis>all</emphasis> is specified, then show all refs as
        decorations.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.excludeDecoration
</term>
<listitem>
<simpara>
        Exclude the specified patterns from the log decorations. This is
        similar to the <emphasis>--decorate-refs-exclude</emphasis> command-line option, but
        the config option can be overridden by the <emphasis>--decorate-refs</emphasis>
        option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.diffMerges
</term>
<listitem>
<simpara>
        Set diff format to be used when <emphasis>--diff-merges=on</emphasis> is
        specified, see <emphasis>--diff-merges</emphasis> in <xref linkend="git-log(1)" /> for
        details. Defaults to <emphasis>separate</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.follow
</term>
<listitem>
<simpara>
        If <emphasis>true</emphasis>, <emphasis>git log</emphasis> will act as if the <emphasis>--follow</emphasis> option was used when
        a single &lt;path&gt; is given.  This has the same limitations as <emphasis>--follow</emphasis>,
        i.e. it cannot be used to follow multiple files and does not work well
        on non-linear history.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.graphColors
</term>
<listitem>
<simpara>
        A list of colors, separated by commas, that can be used to draw
        history lines in <emphasis>git log --graph</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.showRoot
</term>
<listitem>
<simpara>
        If true, the initial commit will be shown as a big creation event.
        This is equivalent to a diff against an empty tree.
        Tools like <xref linkend="git-log(1)" /> or <xref linkend="git-whatchanged(1)" />, which
        normally hide the root commit will now show it. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.showSignature
</term>
<listitem>
<simpara>
        If true, makes <xref linkend="git-log(1)" />, <xref linkend="git-show(1)" />, and
        <xref linkend="git-whatchanged(1)" /> assume <emphasis>--show-signature</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.mailmap
</term>
<listitem>
<simpara>
        If true, makes <xref linkend="git-log(1)" />, <xref linkend="git-show(1)" />, and
        <xref linkend="git-whatchanged(1)" /> assume <emphasis>--use-mailmap</emphasis>, otherwise
        assume <emphasis>--no-use-mailmap</emphasis>. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
lsrefs.unborn
</term>
<listitem>
<simpara>
        May be "advertise" (the default), "allow", or "ignore". If "advertise",
        the server will respond to the client sending "unborn" (as described in
        <xref linkend="gitprotocol-v2(5)" />) and will advertise support for this feature during the
        protocol v2 capability advertisement. "allow" is the same as
        "advertise" except that the server will not advertise support for this
        feature; this is useful for load-balanced servers that cannot be
        updated atomically (for example), since the administrator could
        configure "allow", then after a delay, configure "advertise".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mailinfo.scissors
</term>
<listitem>
<simpara>
        If true, makes <xref linkend="git-mailinfo(1)" /> (and therefore
        <xref linkend="git-am(1)" />) act by default as if the --scissors option
        was provided on the command-line. When active, this feature
        removes everything from the message body before a scissors
        line (i.e. consisting mainly of "&gt;8", "8&lt;" and "-").
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mailmap.file
</term>
<listitem>
<simpara>
        The location of an augmenting mailmap file. The default
        mailmap, located in the root of the repository, is loaded
        first, then the mailmap file pointed to by this variable.
        The location of the mailmap file may be in a repository
        subdirectory, or somewhere outside of the repository itself.
        See <xref linkend="git-shortlog(1)" /> and <xref linkend="git-blame(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mailmap.blob
</term>
<listitem>
<simpara>
        Like <emphasis>mailmap.file</emphasis>, but consider the value as a reference to a
        blob in the repository. If both <emphasis>mailmap.file</emphasis> and
        <emphasis>mailmap.blob</emphasis> are given, both are parsed, with entries from
        <emphasis>mailmap.file</emphasis> taking precedence. In a bare repository, this
        defaults to <emphasis>HEAD:.mailmap</emphasis>. In a non-bare repository, it
        defaults to empty.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.auto
</term>
<listitem>
<simpara>
        This boolean config option controls whether some commands run
        <emphasis>git maintenance run --auto</emphasis> after doing their normal work. Defaults
        to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.autoDetach
</term>
<listitem>
<simpara>
        Many Git commands trigger automatic maintenance after they have
        written data into the repository. This boolean config option
        controls whether this automatic maintenance shall happen in the
        foreground or whether the maintenance process shall detach and
        continue to run in the background.
</simpara>
<simpara>If unset, the value of <emphasis>gc.autoDetach</emphasis> is used as a fallback. Defaults
to true if both are unset, meaning that the maintenance process will
detach.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.strategy
</term>
<listitem>
<simpara>
        This string config option provides a way to specify one of a few
        recommended schedules for background maintenance. This only affects
        which tasks are run during <emphasis>git maintenance run --schedule=X</emphasis>
        commands, provided no <emphasis>--task=&lt;task&gt;</emphasis> arguments are provided.
        Further, if a <emphasis>maintenance.&lt;task&gt;.schedule</emphasis> config value is set,
        then that value is used instead of the one provided by
        <emphasis>maintenance.strategy</emphasis>. The possible strategy strings are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>none</emphasis>: This default setting implies no tasks are run at any schedule.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>incremental</emphasis>: This setting optimizes for performing small maintenance
  activities that do not delete any data. This does not schedule the <emphasis>gc</emphasis>
  task, but runs the <emphasis>prefetch</emphasis> and <emphasis>commit-graph</emphasis> tasks hourly, the
  <emphasis>loose-objects</emphasis> and <emphasis>incremental-repack</emphasis> tasks daily, and the <emphasis>pack-refs</emphasis>
  task weekly.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.&lt;task&gt;.enabled
</term>
<listitem>
<simpara>
        This boolean config option controls whether the maintenance task
        with name <emphasis>&lt;task&gt;</emphasis> is run when no <emphasis>--task</emphasis> option is specified to
        <emphasis>git maintenance run</emphasis>. These config values are ignored if a
        <emphasis>--task</emphasis> option exists. By default, only <emphasis>maintenance.gc.enabled</emphasis>
        is true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.&lt;task&gt;.schedule
</term>
<listitem>
<simpara>
        This config option controls whether or not the given <emphasis>&lt;task&gt;</emphasis> runs
        during a <emphasis>git maintenance run --schedule=&lt;frequency&gt;</emphasis> command. The
        value must be one of "hourly", "daily", or "weekly".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.commit-graph.auto
</term>
<listitem>
<simpara>
        This integer config option controls how often the <emphasis>commit-graph</emphasis> task
        should be run as part of <emphasis>git maintenance run --auto</emphasis>. If zero, then
        the <emphasis>commit-graph</emphasis> task will not run with the <emphasis>--auto</emphasis> option. A
        negative value will force the task to run every time. Otherwise, a
        positive value implies the command should run when the number of
        reachable commits that are not in the commit-graph file is at least
        the value of <emphasis>maintenance.commit-graph.auto</emphasis>. The default value is
        100.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.loose-objects.auto
</term>
<listitem>
<simpara>
        This integer config option controls how often the <emphasis>loose-objects</emphasis> task
        should be run as part of <emphasis>git maintenance run --auto</emphasis>. If zero, then
        the <emphasis>loose-objects</emphasis> task will not run with the <emphasis>--auto</emphasis> option. A
        negative value will force the task to run every time. Otherwise, a
        positive value implies the command should run when the number of
        loose objects is at least the value of <emphasis>maintenance.loose-objects.auto</emphasis>.
        The default value is 100.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.loose-objects.batchSize
</term>
<listitem>
<simpara>
        This integer config option controls the maximum number of loose objects
        written into a packfile during the <emphasis>loose-objects</emphasis> task. The default is
        fifty thousand. Use value <emphasis>0</emphasis> to indicate no limit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.incremental-repack.auto
</term>
<listitem>
<simpara>
        This integer config option controls how often the <emphasis>incremental-repack</emphasis>
        task should be run as part of <emphasis>git maintenance run --auto</emphasis>. If zero,
        then the <emphasis>incremental-repack</emphasis> task will not run with the <emphasis>--auto</emphasis>
        option. A negative value will force the task to run every time.
        Otherwise, a positive value implies the command should run when the
        number of pack-files not in the multi-pack-index is at least the value
        of <emphasis>maintenance.incremental-repack.auto</emphasis>. The default value is 10.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.reflog-expire.auto
</term>
<listitem>
<simpara>
        This integer config option controls how often the <emphasis>reflog-expire</emphasis> task
        should be run as part of <emphasis>git maintenance run --auto</emphasis>. If zero, then
        the <emphasis>reflog-expire</emphasis> task will not run with the <emphasis>--auto</emphasis> option. A
        negative value will force the task to run every time. Otherwise, a
        positive value implies the command should run when the number of
        expired reflog entries in the "HEAD" reflog is at least the value of
        <emphasis>maintenance.loose-objects.auto</emphasis>. The default value is 100.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.rerere-gc.auto
</term>
<listitem>
<simpara>
        This integer config option controls how often the <emphasis>rerere-gc</emphasis> task
        should be run as part of <emphasis>git maintenance run --auto</emphasis>. If zero, then
        the <emphasis>rerere-gc</emphasis> task will not run with the <emphasis>--auto</emphasis> option. A negative
        value will force the task to run every time. Otherwise, any positive
        value implies the command will run when the "rr-cache" directory exists
        and has at least one entry, regardless of whether it is stale or not.
        This heuristic may be refined in the future. The default value is 1.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.worktree-prune.auto
</term>
<listitem>
<simpara>
        This integer config option controls how often the <emphasis>worktree-prune</emphasis> task
        should be run as part of <emphasis>git maintenance run --auto</emphasis>. If zero, then
        the <emphasis>worktree-prune</emphasis> task will not run with the <emphasis>--auto</emphasis> option. A
        negative value will force the task to run every time. Otherwise, a
        positive value implies the command should run when the number of
        prunable worktrees exceeds the value. The default value is 1.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
man.viewer
</term>
<listitem>
<simpara>
        Specify the programs that may be used to display help in the
        <emphasis>man</emphasis> format. See <xref linkend="git-help(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
man.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified man viewer. The
        specified command is evaluated in shell with the man page
        passed as an argument. (See <xref linkend="git-help(1)" />.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
man.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool that may be used to
        display help in the <emphasis>man</emphasis> format. See <xref linkend="git-help(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.conflictStyle</emphasis>
</term>
<listitem>
<simpara>
        Specify the style in which conflicted hunks are written out to
        working tree files upon merge.  The default is "merge", which
        shows a <literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal> conflict marker, changes made by one side,
        a <emphasis>=======</emphasis> marker, changes made by the other side, and then
        a <literal>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</literal> marker.  An alternate style, "diff3", adds a <literal>|||||||</literal>
        marker and the original text before the <emphasis>=======</emphasis> marker.  The
        "merge" style tends to produce smaller conflict regions than diff3,
        both because of the exclusion of the original text, and because
        when a subset of lines match on the two sides, they are just pulled
        out of the conflict region.  Another alternate style, "zdiff3", is
        similar to diff3 but removes matching lines on the two sides from
        the conflict region when those matching lines appear near either
        the beginning or end of a conflict region.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.defaultToUpstream</emphasis>
</term>
<listitem>
<simpara>
        If merge is called without any commit argument, merge the upstream
        branches configured for the current branch by using their last
        observed values stored in their remote-tracking branches.
        The values of the <emphasis>branch.&lt;current branch&gt;.merge</emphasis> that name the
        branches at the remote named by <emphasis>branch.&lt;current-branch&gt;.remote</emphasis>
        are consulted, and then they are mapped via <emphasis>remote.&lt;remote&gt;.fetch</emphasis>
        to their corresponding remote-tracking branches, and the tips of
        these tracking branches are merged. Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.ff</emphasis>
</term>
<listitem>
<simpara>
        By default, Git does not create an extra merge commit when merging
        a commit that is a descendant of the current commit. Instead, the
        tip of the current branch is fast-forwarded. When set to <emphasis>false</emphasis>,
        this variable tells Git to create an extra merge commit in such
        a case (equivalent to giving the <emphasis>--no-ff</emphasis> option from the command
        line). When set to <emphasis>only</emphasis>, only such fast-forward merges are
        allowed (equivalent to giving the <emphasis>--ff-only</emphasis> option from the
        command line).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.verifySignatures</emphasis>
</term>
<listitem>
<simpara>
        If true, this is equivalent to the <emphasis>--verify-signatures</emphasis> command
        line option. See <xref linkend="git-merge(1)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.branchdesc</emphasis>
</term>
<listitem>
<simpara>
        In addition to branch names, populate the log message with
        the branch description text associated with them.  Defaults
        to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.log</emphasis>
</term>
<listitem>
<simpara>
        In addition to branch names, populate the log message with at
        most the specified number of one-line descriptions from the
        actual commits that are being merged.  Defaults to false, and
        true is a synonym for 20.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.suppressDest</emphasis>
</term>
<listitem>
<simpara>
        By adding a glob that matches the names of integration
        branches to this multi-valued configuration variable, the
        default merge message computed for merges into these
        integration branches will omit "into <emphasis>&lt;branch-name&gt;</emphasis>" from
        its title.
</simpara>
<simpara>An element with an empty value can be used to clear the list
of globs accumulated from previous configuration entries.
When there is no <emphasis>merge.suppressDest</emphasis> variable defined, the
default value of <emphasis>master</emphasis> is used for backward compatibility.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.renameLimit</emphasis>
</term>
<listitem>
<simpara>
        The number of files to consider in the exhaustive portion of
        rename detection during a merge.  If not specified, defaults
        to the value of <emphasis>diff.renameLimit</emphasis>.  If neither
        <emphasis>merge.renameLimit</emphasis> nor <emphasis>diff.renameLimit</emphasis> are specified,
        currently defaults to 7000.  This setting has no effect if
        rename detection is turned off.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.renames</emphasis>
</term>
<listitem>
<simpara>
        Whether Git detects renames.  If set to <emphasis>false</emphasis>, rename detection
        is disabled. If set to <emphasis>true</emphasis>, basic rename detection is enabled.
        Defaults to the value of diff.renames.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.directoryRenames</emphasis>
</term>
<listitem>
<simpara>
        Whether Git detects directory renames, affecting what happens at
        merge time to new files added to a directory on one side of
        history when that directory was renamed on the other side of
        history. Possible values are:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>false</emphasis>
</term>
<listitem>
<simpara>
Directory rename detection is disabled, meaning that such new files will be
        left behind in the old directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>true</emphasis>
</term>
<listitem>
<simpara>
Directory rename detection is enabled, meaning that such new files will be
        moved into the new directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>conflict</emphasis>
</term>
<listitem>
<simpara>
A conflict will be reported for such paths.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>If <emphasis>merge.renames</emphasis> is <emphasis>false</emphasis>, <emphasis>merge.directoryRenames</emphasis> is ignored and treated
as <emphasis>false</emphasis>. Defaults to <emphasis>conflict</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.renormalize</emphasis>
</term>
<listitem>
<simpara>
        Tell Git that canonical representation of files in the
        repository has changed over time (e.g. earlier commits record
        text files with <emphasis>CRLF</emphasis> line endings, but recent ones use <emphasis>LF</emphasis> line
        endings).  In such a repository, for each file where a
        three-way content merge is needed, Git can convert the data
        recorded in commits to a canonical form before performing a
        merge to reduce unnecessary conflicts.  For more information,
        see section "Merging branches with differing checkin/checkout
        attributes" in <xref linkend="gitattributes(5)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.stat</emphasis>
</term>
<listitem>
<simpara>
        Whether to print the diffstat between <emphasis>ORIG_HEAD</emphasis> and the merge result
        at the end of the merge.  True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.autoStash</emphasis>
</term>
<listitem>
<simpara>
        When set to <emphasis>true</emphasis>, automatically create a temporary stash entry
        before the operation begins, and apply it after the operation
        ends.  This means that you can run merge on a dirty worktree.
        However, use with care: the final stash application after a
        successful merge might result in non-trivial conflicts.
        This option can be overridden by the <emphasis>--no-autostash</emphasis> and
        <emphasis>--autostash</emphasis> options of <xref linkend="git-merge(1)" />.
        Defaults to <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.tool</emphasis>
</term>
<listitem>
<simpara>
        Controls which merge tool is used by <xref linkend="git-mergetool(1)" />.
        The list below shows the valid built-in values.
        Any other value is treated as a custom merge tool and requires
        that a corresponding <emphasis>mergetool.&lt;tool&gt;.cmd</emphasis> variable is defined.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.guitool</emphasis>
</term>
<listitem>
<simpara>
        Controls which merge tool is used by <xref linkend="git-mergetool(1)" /> when the
        <emphasis>-g</emphasis>/<emphasis>--gui</emphasis> flag is specified. The list below shows the valid built-in values.
        Any other value is treated as a custom merge tool and requires that a
        corresponding <emphasis>mergetool.&lt;guitool&gt;.cmd</emphasis> variable is defined.
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>araxis</emphasis>
</term>
<listitem>
<simpara>
Use Araxis Merge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>bc</emphasis>
</term>
<listitem>
<simpara>
Use Beyond Compare (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>bc3</emphasis>
</term>
<listitem>
<simpara>
Use Beyond Compare (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>bc4</emphasis>
</term>
<listitem>
<simpara>
Use Beyond Compare (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>codecompare</emphasis>
</term>
<listitem>
<simpara>
Use Code Compare (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>deltawalker</emphasis>
</term>
<listitem>
<simpara>
Use DeltaWalker (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diffmerge</emphasis>
</term>
<listitem>
<simpara>
Use DiffMerge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diffuse</emphasis>
</term>
<listitem>
<simpara>
Use Diffuse (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>ecmerge</emphasis>
</term>
<listitem>
<simpara>
Use ECMerge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>emerge</emphasis>
</term>
<listitem>
<simpara>
Use Emacs' Emerge
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>examdiff</emphasis>
</term>
<listitem>
<simpara>
Use ExamDiff Pro (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>guiffy</emphasis>
</term>
<listitem>
<simpara>
Use Guiffy's Diff Tool (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>gvimdiff</emphasis>
</term>
<listitem>
<simpara>
Use gVim (requires a graphical session) with a custom layout (see <emphasis>git help mergetool</emphasis>'s <emphasis>BACKEND SPECIFIC HINTS</emphasis> section)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>gvimdiff1</emphasis>
</term>
<listitem>
<simpara>
Use gVim (requires a graphical session) with a 2 panes layout (LOCAL and REMOTE)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>gvimdiff2</emphasis>
</term>
<listitem>
<simpara>
Use gVim (requires a graphical session) with a 3 panes layout (LOCAL, MERGED and REMOTE)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>gvimdiff3</emphasis>
</term>
<listitem>
<simpara>
Use gVim (requires a graphical session) where only the MERGED file is shown
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>kdiff3</emphasis>
</term>
<listitem>
<simpara>
Use KDiff3 (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>meld</emphasis>
</term>
<listitem>
<simpara>
Use Meld (requires a graphical session) with optional <emphasis>auto merge</emphasis> (see <emphasis>git help mergetool</emphasis>'s <emphasis>CONFIGURATION</emphasis> section)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>nvimdiff</emphasis>
</term>
<listitem>
<simpara>
Use Neovim with a custom layout (see <emphasis>git help mergetool</emphasis>'s <emphasis>BACKEND SPECIFIC HINTS</emphasis> section)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>nvimdiff1</emphasis>
</term>
<listitem>
<simpara>
Use Neovim with a 2 panes layout (LOCAL and REMOTE)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>nvimdiff2</emphasis>
</term>
<listitem>
<simpara>
Use Neovim with a 3 panes layout (LOCAL, MERGED and REMOTE)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>nvimdiff3</emphasis>
</term>
<listitem>
<simpara>
Use Neovim where only the MERGED file is shown
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>opendiff</emphasis>
</term>
<listitem>
<simpara>
Use FileMerge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>p4merge</emphasis>
</term>
<listitem>
<simpara>
Use HelixCore P4Merge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>smerge</emphasis>
</term>
<listitem>
<simpara>
Use Sublime Merge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>tkdiff</emphasis>
</term>
<listitem>
<simpara>
Use TkDiff (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>tortoisemerge</emphasis>
</term>
<listitem>
<simpara>
Use TortoiseMerge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>vimdiff</emphasis>
</term>
<listitem>
<simpara>
Use Vim with a custom layout (see <emphasis>git help mergetool</emphasis>'s <emphasis>BACKEND SPECIFIC HINTS</emphasis> section)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>vimdiff1</emphasis>
</term>
<listitem>
<simpara>
Use Vim with a 2 panes layout (LOCAL and REMOTE)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>vimdiff2</emphasis>
</term>
<listitem>
<simpara>
Use Vim with a 3 panes layout (LOCAL, MERGED and REMOTE)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>vimdiff3</emphasis>
</term>
<listitem>
<simpara>
Use Vim where only the MERGED file is shown
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>vscode</emphasis>
</term>
<listitem>
<simpara>
Use Visual Studio Code (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>winmerge</emphasis>
</term>
<listitem>
<simpara>
Use WinMerge (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>xxdiff</emphasis>
</term>
<listitem>
<simpara>
Use xxdiff (requires a graphical session)
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.verbosity</emphasis>
</term>
<listitem>
<simpara>
        Controls the amount of output shown by the recursive merge
        strategy.  Level 0 outputs nothing except a final error
        message if conflicts were detected. Level 1 outputs only
        conflicts, 2 outputs conflicts and file changes.  Level 5 and
        above outputs debugging information.  The default is level 2.
        Can be overridden by the <emphasis>GIT_MERGE_VERBOSITY</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.&lt;driver&gt;.name</emphasis>
</term>
<listitem>
<simpara>
        Defines a human-readable name for a custom low-level
        merge driver.  See <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.&lt;driver&gt;.driver</emphasis>
</term>
<listitem>
<simpara>
        Defines the command that implements a custom low-level
        merge driver.  See <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>merge.&lt;driver&gt;.recursive</emphasis>
</term>
<listitem>
<simpara>
        Names a low-level merge driver to be used when
        performing an internal merge between common ancestors.
        See <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.&lt;tool&gt;.path</emphasis>
</term>
<listitem>
<simpara>
        Override the path for the given tool.  This is useful in case
        your tool is not in the <emphasis>$PATH</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.&lt;tool&gt;.cmd</emphasis>
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified merge tool.  The
        specified command is evaluated in shell with the following
        variables available: <emphasis>BASE</emphasis> is the name of a temporary file
        containing the common base of the files to be merged, if available;
        <emphasis>LOCAL</emphasis> is the name of a temporary file containing the contents of
        the file on the current branch; <emphasis>REMOTE</emphasis> is the name of a temporary
        file containing the contents of the file from the branch being
        merged; <emphasis>MERGED</emphasis> contains the name of the file to which the merge
        tool should write the results of a successful merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.&lt;tool&gt;.hideResolved</emphasis>
</term>
<listitem>
<simpara>
        Allows the user to override the global <emphasis>mergetool.hideResolved</emphasis> value
        for a specific tool. See <emphasis>mergetool.hideResolved</emphasis> for the full
        description.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.&lt;tool&gt;.trustExitCode</emphasis>
</term>
<listitem>
<simpara>
        For a custom merge command, specify whether the exit code of
        the merge command can be used to determine whether the merge was
        successful.  If this is not set to true then the merge target file
        timestamp is checked, and the merge is assumed to have been successful
        if the file has been updated; otherwise, the user is prompted to
        indicate the success of the merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.meld.hasOutput</emphasis>
</term>
<listitem>
<simpara>
        Older versions of <emphasis>meld</emphasis> do not support the <emphasis>--output</emphasis> option.
        Git will attempt to detect whether <emphasis>meld</emphasis> supports <emphasis>--output</emphasis>
        by inspecting the output of <emphasis>meld --help</emphasis>.  Configuring
        <emphasis>mergetool.meld.hasOutput</emphasis> will make Git skip these checks and
        use the configured value instead.  Setting <emphasis>mergetool.meld.hasOutput</emphasis>
        to <emphasis>true</emphasis> tells Git to unconditionally use the <emphasis>--output</emphasis> option,
        and <emphasis>false</emphasis> avoids using <emphasis>--output</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.meld.useAutoMerge</emphasis>
</term>
<listitem>
<simpara>
        When the <emphasis>--auto-merge</emphasis> is given, meld will merge all non-conflicting
        parts automatically, highlight the conflicting parts, and wait for
        user decision.  Setting <emphasis>mergetool.meld.useAutoMerge</emphasis> to <emphasis>true</emphasis> tells
        Git to unconditionally use the <emphasis>--auto-merge</emphasis> option with <emphasis>meld</emphasis>.
        Setting this value to <emphasis>auto</emphasis> makes git detect whether <emphasis>--auto-merge</emphasis>
        is supported and will only use <emphasis>--auto-merge</emphasis> when available.  A
        value of <emphasis>false</emphasis> avoids using <emphasis>--auto-merge</emphasis> altogether, and is the
        default value.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.&lt;variant&gt;.layout</emphasis>
</term>
<listitem>
<simpara>
        Configure the split window layout for vimdiff's <emphasis>&lt;variant&gt;</emphasis>, which is any of <emphasis>vimdiff</emphasis>,
        <emphasis>nvimdiff</emphasis>, <emphasis>gvimdiff</emphasis>.
        Upon launching <emphasis>git mergetool</emphasis> with <emphasis>--tool=&lt;variant&gt;</emphasis> (or without <emphasis>--tool</emphasis>
        if <emphasis>merge.tool</emphasis> is configured as <emphasis>&lt;variant&gt;</emphasis>), Git will consult
        <emphasis>mergetool.&lt;variant&gt;.layout</emphasis> to determine the tool's layout. If the
        variant-specific configuration is not available, <emphasis>vimdiff</emphasis> ' s is used as
        fallback.  If that too is not available, a default layout with 4 windows
        will be used.  To configure the layout, see the <emphasis>BACKEND SPECIFIC HINTS</emphasis>
        section in <xref linkend="git-mergetool(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.hideResolved</emphasis>
</term>
<listitem>
<simpara>
        During a merge, Git will automatically resolve as many conflicts as
        possible and write the <emphasis>$MERGED</emphasis> file containing conflict markers around
        any conflicts that it cannot resolve; <emphasis>$LOCAL</emphasis> and <emphasis>$REMOTE</emphasis> normally
        are the versions of the file from before Git`s conflict
        resolution. This flag causes <emphasis>$LOCAL</emphasis> and <emphasis>$REMOTE</emphasis> to be overwritten so
        that only the unresolved conflicts are presented to the merge tool. Can
        be configured per-tool via the <emphasis>mergetool.&lt;tool&gt;.hideResolved</emphasis>
        configuration variable. Defaults to <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.keepBackup</emphasis>
</term>
<listitem>
<simpara>
        After performing a merge, the original file with conflict markers
        can be saved as a file with a <emphasis>.orig</emphasis> extension.  If this variable
        is set to <emphasis>false</emphasis> then this file is not preserved.  Defaults to
        <emphasis>true</emphasis> (i.e. keep the backup files).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.keepTemporaries</emphasis>
</term>
<listitem>
<simpara>
        When invoking a custom merge tool, Git uses a set of temporary
        files to pass to the tool. If the tool returns an error and this
        variable is set to <emphasis>true</emphasis>, then these temporary files will be
        preserved; otherwise, they will be removed after the tool has
        exited. Defaults to <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.writeToTemp</emphasis>
</term>
<listitem>
<simpara>
        Git writes temporary <emphasis>BASE</emphasis>, <emphasis>LOCAL</emphasis>, and <emphasis>REMOTE</emphasis> versions of
        conflicting files in the worktree by default.  Git will attempt
        to use a temporary directory for these files when set <emphasis>true</emphasis>.
        Defaults to <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.prompt</emphasis>
</term>
<listitem>
<simpara>
        Prompt before each invocation of the merge resolution program.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mergetool.guiDefault</emphasis>
</term>
<listitem>
<simpara>
        Set <emphasis>true</emphasis> to use the <emphasis>merge.guitool</emphasis> by default (equivalent to
        specifying the <emphasis>--gui</emphasis> argument), or <emphasis>auto</emphasis> to select <emphasis>merge.guitool</emphasis>
        or <emphasis>merge.tool</emphasis> depending on the presence of a <emphasis>DISPLAY</emphasis> environment
        variable value. The default is <emphasis>false</emphasis>, where the <emphasis>--gui</emphasis> argument
        must be provided explicitly for the <emphasis>merge.guitool</emphasis> to be used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.mergeStrategy</emphasis>
</term>
<listitem>
<simpara>
        Which merge strategy to choose by default when resolving notes
        conflicts.  Must be one of <emphasis>manual</emphasis>, <emphasis>ours</emphasis>, <emphasis>theirs</emphasis>, <emphasis>union</emphasis>, or
        <emphasis>cat_sort_uniq</emphasis>.  Defaults to <emphasis>manual</emphasis>.  See the "NOTES MERGE STRATEGIES"
        section of <xref linkend="git-notes(1)" /> for more information on each strategy.
</simpara>
<simpara>This setting can be overridden by passing the <emphasis>--strategy</emphasis> option to
<xref linkend="git-notes(1)" />.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.&lt;name&gt;.mergeStrategy</emphasis>
</term>
<listitem>
<simpara>
        Which merge strategy to choose when doing a notes merge into
        <emphasis>refs/notes/&lt;name&gt;</emphasis>.  This overrides the more general
        <emphasis>notes.mergeStrategy</emphasis>.  See the "NOTES MERGE STRATEGIES" section in
        <xref linkend="git-notes(1)" /> for more information on the available strategies.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.displayRef</emphasis>
</term>
<listitem>
<simpara>
        Which ref (or refs, if a glob or specified more than once), in
        addition to the default set by <emphasis>core.notesRef</emphasis> or
        <emphasis>GIT_NOTES_REF</emphasis>, to read notes from when showing commit
        messages with the <emphasis>git log</emphasis> family of commands.
</simpara>
<simpara>This setting can be overridden with the <emphasis>GIT_NOTES_DISPLAY_REF</emphasis>
environment variable, which must be a colon separated list of refs or
globs.</simpara>
<simpara>A warning will be issued for refs that do not exist,
but a glob that does not match any refs is silently ignored.</simpara>
<simpara>This setting can be disabled by the <emphasis>--no-notes</emphasis> option to the <xref linkend="git-log(1)" />
family of commands, or by the <emphasis>--notes=&lt;ref&gt;</emphasis> option accepted by
those commands.</simpara>
<simpara>The effective value of <emphasis>core.notesRef</emphasis> (possibly overridden by
<emphasis>GIT_NOTES_REF</emphasis>) is also implicitly added to the list of refs to be
displayed.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.rewrite.&lt;command&gt;</emphasis>
</term>
<listitem>
<simpara>
        When rewriting commits with <emphasis>&lt;command&gt;</emphasis> (currently <emphasis>amend</emphasis> or
        <emphasis>rebase</emphasis>), if this variable is <emphasis>false</emphasis>, git will not copy
        notes from the original to the rewritten commit.  Defaults to
        <emphasis>true</emphasis>.  See also <emphasis>notes.rewriteRef</emphasis> below.
</simpara>
<simpara>This setting can be overridden with the <emphasis>GIT_NOTES_REWRITE_REF</emphasis>
environment variable, which must be a colon separated list of refs or
globs.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.rewriteMode</emphasis>
</term>
<listitem>
<simpara>
        When copying notes during a rewrite (see the
        <emphasis>notes.rewrite.&lt;command&gt;</emphasis> option), determines what to do if
        the target commit already has a note.  Must be one of
        <emphasis>overwrite</emphasis>, <emphasis>concatenate</emphasis>, <emphasis>cat_sort_uniq</emphasis>, or <emphasis>ignore</emphasis>.
        Defaults to <emphasis>concatenate</emphasis>.
</simpara>
<simpara>This setting can be overridden with the <emphasis>GIT_NOTES_REWRITE_MODE</emphasis>
environment variable.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>notes.rewriteRef</emphasis>
</term>
<listitem>
<simpara>
        When copying notes during a rewrite, specifies the (fully
        qualified) ref whose notes should be copied.  May be a glob,
        in which case notes in all matching refs will be copied.  You
        may also specify this configuration several times.
</simpara>
<simpara>Does not have a default value; you must configure this variable to
enable note rewriting.  Set it to <emphasis>refs/notes/commits</emphasis> to enable
rewriting for the default commit notes.</simpara>
<simpara>Can be overridden with the <emphasis>GIT_NOTES_REWRITE_REF</emphasis> environment variable.
See <emphasis>notes.rewrite.&lt;command&gt;</emphasis> above for a further description of its format.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.window
</term>
<listitem>
<simpara>
        The size of the window used by <xref linkend="git-pack-objects(1)" /> when no
        window size is given on the command line. Defaults to 10.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.depth
</term>
<listitem>
<simpara>
        The maximum delta depth used by <xref linkend="git-pack-objects(1)" /> when no
        maximum depth is given on the command line. Defaults to 50.
        Maximum value is 4095.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.windowMemory
</term>
<listitem>
<simpara>
        The maximum size of memory that is consumed by each thread
        in <xref linkend="git-pack-objects(1)" /> for pack window memory when
        no limit is given on the command line.  The value can be
        suffixed with "k", "m", or "g".  When left unconfigured (or
        set explicitly to 0), there will be no limit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.compression
</term>
<listitem>
<simpara>
        An integer -1..9, indicating the compression level for objects
        in a pack file. -1 is the zlib default. 0 means no
        compression, and 1..9 are various speed/size tradeoffs, 9 being
        slowest.  If not set,  defaults to core.compression.  If that is
        not set,  defaults to -1, the zlib default, which is "a default
        compromise between speed and compression (currently equivalent
        to level 6)."
</simpara>
<simpara>Note that changing the compression level will not automatically recompress
all existing objects. You can force recompression by passing the -F option
to <xref linkend="git-repack(1)" />.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.allowPackReuse
</term>
<listitem>
<simpara>
        When true or "single", and when reachability bitmaps are
        enabled, pack-objects will try to send parts of the bitmapped
        packfile verbatim. When "multi", and when a multi-pack
        reachability bitmap is available, pack-objects will try to send
        parts of all packs in the MIDX.
</simpara>
<simpara>If only a single pack bitmap is available, and <emphasis>pack.allowPackReuse</emphasis>
is set to "multi", reuse parts of just the bitmapped packfile. This
can reduce memory and CPU usage to serve fetches, but might result in
sending a slightly larger pack. Defaults to true.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.island
</term>
<listitem>
<simpara>
        An extended regular expression configuring a set of delta
        islands. See "DELTA ISLANDS" in <xref linkend="git-pack-objects(1)" />
        for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.islandCore
</term>
<listitem>
<simpara>
        Specify an island name which gets to have its objects be
        packed first. This creates a kind of pseudo-pack at the front
        of one pack, so that the objects from the specified island are
        hopefully faster to copy into any pack that should be served
        to a user requesting these objects. In practice this means
        that the island specified should likely correspond to what is
        the most commonly cloned in the repo. See also "DELTA ISLANDS"
        in <xref linkend="git-pack-objects(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.deltaCacheSize
</term>
<listitem>
<simpara>
        The maximum memory in bytes used for caching deltas in
        <xref linkend="git-pack-objects(1)" /> before writing them out to a pack.
        This cache is used to speed up the writing object phase by not
        having to recompute the final delta result once the best match
        for all objects is found.  Repacking large repositories on machines
        which are tight with memory might be badly impacted by this though,
        especially if this cache pushes the system into swapping.
        A value of 0 means no limit. The smallest size of 1 byte may be
        used to virtually disable this cache. Defaults to 256 MiB.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.deltaCacheLimit
</term>
<listitem>
<simpara>
        The maximum size of a delta, that is cached in
        <xref linkend="git-pack-objects(1)" />. This cache is used to speed up the
        writing object phase by not having to recompute the final delta
        result once the best match for all objects is found.
        Defaults to 1000. Maximum value is 65535.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.threads
</term>
<listitem>
<simpara>
        Specifies the number of threads to spawn when searching for best
        delta matches.  This requires that <xref linkend="git-pack-objects(1)" />
        be compiled with pthreads otherwise this option is ignored with a
        warning. This is meant to reduce packing time on multiprocessor
        machines. The required amount of memory for the delta search window
        is however multiplied by the number of threads.
        Specifying 0 will cause Git to auto-detect the number of CPUs
        and set the number of threads accordingly.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.indexVersion
</term>
<listitem>
<simpara>
        Specify the default pack index version.  Valid values are 1 for
        legacy pack index used by Git versions prior to 1.5.2, and 2 for
        the new pack index with capabilities for packs larger than 4 GB
        as well as proper protection against the repacking of corrupted
        packs.  Version 2 is the default.  Note that version 2 is enforced
        and this config option is ignored whenever the corresponding pack is
        larger than 2 GB.
</simpara>
<simpara>If you have an old Git that does not understand the version 2 <emphasis>*.idx</emphasis> file,
cloning or fetching over a non-native protocol (e.g. "http")
that will copy both <emphasis>*.pack</emphasis> file and corresponding <emphasis>*.idx</emphasis> file from the
other side may give you a repository that cannot be accessed with your
older version of Git. If the <emphasis>*.pack</emphasis> file is smaller than 2 GB, however,
you can use <xref linkend="git-index-pack(1)" /> on the *.pack file to regenerate
the <emphasis>*.idx</emphasis> file.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.packSizeLimit
</term>
<listitem>
<simpara>
        The maximum size of a pack.  This setting only affects
        packing to a file when repacking, i.e. the git:// protocol
        is unaffected.  It can be overridden by the <emphasis>--max-pack-size</emphasis>
        option of <xref linkend="git-repack(1)" />.  Reaching this limit results
        in the creation of multiple packfiles.
</simpara>
<simpara>Note that this option is rarely useful, and may result in a larger total
on-disk size (because Git will not store deltas between packs) and
worse runtime performance (object lookup within multiple packs is
slower than a single pack, and optimizations like reachability bitmaps
cannot cope with multiple packs).</simpara>
<simpara>If you need to actively run Git using smaller packfiles (e.g., because your
filesystem does not support large files), this option may help. But if
your goal is to transmit a packfile over a medium that supports limited
sizes (e.g., removable media that cannot store the whole repository),
you are likely better off creating a single large packfile and splitting
it using a generic multi-volume archive tool (e.g., Unix <emphasis>split</emphasis>).</simpara>
<simpara>The minimum size allowed is limited to 1 MiB. The default is unlimited.
Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.useBitmaps
</term>
<listitem>
<simpara>
        When true, git will use pack bitmaps (if available) when packing
        to stdout (e.g., during the server side of a fetch). Defaults to
        true. You should not generally need to turn this off unless
        you are debugging pack bitmaps.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.useBitmapBoundaryTraversal
</term>
<listitem>
<simpara>
        When true, Git will use an experimental algorithm for computing
        reachability queries with bitmaps. Instead of building up
        complete bitmaps for all of the negated tips and then OR-ing
        them together, consider negated tips with existing bitmaps as
        additive (i.e. OR-ing them into the result if they exist,
        ignoring them otherwise), and build up a bitmap at the boundary
        instead.
</simpara>
<simpara>When using this algorithm, Git may include too many objects as a result
of not opening up trees belonging to certain UNINTERESTING commits. This
inexactness matches the non-bitmap traversal algorithm.</simpara>
<simpara>In many cases, this can provide a speed-up over the exact algorithm,
particularly when there is poor bitmap coverage of the negated side of
the query.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.useSparse
</term>
<listitem>
<simpara>
        When true, git will default to using the <emphasis>--sparse</emphasis> option in
        <emphasis>git pack-objects</emphasis> when the <emphasis>--revs</emphasis> option is present. This
        algorithm only walks trees that appear in paths that introduce new
        objects. This can have significant performance benefits when
        computing a pack to send a small change. However, it is possible
        that extra objects are added to the pack-file if the included
        commits contain certain types of direct renames. Default is
        <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.preferBitmapTips
</term>
<listitem>
<simpara>
        When selecting which commits will receive bitmaps, prefer a
        commit at the tip of any reference that is a suffix of any value
        of this configuration over any other commits in the "selection
        window".
</simpara>
<simpara>Note that setting this configuration to <emphasis>refs/foo</emphasis> does not mean that
the commits at the tips of <emphasis>refs/foo/bar</emphasis> and <emphasis>refs/foo/baz</emphasis> will
necessarily be selected. This is because commits are selected for
bitmaps from within a series of windows of variable length.</simpara>
<simpara>If a commit at the tip of any reference which is a suffix of any value
of this configuration is seen in a window, it is immediately given
preference over any other commit in that window.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.writeBitmaps (deprecated)
</term>
<listitem>
<simpara>
        This is a deprecated synonym for <emphasis>repack.writeBitmaps</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.writeBitmapHashCache
</term>
<listitem>
<simpara>
        When true, git will include a "hash cache" section in the bitmap
        index (if one is written). This cache can be used to feed git's
        delta heuristics, potentially leading to better deltas between
        bitmapped and non-bitmapped objects (e.g., when serving a fetch
        between an older, bitmapped pack and objects that have been
        pushed since the last gc). The downside is that it consumes 4
        bytes per object of disk space. Defaults to true.
</simpara>
<simpara>When writing a multi-pack reachability bitmap, no new namehashes are
computed; instead, any namehashes stored in an existing bitmap are
permuted into their appropriate location when writing a new bitmap.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.writeBitmapLookupTable
</term>
<listitem>
<simpara>
        When true, Git will include a "lookup table" section in the
        bitmap index (if one is written). This table is used to defer
        loading individual bitmaps as late as possible. This can be
        beneficial in repositories that have relatively large bitmap
        indexes. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.readReverseIndex
</term>
<listitem>
<simpara>
        When true, git will read any .rev file(s) that may be available
        (see: <xref linkend="gitformat-pack(5)" />). When false, the reverse index
        will be generated from scratch and stored in memory. Defaults to
        true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.writeReverseIndex
</term>
<listitem>
<simpara>
        When true, git will write a corresponding .rev file (see:
        <xref linkend="gitformat-pack(5)" />)
        for each new packfile that it writes in all places except for
        <xref linkend="git-fast-import(1)" /> and in the bulk checkin mechanism.
        Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pager.&lt;cmd&gt;
</term>
<listitem>
<simpara>
        If the value is boolean, turns on or off pagination of the
        output of a particular Git subcommand when writing to a tty.
        Otherwise, turns on pagination for the subcommand using the
        pager specified by the value of <emphasis>pager.&lt;cmd&gt;</emphasis>.  If <emphasis>--paginate</emphasis>
        or <emphasis>--no-pager</emphasis> is specified on the command line, it takes
        precedence over this option.  To disable pagination for all
        commands, set <emphasis>core.pager</emphasis> or <emphasis>GIT_PAGER</emphasis> to <emphasis>cat</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pretty.&lt;name&gt;
</term>
<listitem>
<simpara>
        Alias for a --pretty= format string, as specified in
        <xref linkend="git-log(1)" />. Any aliases defined here can be used just
        as the built-in pretty formats could. For example,
        running <emphasis>git config pretty.changelog "format:* %H %s"</emphasis>
        would cause the invocation <emphasis>git log --pretty=changelog</emphasis>
        to be equivalent to running <emphasis>git log "--pretty=format:* %H %s"</emphasis>.
        Note that an alias with the same name as a built-in format
        will be silently ignored.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
promisor.quiet
</term>
<listitem>
<simpara>
        If set to "true" assume <emphasis>--quiet</emphasis> when fetching additional
        objects for a partial clone.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
promisor.advertise
</term>
<listitem>
<simpara>
        If set to "true", a server will use the "promisor-remote"
        capability, see <xref linkend="gitprotocol-v2(5)" />, to advertise the
        promisor remotes it is using, if it uses some. Default is
        "false", which means the "promisor-remote" capability is not
        advertised.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
promisor.acceptFromServer
</term>
<listitem>
<simpara>
        If set to "all", a client will accept all the promisor remotes
        a server might advertise using the "promisor-remote"
        capability. If set to "knownName" the client will accept
        promisor remotes which are already configured on the client
        and have the same name as those advertised by the client. This
        is not very secure, but could be used in a corporate setup
        where servers and clients are trusted to not switch name and
        URLs. If set to "knownUrl", the client will accept promisor
        remotes which have both the same name and the same URL
        configured on the client as the name and URL advertised by the
        server. This is more secure than "all" or "knownName", so it
        should be used if possible instead of those options. Default
        is "none", which means no promisor remote advertised by a
        server will be accepted. By accepting a promisor remote, the
        client agrees that the server might omit objects that are
        lazily fetchable from this promisor remote from its responses
        to "fetch" and "clone" requests from the client. Name and URL
        comparisons are case sensitive. See <xref linkend="gitprotocol-v2(5)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
protocol.allow
</term>
<listitem>
<simpara>
        If set, provide a user defined default policy for all protocols which
        don't explicitly have a policy (<emphasis>protocol.&lt;name&gt;.allow</emphasis>).  By default,
        if unset, known-safe protocols (http, https, git, ssh) have a
        default policy of <emphasis>always</emphasis>, known-dangerous protocols (ext) have a
        default policy of <emphasis>never</emphasis>, and all other protocols (including file)
        have a default policy of <emphasis>user</emphasis>.  Supported policies:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>always</emphasis> - protocol is always able to be used.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>never</emphasis> - protocol is never able to be used.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>user</emphasis> - protocol is only able to be used when <emphasis>GIT_PROTOCOL_FROM_USER</emphasis> is
  either unset or has a value of 1.  This policy should be used when you want a
  protocol to be directly usable by the user but don't want it used by commands which
  execute clone/fetch/push commands without user input, e.g. recursive
  submodule initialization.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
protocol.&lt;name&gt;.allow
</term>
<listitem>
<simpara>
        Set a policy to be used by protocol <emphasis>&lt;name&gt;</emphasis> with clone/fetch/push
        commands. See <emphasis>protocol.allow</emphasis> above for the available policies.
</simpara>
<simpara>The protocol names currently used by git are:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>file</emphasis>: any local file-based path (including <emphasis>file://</emphasis> URLs,
    or local paths)
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>git</emphasis>: the anonymous git protocol over a direct TCP
    connection (or proxy, if configured)
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>ssh</emphasis>: git over ssh (including <emphasis>host:path</emphasis> syntax,
    <emphasis>ssh://</emphasis>, etc).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>http</emphasis>: git over http, both "smart http" and "dumb http".
    Note that this does <emphasis>not</emphasis> include <emphasis>https</emphasis>; if you want to configure
    both, you must do so individually.
</simpara>
</listitem>
<listitem>
<simpara>
any external helpers are named by their protocol (e.g., use
    <emphasis>hg</emphasis> to allow the <emphasis>git-remote-hg</emphasis> helper)
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
protocol.version
</term>
<listitem>
<simpara>
        If set, clients will attempt to communicate with a server
        using the specified protocol version.  If the server does
        not support it, communication falls back to version 0.
        If unset, the default is <emphasis>2</emphasis>.
        Supported versions:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>0</emphasis> - the original wire protocol.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>1</emphasis> - the original wire protocol with the addition of a version string
  in the initial response from the server.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>2</emphasis> - Wire protocol version 2, see <xref linkend="gitprotocol-v2(5)" />.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
pull.ff
</term>
<listitem>
<simpara>
        By default, Git does not create an extra merge commit when merging
        a commit that is a descendant of the current commit. Instead, the
        tip of the current branch is fast-forwarded. When set to <emphasis>false</emphasis>,
        this variable tells Git to create an extra merge commit in such
        a case (equivalent to giving the <emphasis>--no-ff</emphasis> option from the command
        line). When set to <emphasis>only</emphasis>, only such fast-forward merges are
        allowed (equivalent to giving the <emphasis>--ff-only</emphasis> option from the
        command line). This setting overrides <emphasis>merge.ff</emphasis> when pulling.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pull.rebase
</term>
<listitem>
<simpara>
        When true, rebase branches on top of the fetched branch, instead
        of merging the default branch from the default remote when "git
        pull" is run. See "branch.&lt;name&gt;.rebase" for setting this on a
        per-branch basis.
</simpara>
<simpara>When <emphasis>merges</emphasis> (or just <emphasis>m</emphasis>), pass the <emphasis>--rebase-merges</emphasis> option to <emphasis>git rebase</emphasis>
so that the local merge commits are included in the rebase (see
<xref linkend="git-rebase(1)" /> for details).</simpara>
<simpara>When the value is <emphasis>interactive</emphasis> (or just <emphasis>i</emphasis>), the rebase is run in interactive
mode.</simpara>
<simpara><emphasis role="strong">NOTE</emphasis>: this is a possibly dangerous operation; do <emphasis role="strong">not</emphasis> use
it unless you understand the implications (see <xref linkend="git-rebase(1)" />
for details).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pull.octopus
</term>
<listitem>
<simpara>
        The default merge strategy to use when pulling multiple branches
        at once.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pull.twohead
</term>
<listitem>
<simpara>
        The default merge strategy to use when pulling a single branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.autoSetupRemote
</term>
<listitem>
<simpara>
        If set to "true" assume <emphasis>--set-upstream</emphasis> on default push when no
        upstream tracking exists for the current branch; this option
        takes effect with push.default options <emphasis>simple</emphasis>, <emphasis>upstream</emphasis>,
        and <emphasis>current</emphasis>. It is useful if by default you want new branches
        to be pushed to the default remote (like the behavior of
        <emphasis>push.default=current</emphasis>) and you also want the upstream tracking
        to be set. Workflows most likely to benefit from this option are
        <emphasis>simple</emphasis> central workflows where all branches are expected to
        have the same name on the remote.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.default
</term>
<listitem>
<simpara>
        Defines the action <emphasis>git push</emphasis> should take if no refspec is
        given (whether from the command-line, config, or elsewhere).
        Different values are well-suited for
        specific workflows; for instance, in a purely central workflow
        (i.e. the fetch source is equal to the push destination),
        <emphasis>upstream</emphasis> is probably what you want.  Possible values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>nothing</emphasis> - do not push anything (error out) unless a refspec is
  given. This is primarily meant for people who want to
  avoid mistakes by always being explicit.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>current</emphasis> - push the current branch to update a branch with the same
  name on the receiving end.  Works in both central and non-central
  workflows.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>upstream</emphasis> - push the current branch back to the branch whose
  changes are usually integrated into the current branch (which is
  called <emphasis>@{upstream}</emphasis>).  This mode only makes sense if you are
  pushing to the same repository you would normally pull from
  (i.e. central workflow).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>tracking</emphasis> - This is a deprecated synonym for <emphasis>upstream</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>simple</emphasis> - push the current branch with the same name on the remote.
</simpara>
<simpara>If you are working on a centralized workflow (pushing to the same repository you
pull from, which is typically <emphasis>origin</emphasis>), then you need to configure an upstream
branch with the same name.</simpara>
<simpara>This mode is the default since Git 2.0, and is the safest option suited for
beginners.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>matching</emphasis> - push all branches having the same name on both ends.
  This makes the repository you are pushing to remember the set of
  branches that will be pushed out (e.g. if you always push <emphasis>maint</emphasis>
  and <emphasis>master</emphasis> there and no other branches, the repository you push
  to will have these two branches, and your local <emphasis>maint</emphasis> and
  <emphasis>master</emphasis> will be pushed there).
</simpara>
<simpara>To use this mode effectively, you have to make sure <emphasis>all</emphasis> the
branches you would push out are ready to be pushed out before
running <emphasis>git push</emphasis>, as the whole point of this mode is to allow you
to push all of the branches in one go.  If you usually finish work
on only one branch and push out the result, while other branches are
unfinished, this mode is not for you.  Also this mode is not
suitable for pushing into a shared central repository, as other
people may add new branches there, or update the tip of existing
branches outside your control.</simpara>
<simpara>This used to be the default, but not since Git 2.0 (<emphasis>simple</emphasis> is the
new default).</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.followTags
</term>
<listitem>
<simpara>
        If set to true, enable <emphasis>--follow-tags</emphasis> option by default.  You
        may override this configuration at time of push by specifying
        <emphasis>--no-follow-tags</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.gpgSign
</term>
<listitem>
<simpara>
        May be set to a boolean value, or the string <emphasis>if-asked</emphasis>. A true
        value causes all pushes to be GPG signed, as if <emphasis>--signed</emphasis> is
        passed to <xref linkend="git-push(1)" />. The string <emphasis>if-asked</emphasis> causes
        pushes to be signed if the server supports it, as if
        <emphasis>--signed=if-asked</emphasis> is passed to <emphasis>git push</emphasis>. A false value may
        override a value from a lower-priority config file. An explicit
        command-line flag always overrides this config option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.pushOption
</term>
<listitem>
<simpara>
        When no <emphasis>--push-option=&lt;option&gt;</emphasis> argument is given from the
        command line, <emphasis>git push</emphasis> behaves as if each &lt;value&gt; of
        this variable is given as <emphasis>--push-option=&lt;value&gt;</emphasis>.
</simpara>
<simpara>This is a multi-valued variable, and an empty value can be used in a
higher priority configuration file (e.g. <emphasis>.git/config</emphasis> in a
repository) to clear the values inherited from a lower priority
configuration files (e.g. <emphasis>$HOME/.gitconfig</emphasis>).</simpara>
<screen>Example:

/etc/gitconfig
  push.pushoption = a
  push.pushoption = b

~/.gitconfig
  push.pushoption = c

repo/.git/config
  push.pushoption =
  push.pushoption = b

This will result in only b (a and c are cleared).</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.recurseSubmodules
</term>
<listitem>
<simpara>
        May be "check", "on-demand", "only", or "no", with the same behavior
        as that of "push --recurse-submodules".
        If not set, <emphasis>no</emphasis> is used by default, unless <emphasis>submodule.recurse</emphasis> is
        set (in which case a <emphasis>true</emphasis> value means <emphasis>on-demand</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.useForceIfIncludes
</term>
<listitem>
<simpara>
        If set to "true", it is equivalent to specifying
        <emphasis>--force-if-includes</emphasis> as an option to <xref linkend="git-push(1)" />
        in the command line. Adding <emphasis>--no-force-if-includes</emphasis> at the
        time of push overrides this configuration setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.negotiate
</term>
<listitem>
<simpara>
        If set to "true", attempt to reduce the size of the packfile
        sent by rounds of negotiation in which the client and the
        server attempt to find commits in common. If "false", Git will
        rely solely on the server's ref advertisement to find commits
        in common.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.useBitmaps
</term>
<listitem>
<simpara>
        If set to "false", disable use of bitmaps for "git push" even if
        <emphasis>pack.useBitmaps</emphasis> is "true", without preventing other git operations
        from using bitmaps. Default is true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.backend
</term>
<listitem>
<simpara>
        Default backend to use for rebasing.  Possible choices are
        <emphasis>apply</emphasis> or <emphasis>merge</emphasis>.  In the future, if the merge backend gains
        all remaining capabilities of the apply backend, this setting
        may become unused.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.stat
</term>
<listitem>
<simpara>
        Whether to show a diffstat of what changed upstream since the last
        rebase. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.autoSquash
</term>
<listitem>
<simpara>
        If set to true, enable the <emphasis>--autosquash</emphasis> option of
        <xref linkend="git-rebase(1)" /> by default for interactive mode.
        This can be overridden with the <emphasis>--no-autosquash</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.autoStash
</term>
<listitem>
<simpara>
        When set to true, automatically create a temporary stash entry
        before the operation begins, and apply it after the operation
        ends.  This means that you can run rebase on a dirty worktree.
        However, use with care: the final stash application after a
        successful rebase might result in non-trivial conflicts.
        This option can be overridden by the <emphasis>--no-autostash</emphasis> and
        <emphasis>--autostash</emphasis> options of <xref linkend="git-rebase(1)" />.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.updateRefs
</term>
<listitem>
<simpara>
        If set to true enable <emphasis>--update-refs</emphasis> option by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.missingCommitsCheck
</term>
<listitem>
<simpara>
        If set to "warn", git rebase -i will print a warning if some
        commits are removed (e.g. a line was deleted), however the
        rebase will still proceed. If set to "error", it will print
        the previous warning and stop the rebase, <emphasis>git rebase
        --edit-todo</emphasis> can then be used to correct the error. If set to
        "ignore", no checking is done.
        To drop a commit without warning or error, use the <emphasis>drop</emphasis>
        command in the todo list.
        Defaults to "ignore".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.instructionFormat
</term>
<listitem>
<simpara>
        A format string, as specified in <xref linkend="git-log(1)" />, to be used for the
        todo list during an interactive rebase.  The format will
        automatically have the commit hash prepended to the format.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.abbreviateCommands
</term>
<listitem>
<simpara>
        If set to true, <emphasis>git rebase</emphasis> will use abbreviated command names in the
        todo list resulting in something like this:
</simpara>
<screen>        p deadbee The oneline of the commit
        p fa1afe1 The oneline of the next commit
        ...</screen>
<simpara>instead of:</simpara>
<screen>        pick deadbee The oneline of the commit
        pick fa1afe1 The oneline of the next commit
        ...</screen>
<simpara>Defaults to false.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.rescheduleFailedExec
</term>
<listitem>
<simpara>
        Automatically reschedule <emphasis>exec</emphasis> commands that failed. This only makes
        sense in interactive mode (or when an <emphasis>--exec</emphasis> option was provided).
        This is the same as specifying the <emphasis>--reschedule-failed-exec</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.forkPoint
</term>
<listitem>
<simpara>
        If set to false set <emphasis>--no-fork-point</emphasis> option by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.rebaseMerges
</term>
<listitem>
<simpara>
        Whether and how to set the <emphasis>--rebase-merges</emphasis> option by default. Can
        be <emphasis>rebase-cousins</emphasis>, <emphasis>no-rebase-cousins</emphasis>, or a boolean. Setting to
        true or to <emphasis>no-rebase-cousins</emphasis> is equivalent to
        <emphasis>--rebase-merges=no-rebase-cousins</emphasis>, setting to <emphasis>rebase-cousins</emphasis> is
        equivalent to <emphasis>--rebase-merges=rebase-cousins</emphasis>, and setting to false is
        equivalent to <emphasis>--no-rebase-merges</emphasis>. Passing <emphasis>--rebase-merges</emphasis> on the
        command line, with or without an argument, overrides any
        <emphasis>rebase.rebaseMerges</emphasis> configuration.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.maxLabelLength
</term>
<listitem>
<simpara>
        When generating label names from commit subjects, truncate the names to
        this length. By default, the names are truncated to a little less than
        <emphasis>NAME_MAX</emphasis> (to allow e.g. <emphasis>.lock</emphasis> files to be written for the
        corresponding loose refs).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.advertiseAtomic
</term>
<listitem>
<simpara>
        By default, git-receive-pack will advertise the atomic push
        capability to its clients. If you don't want to advertise this
        capability, set this variable to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.advertisePushOptions
</term>
<listitem>
<simpara>
        When set to true, git-receive-pack will advertise the push options
        capability to its clients. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.autogc
</term>
<listitem>
<simpara>
        By default, git-receive-pack will run "git maintenance run --auto" after
        receiving data from git-push and updating refs.  You can stop
        it by setting this variable to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.certNonceSeed
</term>
<listitem>
<simpara>
        By setting this variable to a string, <emphasis>git receive-pack</emphasis>
        will accept a <emphasis>git push --signed</emphasis> and verify it by using
        a "nonce" protected by HMAC using this string as a secret
        key.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.certNonceSlop
</term>
<listitem>
<simpara>
        When a <emphasis>git push --signed</emphasis> sends a push certificate with a
        "nonce" that was issued by a receive-pack serving the same
        repository within this many seconds, export the "nonce"
        found in the certificate to <emphasis>GIT_PUSH_CERT_NONCE</emphasis> to the
        hooks (instead of what the receive-pack asked the sending
        side to include).  This may allow writing checks in
        <emphasis>pre-receive</emphasis> and <emphasis>post-receive</emphasis> a bit easier.  Instead of
        checking <emphasis>GIT_PUSH_CERT_NONCE_SLOP</emphasis> environment variable
        that records by how many seconds the nonce is stale to
        decide if they want to accept the certificate, they only
        can check <emphasis>GIT_PUSH_CERT_NONCE_STATUS</emphasis> is <emphasis>OK</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.fsckObjects
</term>
<listitem>
<simpara>
        If it is set to true, git-receive-pack will check all received
        objects. See <emphasis>transfer.fsckObjects</emphasis> for what's checked.
        Defaults to false. If not set, the value of
        <emphasis>transfer.fsckObjects</emphasis> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.fsck.&lt;msg-id&gt;
</term>
<listitem>
<simpara>
        Acts like <emphasis>fsck.&lt;msg-id&gt;</emphasis>, but is used by
        <xref linkend="git-receive-pack(1)" /> instead of
        <xref linkend="git-fsck(1)" />. See the <emphasis>fsck.&lt;msg-id&gt;</emphasis> documentation for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.fsck.skipList
</term>
<listitem>
<simpara>
        Acts like <emphasis>fsck.skipList</emphasis>, but is used by
        <xref linkend="git-receive-pack(1)" /> instead of
        <xref linkend="git-fsck(1)" />. See the <emphasis>fsck.skipList</emphasis> documentation for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.keepAlive
</term>
<listitem>
<simpara>
        After receiving the pack from the client, <emphasis>receive-pack</emphasis> may
        produce no output (if <emphasis>--quiet</emphasis> was specified) while processing
        the pack, causing some networks to drop the TCP connection.
        With this option set, if <emphasis>receive-pack</emphasis> does not transmit
        any data in this phase for <emphasis>receive.keepAlive</emphasis> seconds, it will
        send a short keepalive packet.  The default is 5 seconds; set
        to 0 to disable keepalives entirely.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.unpackLimit
</term>
<listitem>
<simpara>
        If the number of objects received in a push is below this
        limit then the objects will be unpacked into loose object
        files. However if the number of received objects equals or
        exceeds this limit then the received pack will be stored as
        a pack, after adding any missing delta bases.  Storing the
        pack from a push can make the push operation complete faster,
        especially on slow filesystems.  If not set, the value of
        <emphasis>transfer.unpackLimit</emphasis> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.maxInputSize
</term>
<listitem>
<simpara>
        If the size of the incoming pack stream is larger than this
        limit, then git-receive-pack will error out, instead of
        accepting the pack file. If not set or set to 0, then the size
        is unlimited.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyDeletes
</term>
<listitem>
<simpara>
        If set to true, git-receive-pack will deny a ref update that deletes
        the ref. Use this to prevent such a ref deletion via a push.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyDeleteCurrent
</term>
<listitem>
<simpara>
        If set to true, git-receive-pack will deny a ref update that
        deletes the currently checked out branch of a non-bare repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyCurrentBranch
</term>
<listitem>
<simpara>
        If set to true or "refuse", git-receive-pack will deny a ref update
        to the currently checked out branch of a non-bare repository.
        Such a push is potentially dangerous because it brings the HEAD
        out of sync with the index and working tree. If set to "warn",
        print a warning of such a push to stderr, but allow the push to
        proceed. If set to false or "ignore", allow such pushes with no
        message. Defaults to "refuse".
</simpara>
<simpara>Another option is "updateInstead" which will update the working
tree if pushing into the current branch.  This option is
intended for synchronizing working directories when one side is not easily
accessible via interactive ssh (e.g. a live web site, hence the requirement
that the working directory be clean). This mode also comes in handy when
developing inside a VM to test and fix code on different Operating Systems.</simpara>
<simpara>By default, "updateInstead" will refuse the push if the working tree or
the index have any difference from the HEAD, but the <emphasis>push-to-checkout</emphasis>
hook can be used to customize this.  See <xref linkend="githooks(5)" />.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyNonFastForwards
</term>
<listitem>
<simpara>
        If set to true, git-receive-pack will deny a ref update which is
        not a fast-forward. Use this to prevent such an update via a push,
        even if that push is forced. This configuration variable is
        set when initializing a shared repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.hideRefs
</term>
<listitem>
<simpara>
        This variable is the same as <emphasis>transfer.hideRefs</emphasis>, but applies
        only to <emphasis>receive-pack</emphasis> (and so affects pushes, but not fetches).
        An attempt to update or delete a hidden ref by <emphasis>git push</emphasis> is
        rejected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.procReceiveRefs
</term>
<listitem>
<simpara>
        This is a multi-valued variable that defines reference prefixes
        to match the commands in <emphasis>receive-pack</emphasis>.  Commands matching the
        prefixes will be executed by an external hook "proc-receive",
        instead of the internal <emphasis>execute_commands</emphasis> function.  If this
        variable is not defined, the "proc-receive" hook will never be
        used, and all commands will be executed by the internal
        <emphasis>execute_commands</emphasis> function.
</simpara>
<simpara>For example, if this variable is set to "refs/for", pushing to reference
such as "refs/for/master" will not create or update a reference named
"refs/for/master", but may create or update a pull request directly by
running the hook "proc-receive".</simpara>
<simpara>Optional modifiers can be provided in the beginning of the value to filter
commands for specific actions: create (a), modify (m), delete (d).
A <emphasis>!</emphasis> can be included in the modifiers to negate the reference prefix entry.
E.g.:</simpara>
<literallayout class="monospaced">git config --system --add receive.procReceiveRefs ad:refs/heads
git config --system --add receive.procReceiveRefs !:refs/heads</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.updateServerInfo
</term>
<listitem>
<simpara>
        If set to true, git-receive-pack will run git-update-server-info
        after receiving data from git-push and updating refs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.shallowUpdate
</term>
<listitem>
<simpara>
        If set to true, .git/shallow can be updated when new refs
        require new shallow roots. Otherwise those refs are rejected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
reftable.blockSize
</term>
<listitem>
<simpara>
        The size in bytes used by the reftable backend when writing blocks.
        The block size is determined by the writer, and does not have to be a
        power of 2. The block size must be larger than the longest reference
        name or log entry used in the repository, as references cannot span
        blocks.
</simpara>
<simpara>Powers of two that are friendly to the virtual memory system or
filesystem (such as 4kB or 8kB) are recommended. Larger sizes (64kB) can
yield better compression, with a possible increased cost incurred by
readers during access.</simpara>
<simpara>The largest block size is <emphasis>16777215</emphasis> bytes (15.99 MiB). The default value is
<emphasis>4096</emphasis> bytes (4kB). A value of <emphasis>0</emphasis> will use the default value.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
reftable.restartInterval
</term>
<listitem>
<simpara>
        The interval at which to create restart points. The reftable backend
        determines the restart points at file creation. Every 16 may be
        more suitable for smaller block sizes (4k or 8k), every 64 for larger
        block sizes (64k).
</simpara>
<simpara>More frequent restart points reduces prefix compression and increases
space consumed by the restart table, both of which increase file size.</simpara>
<simpara>Less frequent restart points makes prefix compression more effective,
decreasing overall file size, with increased penalties for readers
walking through more records after the binary search step.</simpara>
<simpara>A maximum of <emphasis>65535</emphasis> restart points per block is supported.</simpara>
<simpara>The default value is to create restart points every 16 records. A value of <emphasis>0</emphasis>
will use the default value.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
reftable.indexObjects
</term>
<listitem>
<simpara>
        Whether the reftable backend shall write object blocks. Object blocks
        are a reverse mapping of object ID to the references pointing to them.
</simpara>
<simpara>The default value is <emphasis>true</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
reftable.geometricFactor
</term>
<listitem>
<simpara>
        Whenever the reftable backend appends a new table to the stack, it
        performs auto compaction to ensure that there is only a handful of
        tables. The backend does this by ensuring that tables form a geometric
        sequence regarding the respective sizes of each table.
</simpara>
<simpara>By default, the geometric sequence uses a factor of 2, meaning that for any
table, the next-biggest table must at least be twice as big. A maximum factor
of 256 is supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
reftable.lockTimeout
</term>
<listitem>
<simpara>
        Whenever the reftable backend appends a new table to the stack, it has
        to lock the central "tables.list" file before updating it. This config
        controls how long the process will wait to acquire the lock in case
        another process has already acquired it. Value 0 means not to retry at
        all; -1 means to try indefinitely. Default is 100 (i.e., retry for
        100ms).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.pushDefault
</term>
<listitem>
<simpara>
        The remote to push to by default.  Overrides
        <emphasis>branch.&lt;name&gt;.remote</emphasis> for all branches, and is overridden by
        <emphasis>branch.&lt;name&gt;.pushRemote</emphasis> for specific branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.url
</term>
<listitem>
<simpara>
        The URL of a remote repository.  See <xref linkend="git-fetch(1)" /> or
        <xref linkend="git-push(1)" />. A configured remote can have multiple URLs;
        in this case the first is used for fetching, and all are used
        for pushing (assuming no <emphasis>remote.&lt;name&gt;.pushurl</emphasis> is defined).
        Setting this key to the empty string clears the list of urls,
        allowing you to override earlier config.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.pushurl
</term>
<listitem>
<simpara>
        The push URL of a remote repository.  See <xref linkend="git-push(1)" />.
        If a <emphasis>pushurl</emphasis> option is present in a configured remote, it
        is used for pushing instead of <emphasis>remote.&lt;name&gt;.url</emphasis>. A configured
        remote can have multiple push URLs; in this case a push goes to
        all of them. Setting this key to the empty string clears the
        list of urls, allowing you to override earlier config.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.proxy
</term>
<listitem>
<simpara>
        For remotes that require curl (http, https and ftp), the URL to
        the proxy to use for that remote.  Set to the empty string to
        disable proxying for that remote.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.proxyAuthMethod
</term>
<listitem>
<simpara>
        For remotes that require curl (http, https and ftp), the method to use for
        authenticating against the proxy in use (probably set in
        <emphasis>remote.&lt;name&gt;.proxy</emphasis>). See <emphasis>http.proxyAuthMethod</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.fetch
</term>
<listitem>
<simpara>
        The default set of "refspec" for <xref linkend="git-fetch(1)" />. See
        <xref linkend="git-fetch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.push
</term>
<listitem>
<simpara>
        The default set of "refspec" for <xref linkend="git-push(1)" />. See
        <xref linkend="git-push(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.mirror
</term>
<listitem>
<simpara>
        If true, pushing to this remote will automatically behave
        as if the <emphasis>--mirror</emphasis> option was given on the command line.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.skipDefaultUpdate
</term>
<listitem>
<simpara>
        A deprecated synonym to <emphasis>remote.&lt;name&gt;.skipFetchAll</emphasis> (if
        both are set in the configuration files with different
        values, the value of the last occurrence will be used).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.skipFetchAll
</term>
<listitem>
<simpara>
        If true, this remote will be skipped when updating
        using <xref linkend="git-fetch(1)" />, the <emphasis>update</emphasis> subcommand of
        <xref linkend="git-remote(1)" />, and ignored by the prefetch task
        of <emphasis>git maintenance</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.receivepack
</term>
<listitem>
<simpara>
        The default program to execute on the remote side when pushing.  See
        option --receive-pack of <xref linkend="git-push(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.uploadpack
</term>
<listitem>
<simpara>
        The default program to execute on the remote side when fetching.  See
        option --upload-pack of <xref linkend="git-fetch-pack(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.tagOpt
</term>
<listitem>
<simpara>
        Setting this value to --no-tags disables automatic tag following when
        fetching from remote &lt;name&gt;. Setting it to --tags will fetch every
        tag from remote &lt;name&gt;, even if they are not reachable from remote
        branch heads. Passing these flags directly to <xref linkend="git-fetch(1)" /> can
        override this setting. See options --tags and --no-tags of
        <xref linkend="git-fetch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.vcs
</term>
<listitem>
<simpara>
        Setting this to a value &lt;vcs&gt; will cause Git to interact with
        the remote with the git-remote-&lt;vcs&gt; helper.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.prune
</term>
<listitem>
<simpara>
        When set to true, fetching from this remote by default will also
        remove any remote-tracking references that no longer exist on the
        remote (as if the <emphasis>--prune</emphasis> option was given on the command line).
        Overrides <emphasis>fetch.prune</emphasis> settings, if any.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.pruneTags
</term>
<listitem>
<simpara>
        When set to true, fetching from this remote by default will also
        remove any local tags that no longer exist on the remote if pruning
        is activated in general via <emphasis>remote.&lt;name&gt;.prune</emphasis>, <emphasis>fetch.prune</emphasis> or
        <emphasis>--prune</emphasis>. Overrides <emphasis>fetch.pruneTags</emphasis> settings, if any.
</simpara>
<simpara>See also <emphasis>remote.&lt;name&gt;.prune</emphasis> and the PRUNING section of
<xref linkend="git-fetch(1)" />.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.promisor
</term>
<listitem>
<simpara>
        When set to true, this remote will be used to fetch promisor
        objects.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.partialclonefilter
</term>
<listitem>
<simpara>
        The filter that will be applied when fetching from this promisor remote.
        Changing or clearing this value will only affect fetches for new commits.
        To fetch associated objects for commits already present in the local object
        database, use the <emphasis>--refetch</emphasis> option of <xref linkend="git-fetch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.serverOption
</term>
<listitem>
<simpara>
        The default set of server options used when fetching from this remote.
        These server options can be overridden by the <emphasis>--server-option=</emphasis> command
        line arguments.
</simpara>
<simpara>This is a multi-valued variable, and an empty value can be used in a higher
priority configuration file (e.g. <emphasis>.git/config</emphasis> in a repository) to clear
the values inherited from a lower priority configuration files (e.g.
<emphasis>$HOME/.gitconfig</emphasis>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.followRemoteHEAD
</term>
<listitem>
<simpara>
        How <xref linkend="git-fetch(1)" /> should handle updates to <emphasis>remotes/&lt;name&gt;/HEAD</emphasis>
        when fetching using the configured refspecs of a remote.
        The default value is "create", which will create <emphasis>remotes/&lt;name&gt;/HEAD</emphasis>
        if it exists on the remote, but not locally; this will not touch an
        already existing local reference. Setting it to "warn" will print
        a message if the remote has a different value than the local one;
        in case there is no local reference, it behaves like "create".
        A variant on "warn" is "warn-if-not-$branch", which behaves like
        "warn", but if <emphasis>HEAD</emphasis> on the remote is <emphasis>$branch</emphasis> it will be silent.
        Setting it to "always" will silently update <emphasis>remotes/&lt;name&gt;/HEAD</emphasis> to
        the value on the remote.  Finally, setting it to "never" will never
        change or create the local reference.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remotes.&lt;group&gt;
</term>
<listitem>
<simpara>
        The list of remotes which are fetched by "git remote update
        &lt;group&gt;".  See <xref linkend="git-remote(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.useDeltaBaseOffset
</term>
<listitem>
<simpara>
        By default, <xref linkend="git-repack(1)" /> creates packs that use
        delta-base offset. If you need to share your repository with
        Git older than version 1.4.4, either directly or via a dumb
        protocol such as http, then you need to set this option to
        "false" and repack. Access from old Git versions over the
        native protocol are unaffected by this option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.packKeptObjects
</term>
<listitem>
<simpara>
        If set to true, makes <emphasis>git repack</emphasis> act as if
        <emphasis>--pack-kept-objects</emphasis> was passed. See <xref linkend="git-repack(1)" /> for
        details. Defaults to <emphasis>false</emphasis> normally, but <emphasis>true</emphasis> if a bitmap
        index is being written (either via <emphasis>--write-bitmap-index</emphasis> or
        <emphasis>repack.writeBitmaps</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.useDeltaIslands
</term>
<listitem>
<simpara>
        If set to true, makes <emphasis>git repack</emphasis> act as if <emphasis>--delta-islands</emphasis>
        was passed. Defaults to <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.writeBitmaps
</term>
<listitem>
<simpara>
        When true, git will write a bitmap index when packing all
        objects to disk (e.g., when <emphasis>git repack -a</emphasis> is run).  This
        index can speed up the "counting objects" phase of subsequent
        packs created for clones and fetches, at the cost of some disk
        space and extra time spent on the initial repack.  This has
        no effect if multiple packfiles are created.
        Defaults to true on bare repos, false otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.updateServerInfo
</term>
<listitem>
<simpara>
        If set to false, <xref linkend="git-repack(1)" /> will not run
        <xref linkend="git-update-server-info(1)" />. Defaults to true. Can be overridden
        when true by the <emphasis>-n</emphasis> option of <xref linkend="git-repack(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.cruftWindow
</term>
<term>
repack.cruftWindowMemory
</term>
<term>
repack.cruftDepth
</term>
<term>
repack.cruftThreads
</term>
<listitem>
<simpara>
        Parameters used by <xref linkend="git-pack-objects(1)" /> when generating
        a cruft pack and the respective parameters are not given over
        the command line. See similarly named <emphasis>pack.*</emphasis> configuration
        variables for defaults and meaning.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rerere.autoUpdate
</term>
<listitem>
<simpara>
        When set to true, <emphasis>git-rerere</emphasis> updates the index with the
        resulting contents after it cleanly resolves conflicts using
        previously recorded resolutions.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rerere.enabled
</term>
<listitem>
<simpara>
        Activate recording of resolved conflicts, so that identical
        conflict hunks can be resolved automatically, should they be
        encountered again.  By default, <xref linkend="git-rerere(1)" /> is
        enabled if there is an <emphasis>rr-cache</emphasis> directory under the
        <emphasis>$GIT_DIR</emphasis>, e.g. if "rerere" was previously used in the
        repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
revert.reference
</term>
<listitem>
<simpara>
        Setting this variable to true makes <emphasis>git revert</emphasis> behave
        as if the <emphasis>--reference</emphasis> option is given.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
safe.bareRepository
</term>
<listitem>
<simpara>
        Specifies which bare repositories Git will work with. The currently
        supported values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>all</emphasis>: Git works with all bare repositories. This is the default.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>explicit</emphasis>: Git only works with bare repositories specified via
  the top-level <emphasis>--git-dir</emphasis> command-line option, or the <emphasis>GIT_DIR</emphasis>
  environment variable (see <xref linkend="git(1)" />).
</simpara>
<simpara>If you do not use bare repositories in your workflow, then it may be
beneficial to set <emphasis>safe.bareRepository</emphasis> to <emphasis>explicit</emphasis> in your global
config. This will protect you from attacks that involve cloning a
repository that contains a bare repository and running a Git command
within that directory.</simpara>
<simpara>This config setting is only respected in protected configuration (see
<xref linkend="git-config(1)_SCOPES"/>). This prevents untrusted repositories from tampering with
this value.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
safe.directory
</term>
<listitem>
<simpara>
        These config entries specify Git-tracked directories that are
        considered safe even if they are owned by someone other than the
        current user. By default, Git will refuse to even parse a Git
        config of a repository owned by someone else, let alone run its
        hooks, and this config setting allows users to specify exceptions,
        e.g. for intentionally shared repositories (see the <emphasis>--shared</emphasis>
        option in <xref linkend="git-init(1)" />).
</simpara>
<simpara>This is a multi-valued setting, i.e. you can add more than one directory
via <emphasis>git config --add</emphasis>. To reset the list of safe directories (e.g. to
override any such directories specified in the system config), add a
<emphasis>safe.directory</emphasis> entry with an empty value.</simpara>
<simpara>This config setting is only respected in protected configuration (see
<xref linkend="git-config(1)_SCOPES"/>). This prevents untrusted repositories from tampering with this
value.</simpara>
<simpara>The value of this setting is interpolated, i.e. <emphasis>~/&lt;path&gt;</emphasis> expands to a
path relative to the home directory and <emphasis>%(prefix)/&lt;path&gt;</emphasis> expands to a
path relative to Git's (runtime) prefix.</simpara>
<simpara>To completely opt-out of this security check, set <emphasis>safe.directory</emphasis> to the
string <emphasis>*</emphasis>. This will allow all repositories to be treated as if their
directory was listed in the <emphasis>safe.directory</emphasis> list. If <emphasis>safe.directory=*</emphasis>
is set in system config and you want to re-enable this protection, then
initialize your list with an empty value before listing the repositories
that you deem safe.  Giving a directory with <emphasis>/*</emphasis> appended to it will
allow access to all repositories under the named directory.</simpara>
<simpara>As explained, Git only allows you to access repositories owned by
yourself, i.e. the user who is running Git, by default.  When Git
is running as <emphasis>root</emphasis> in a non Windows platform that provides sudo,
however, git checks the SUDO_UID environment variable that sudo creates
and will allow access to the uid recorded as its value in addition to
the id from <emphasis>root</emphasis>.
This is to make it easy to perform a common sequence during installation
"make &amp;&amp; sudo make install".  A git process running under <emphasis>sudo</emphasis> runs as
<emphasis>root</emphasis> but the <emphasis>sudo</emphasis> command exports the environment variable to record
which id the original user has.
If that is not what you would prefer and want git to only trust
repositories that are owned by root instead, then you can remove
the <emphasis>SUDO_UID</emphasis> variable from root's environment before invoking git.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.identity
</term>
<listitem>
<simpara>
        A configuration identity. When given, causes values in the
        <emphasis>sendemail.&lt;identity&gt;</emphasis> subsection to take precedence over
        values in the <emphasis>sendemail</emphasis> section. The default identity is
        the value of <emphasis>sendemail.identity</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.smtpEncryption
</term>
<listitem>
<simpara>
        See <xref linkend="git-send-email(1)" /> for description.  Note that this
        setting is not subject to the <emphasis>identity</emphasis> mechanism.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.smtpSSLCertPath
</term>
<listitem>
<simpara>
        Path to ca-certificates (either a directory or a single file).
        Set it to an empty string to disable certificate verification.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.&lt;identity&gt;.*
</term>
<listitem>
<simpara>
        Identity-specific versions of the <emphasis>sendemail.*</emphasis> parameters
        found below, taking precedence over those when this
        identity is selected, through either the command-line or
        <emphasis>sendemail.identity</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.multiEdit
</term>
<listitem>
<simpara>
        If true (default), a single editor instance will be spawned to edit
        files you have to edit (patches when <emphasis>--annotate</emphasis> is used, and the
        summary when <emphasis>--compose</emphasis> is used). If false, files will be edited one
        after the other, spawning a new editor each time.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.confirm
</term>
<listitem>
<simpara>
        Sets the default for whether to confirm before sending. Must be
        one of <emphasis>always</emphasis>, <emphasis>never</emphasis>, <emphasis>cc</emphasis>, <emphasis>compose</emphasis>, or <emphasis>auto</emphasis>. See <emphasis>--confirm</emphasis>
        in the <xref linkend="git-send-email(1)" /> documentation for the meaning of these
        values.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.mailmap
</term>
<listitem>
<simpara>
        If true, makes <xref linkend="git-send-email(1)" /> assume <emphasis>--mailmap</emphasis>,
        otherwise assume <emphasis>--no-mailmap</emphasis>. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.mailmap.file
</term>
<listitem>
<simpara>
        The location of a <xref linkend="git-send-email(1)" /> specific augmenting
        mailmap file. The default mailmap and <emphasis>mailmap.file</emphasis> are loaded
        first. Thus, entries in this file take precedence over entries in
        the default mailmap locations. See <xref linkend="gitmailmap(5)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.mailmap.blob
</term>
<listitem>
<simpara>
        Like <emphasis>sendemail.mailmap.file</emphasis>, but consider the value as a reference
        to a blob in the repository. Entries in <emphasis>sendemail.mailmap.file</emphasis>
        take precedence over entries here. See <xref linkend="gitmailmap(5)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.aliasesFile
</term>
<listitem>
<simpara>
        To avoid typing long email addresses, point this to one or more
        email aliases files.  You must also supply <emphasis>sendemail.aliasFileType</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.aliasFileType
</term>
<listitem>
<simpara>
        Format of the file(s) specified in sendemail.aliasesFile. Must be
        one of <emphasis>mutt</emphasis>, <emphasis>mailrc</emphasis>, <emphasis>pine</emphasis>, <emphasis>elm</emphasis>, <emphasis>gnus</emphasis>, or <emphasis>sendmail</emphasis>.
</simpara>
<simpara>What an alias file in each format looks like can be found in
the documentation of the email program of the same name. The
differences and limitations from the standard formats are
described below:</simpara>
<variablelist>
<varlistentry>
<term>
sendmail
</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>
Quoted aliases and quoted addresses are not supported: lines that
        contain a <emphasis>"</emphasis> symbol are ignored.
</simpara>
</listitem>
<listitem>
<simpara>
Redirection to a file (<emphasis>/path/name</emphasis>) or pipe (<emphasis>|command</emphasis>) is not
        supported.
</simpara>
</listitem>
<listitem>
<simpara>
File inclusion (<emphasis>:include: /path/name</emphasis>) is not supported.
</simpara>
</listitem>
<listitem>
<simpara>
Warnings are printed on the standard error output for any
        explicitly unsupported constructs, and any other lines that are not
        recognized by the parser.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.annotate
</term>
<term>
sendemail.bcc
</term>
<term>
sendemail.cc
</term>
<term>
sendemail.ccCmd
</term>
<term>
sendemail.chainReplyTo
</term>
<term>
sendemail.envelopeSender
</term>
<term>
sendemail.from
</term>
<term>
sendemail.headerCmd
</term>
<term>
sendemail.signedOffByCc
</term>
<term>
sendemail.smtpPass
</term>
<term>
sendemail.suppressCc
</term>
<term>
sendemail.suppressFrom
</term>
<term>
sendemail.to
</term>
<term>
sendemail.toCmd
</term>
<term>
sendemail.smtpDomain
</term>
<term>
sendemail.smtpServer
</term>
<term>
sendemail.smtpServerPort
</term>
<term>
sendemail.smtpServerOption
</term>
<term>
sendemail.smtpUser
</term>
<term>
sendemail.thread
</term>
<term>
sendemail.transferEncoding
</term>
<term>
sendemail.validate
</term>
<term>
sendemail.xmailer
</term>
<listitem>
<simpara>
        These configuration variables all provide a default for
        <xref linkend="git-send-email(1)" /> command-line options. See its
        documentation for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.signedOffCc (deprecated)
</term>
<listitem>
<simpara>
        Deprecated alias for <emphasis>sendemail.signedOffByCc</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.smtpBatchSize
</term>
<listitem>
<simpara>
        Number of messages to be sent per connection, after that a relogin
        will happen.  If the value is 0 or undefined, send all messages in
        one connection.
        See also the <emphasis>--batch-size</emphasis> option of <xref linkend="git-send-email(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.smtpReloginDelay
</term>
<listitem>
<simpara>
        Seconds to wait before reconnecting to the smtp server.
        See also the <emphasis>--relogin-delay</emphasis> option of <xref linkend="git-send-email(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.forbidSendmailVariables
</term>
<listitem>
<simpara>
        To avoid common misconfiguration mistakes, <xref linkend="git-send-email(1)" />
        will abort with a warning if any configuration options for "sendmail"
        exist. Set this variable to bypass the check.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sequence.editor
</term>
<listitem>
<simpara>
        Text editor used by <emphasis>git rebase -i</emphasis> for editing the rebase instruction file.
        The value is meant to be interpreted by the shell when it is used.
        It can be overridden by the <emphasis>GIT_SEQUENCE_EDITOR</emphasis> environment variable.
        When not configured, the default commit message editor is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
showBranch.default
</term>
<listitem>
<simpara>
        The default set of branches for <xref linkend="git-show-branch(1)" />.
        See <xref linkend="git-show-branch(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sparse.expectFilesOutsideOfPatterns
</term>
<listitem>
<simpara>
        Typically with sparse checkouts, files not matching any
        sparsity patterns are marked with a SKIP_WORKTREE bit in the
        index and are missing from the working tree.  Accordingly, Git
        will ordinarily check whether files with the SKIP_WORKTREE bit
        are in fact present in the working tree contrary to
        expectations.  If Git finds any, it marks those paths as
        present by clearing the relevant SKIP_WORKTREE bits.  This
        option can be used to tell Git that such
        present-despite-skipped files are expected and to stop
        checking for them.
</simpara>
<simpara>The default is <emphasis>false</emphasis>, which allows Git to automatically recover
from the list of files in the index and working tree falling out of
sync.</simpara>
<simpara>Set this to <emphasis>true</emphasis> if you are in a setup where some external factor
relieves Git of the responsibility for maintaining the consistency
between the presence of working tree files and sparsity patterns.  For
example, if you have a Git-aware virtual file system that has a robust
mechanism for keeping the working tree and the sparsity patterns up to
date based on access patterns.</simpara>
<simpara>Regardless of this setting, Git does not check for
present-despite-skipped files unless sparse checkout is enabled, so
this config option has no effect unless <emphasis>core.sparseCheckout</emphasis> is
<emphasis>true</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
splitIndex.maxPercentChange
</term>
<listitem>
<simpara>
        When the split index feature is used, this specifies the
        percent of entries the split index can contain compared to the
        total number of entries in both the split index and the shared
        index before a new shared index is written.
        The value should be between 0 and 100. If the value is 0, then
        a new shared index is always written; if it is 100, a new
        shared index is never written.
        By default, the value is 20, so a new shared index is written
        if the number of entries in the split index would be greater
        than 20 percent of the total number of entries.
        See <xref linkend="git-update-index(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
splitIndex.sharedIndexExpire
</term>
<listitem>
<simpara>
        When the split index feature is used, shared index files that
        were not modified since the time this variable specifies will
        be removed when a new shared index file is created. The value
        "now" expires all entries immediately, and "never" suppresses
        expiration altogether.
        The default value is "2.weeks.ago".
        Note that a shared index file is considered modified (for the
        purpose of expiration) each time a new split-index file is
        either created based on it or read from it.
        See <xref linkend="git-update-index(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
ssh.variant
</term>
<listitem>
<simpara>
        By default, Git determines the command line arguments to use
        based on the basename of the configured SSH command (configured
        using the environment variable <emphasis>GIT_SSH</emphasis> or <emphasis>GIT_SSH_COMMAND</emphasis> or
        the config setting <emphasis>core.sshCommand</emphasis>). If the basename is
        unrecognized, Git will attempt to detect support of OpenSSH
        options by first invoking the configured SSH command with the
        <emphasis>-G</emphasis> (print configuration) option and will subsequently use
        OpenSSH options (if that is successful) or no options besides
        the host and remote command (if it fails).
</simpara>
<simpara>The config variable <emphasis>ssh.variant</emphasis> can be set to override this detection.
Valid values are <emphasis>ssh</emphasis> (to use OpenSSH options), <emphasis>plink</emphasis>, <emphasis>putty</emphasis>,
<emphasis>tortoiseplink</emphasis>, <emphasis>simple</emphasis> (no options except the host and remote command).
The default auto-detection can be explicitly requested using the value
<emphasis>auto</emphasis>.  Any other value is treated as <emphasis>ssh</emphasis>.  This setting can also be
overridden via the environment variable <emphasis>GIT_SSH_VARIANT</emphasis>.</simpara>
<simpara>The current command-line parameters used for each variant are as
follows:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>ssh</emphasis> - [-p port] [-4] [-6] [-o option] [username@]host command
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>simple</emphasis> - [username@]host command
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>plink</emphasis> or <emphasis>putty</emphasis> - [-P port] [-4] [-6] [username@]host command
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>tortoiseplink</emphasis> - [-P port] [-4] [-6] -batch [username@]host command
</simpara>
</listitem>
</itemizedlist>
<simpara>Except for the <emphasis>simple</emphasis> variant, command-line parameters are likely to
change as git gains new features.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
stash.showIncludeUntracked
</term>
<listitem>
<simpara>
        If this is set to true, the <emphasis>git stash show</emphasis> command will show
        the untracked files of a stash entry.  Defaults to false. See
        the description of the <emphasis>show</emphasis> command in <xref linkend="git-stash(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
stash.showPatch
</term>
<listitem>
<simpara>
        If this is set to true, the <emphasis>git stash show</emphasis> command without an
        option will show the stash entry in patch form.  Defaults to false.
        See the description of the <emphasis>show</emphasis> command in <xref linkend="git-stash(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
stash.showStat
</term>
<listitem>
<simpara>
        If this is set to true, the <emphasis>git stash show</emphasis> command without an
        option will show a diffstat of the stash entry.  Defaults to true.
        See the description of the <emphasis>show</emphasis> command in <xref linkend="git-stash(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.relativePaths
</term>
<listitem>
<simpara>
        By default, <xref linkend="git-status(1)" /> shows paths relative to the
        current directory. Setting this variable to <emphasis>false</emphasis> shows paths
        relative to the repository root (this was the default for Git
        prior to v1.5.4).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.short
</term>
<listitem>
<simpara>
        Set to true to enable --short by default in <xref linkend="git-status(1)" />.
        The option --no-short takes precedence over this variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.branch
</term>
<listitem>
<simpara>
        Set to true to enable --branch by default in <xref linkend="git-status(1)" />.
        The option --no-branch takes precedence over this variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.aheadBehind
</term>
<listitem>
<simpara>
        Set to true to enable <emphasis>--ahead-behind</emphasis> and false to enable
        <emphasis>--no-ahead-behind</emphasis> by default in <xref linkend="git-status(1)" /> for
        non-porcelain status formats.  Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.displayCommentPrefix
</term>
<listitem>
<simpara>
        If set to true, <xref linkend="git-status(1)" /> will insert a comment
        prefix before each output line (starting with
        <emphasis>core.commentChar</emphasis>, i.e. <emphasis>#</emphasis> by default). This was the
        behavior of <xref linkend="git-status(1)" /> in Git 1.8.4 and previous.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.renameLimit
</term>
<listitem>
<simpara>
        The number of files to consider when performing rename detection
        in <xref linkend="git-status(1)" /> and <xref linkend="git-commit(1)" />. Defaults to
        the value of diff.renameLimit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.renames
</term>
<listitem>
<simpara>
        Whether and how Git detects renames in <xref linkend="git-status(1)" /> and
        <xref linkend="git-commit(1)" /> .  If set to "false", rename detection is
        disabled. If set to "true", basic rename detection is enabled.
        If set to "copies" or "copy", Git will detect copies, as well.
        Defaults to the value of diff.renames.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.showStash
</term>
<listitem>
<simpara>
        If set to true, <xref linkend="git-status(1)" /> will display the number of
        entries currently stashed away.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.showUntrackedFiles
</term>
<listitem>
<simpara>
        By default, <xref linkend="git-status(1)" /> and <xref linkend="git-commit(1)" /> show
        files which are not currently tracked by Git. Directories which
        contain only untracked files, are shown with the directory name
        only. Showing untracked files means that Git needs to lstat() all
        the files in the whole repository, which might be slow on some
        systems. So, this variable controls how the commands display
        the untracked files. Possible values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>no</emphasis> - Show no untracked files.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>normal</emphasis> - Show untracked files and directories.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>all</emphasis> - Show also individual files in untracked directories.
</simpara>
</listitem>
</itemizedlist>
<simpara>If this variable is not specified, it defaults to <emphasis>normal</emphasis>.
All usual spellings for Boolean value <emphasis>true</emphasis> are taken as <emphasis>normal</emphasis>
and <emphasis>false</emphasis> as <emphasis>no</emphasis>.
This variable can be overridden with the -u|--untracked-files option
of <xref linkend="git-status(1)" /> and <xref linkend="git-commit(1)" />.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.submoduleSummary
</term>
<listitem>
<simpara>
        Defaults to false.
        If this is set to a non-zero number or true (identical to -1 or an
        unlimited number), the submodule summary will be enabled and a
        summary of commits for modified submodules will be shown (see
        --summary-limit option of <xref linkend="git-submodule(1)" />). Please note
        that the summary output command will be suppressed for all
        submodules when <emphasis>diff.ignoreSubmodules</emphasis> is set to <emphasis>all</emphasis> or only
        for those submodules where <emphasis>submodule.&lt;name&gt;.ignore=all</emphasis>. The only
        exception to that rule is that status and commit will show staged
        submodule changes. To
        also view the summary for ignored submodules you can either use
        the --ignore-submodules=dirty command-line option or the <emphasis>git
        submodule summary</emphasis> command, which shows a similar output but does
        not honor these settings.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.url
</term>
<listitem>
<simpara>
        The URL for a submodule. This variable is copied from the .gitmodules
        file to the git config via <emphasis>git submodule init</emphasis>. The user can change
        the configured URL before obtaining the submodule via <emphasis>git submodule
        update</emphasis>. If neither submodule.&lt;name&gt;.active nor submodule.active are
        set, the presence of this variable is used as a fallback to indicate
        whether the submodule is of interest to git commands.
        See <xref linkend="git-submodule(1)" /> and <xref linkend="gitmodules(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.update
</term>
<listitem>
<simpara>
        The method by which a submodule is updated by <emphasis>git submodule update</emphasis>,
        which is the only affected command, others such as
        <emphasis>git checkout --recurse-submodules</emphasis> are unaffected. It exists for
        historical reasons, when <emphasis>git submodule</emphasis> was the only command to
        interact with submodules; settings like <emphasis>submodule.active</emphasis>
        and <emphasis>pull.rebase</emphasis> are more specific. It is populated by
        <emphasis>git submodule init</emphasis> from the <xref linkend="gitmodules(5)" /> file.
        See description of <emphasis>update</emphasis> command in <xref linkend="git-submodule(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.branch
</term>
<listitem>
<simpara>
        The remote branch name for a submodule, used by <emphasis>git submodule
        update --remote</emphasis>.  Set this option to override the value found in
        the <emphasis>.gitmodules</emphasis> file.  See <xref linkend="git-submodule(1)" /> and
        <xref linkend="gitmodules(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.fetchRecurseSubmodules
</term>
<listitem>
<simpara>
        This option can be used to control recursive fetching of this
        submodule. It can be overridden by using the --[no-]recurse-submodules
        command-line option to "git fetch" and "git pull".
        This setting will override that from in the <xref linkend="gitmodules(5)" />
        file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.ignore
</term>
<listitem>
<simpara>
        Defines under what circumstances "git status" and the diff family show
        a submodule as modified. When set to "all", it will never be considered
        modified (but it will nonetheless show up in the output of status and
        commit when it has been staged), "dirty" will ignore all changes
        to the submodule's work tree and
        takes only differences between the HEAD of the submodule and the commit
        recorded in the superproject into account. "untracked" will additionally
        let submodules with modified tracked files in their work tree show up.
        Using "none" (the default when this option is not set) also shows
        submodules that have untracked files in their work tree as changed.
        This setting overrides any setting made in .gitmodules for this submodule,
        both settings can be overridden on the command line by using the
        "--ignore-submodules" option. The <emphasis>git submodule</emphasis> commands are not
        affected by this setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.active
</term>
<listitem>
<simpara>
        Boolean value indicating if the submodule is of interest to git
        commands.  This config option takes precedence over the
        submodule.active config option. See <xref linkend="gitsubmodules(7)" /> for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.active
</term>
<listitem>
<simpara>
        A repeated field which contains a pathspec used to match against a
        submodule's path to determine if the submodule is of interest to git
        commands. See <xref linkend="gitsubmodules(7)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.recurse
</term>
<listitem>
<simpara>
        A boolean indicating if commands should enable the <emphasis>--recurse-submodules</emphasis>
        option by default. Defaults to false.
</simpara>
<simpara>When set to true, it can be deactivated via the
<emphasis>--no-recurse-submodules</emphasis> option. Note that some Git commands
lacking this option may call some of the above commands affected by
<emphasis>submodule.recurse</emphasis>; for instance <emphasis>git remote update</emphasis> will call
<emphasis>git fetch</emphasis> but does not have a <emphasis>--no-recurse-submodules</emphasis> option.
For these commands a workaround is to temporarily change the
configuration value by using <emphasis>git -c submodule.recurse=0</emphasis>.</simpara>
<simpara>The following list shows the commands that accept
<emphasis>--recurse-submodules</emphasis> and whether they are supported by this
setting.</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>checkout</emphasis>, <emphasis>fetch</emphasis>, <emphasis>grep</emphasis>, <emphasis>pull</emphasis>, <emphasis>push</emphasis>, <emphasis>read-tree</emphasis>,
<emphasis>reset</emphasis>, <emphasis>restore</emphasis> and <emphasis>switch</emphasis> are always supported.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>clone</emphasis> and <emphasis>ls-files</emphasis> are not supported.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>branch</emphasis> is supported only if <emphasis>submodule.propagateBranches</emphasis> is
enabled
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.propagateBranches
</term>
<listitem>
<simpara>
        [EXPERIMENTAL] A boolean that enables branching support when
        using <emphasis>--recurse-submodules</emphasis> or <emphasis>submodule.recurse=true</emphasis>.
        Enabling this will allow certain commands to accept
        <emphasis>--recurse-submodules</emphasis> and certain commands that already accept
        <emphasis>--recurse-submodules</emphasis> will now consider branches.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.fetchJobs
</term>
<listitem>
<simpara>
        Specifies how many submodules are fetched/cloned at the same time.
        A positive integer allows up to that number of submodules fetched
        in parallel. A value of 0 will give some reasonable default.
        If unset, it defaults to 1.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.alternateLocation
</term>
<listitem>
<simpara>
        Specifies how the submodules obtain alternates when submodules are
        cloned. Possible values are <emphasis>no</emphasis>, <emphasis>superproject</emphasis>.
        By default <emphasis>no</emphasis> is assumed, which doesn't add references. When the
        value is set to <emphasis>superproject</emphasis> the submodule to be cloned computes
        its alternates location relative to the superprojects alternate.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.alternateErrorStrategy
</term>
<listitem>
<simpara>
        Specifies how to treat errors with the alternates for a submodule
        as computed via <emphasis>submodule.alternateLocation</emphasis>. Possible values are
        <emphasis>ignore</emphasis>, <emphasis>info</emphasis>, <emphasis>die</emphasis>. Default is <emphasis>die</emphasis>. Note that if set to <emphasis>ignore</emphasis>
        or <emphasis>info</emphasis>, and if there is an error with the computed alternate, the
        clone proceeds as if no alternate was specified.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tag.forceSignAnnotated
</term>
<listitem>
<simpara>
        A boolean to specify whether annotated tags created should be GPG signed.
        If <emphasis>--annotate</emphasis> is specified on the command line, it takes
        precedence over this option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tag.sort
</term>
<listitem>
<simpara>
        This variable controls the sort ordering of tags when displayed by
        <xref linkend="git-tag(1)" />. Without the "--sort=&lt;value&gt;" option provided, the
        value of this variable will be used as the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tag.gpgSign
</term>
<listitem>
<simpara>
        A boolean to specify whether all tags should be GPG signed.
        Use of this option when running in an automated script can
        result in a large number of tags being signed. It is therefore
        convenient to use an agent to avoid typing your gpg passphrase
        several times. Note that this option doesn't affect tag signing
        behavior enabled by "-u &lt;keyid&gt;" or "--local-user=&lt;keyid&gt;" options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tar.umask
</term>
<listitem>
<simpara>
        This variable can be used to restrict the permission bits of
        tar archive entries.  The default is 0002, which turns off the
        world write bit.  The special value "user" indicates that the
        archiving user's umask will be used instead.  See umask(2) and
        <xref linkend="git-archive(1)" />.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Trace2 config settings are only read from the system and global
config files; repository local and worktree config files and <emphasis>-c</emphasis>
command line arguments are not respected.</simpara>
<variablelist>
<varlistentry>
<term>
trace2.normalTarget
</term>
<listitem>
<simpara>
        This variable controls the normal target destination.
        It may be overridden by the <emphasis>GIT_TRACE2</emphasis> environment variable.
        The following table shows possible values.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.perfTarget
</term>
<listitem>
<simpara>
        This variable controls the performance target destination.
        It may be overridden by the <emphasis>GIT_TRACE2_PERF</emphasis> environment variable.
        The following table shows possible values.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.eventTarget
</term>
<listitem>
<simpara>
        This variable controls the event target destination.
        It may be overridden by the <emphasis>GIT_TRACE2_EVENT</emphasis> environment variable.
        The following table shows possible values.
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>0</emphasis> or <emphasis>false</emphasis> - Disables the target.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>1</emphasis> or <emphasis>true</emphasis> - Writes to <emphasis>STDERR</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>[2-9]</emphasis> - Writes to the already opened file descriptor.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>&lt;absolute-pathname&gt;</emphasis> - Writes to the file in append mode. If the target
already exists and is a directory, the traces will be written to files (one
per process) underneath the given directory.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>af_unix:[&lt;socket-type&gt;:]&lt;absolute-pathname&gt;</emphasis> - Write to a
Unix DomainSocket (on platforms that support them).  Socket
type can be either <emphasis>stream</emphasis> or <emphasis>dgram</emphasis>; if omitted Git will
try both.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.normalBrief
</term>
<listitem>
<simpara>
        Boolean.  When true <emphasis>time</emphasis>, <emphasis>filename</emphasis>, and <emphasis>line</emphasis> fields are
        omitted from normal output.  May be overridden by the
        <emphasis>GIT_TRACE2_BRIEF</emphasis> environment variable.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.perfBrief
</term>
<listitem>
<simpara>
        Boolean.  When true <emphasis>time</emphasis>, <emphasis>filename</emphasis>, and <emphasis>line</emphasis> fields are
        omitted from PERF output.  May be overridden by the
        <emphasis>GIT_TRACE2_PERF_BRIEF</emphasis> environment variable.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.eventBrief
</term>
<listitem>
<simpara>
        Boolean.  When true <emphasis>time</emphasis>, <emphasis>filename</emphasis>, and <emphasis>line</emphasis> fields are
        omitted from event output.  May be overridden by the
        <emphasis>GIT_TRACE2_EVENT_BRIEF</emphasis> environment variable.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.eventNesting
</term>
<listitem>
<simpara>
        Integer.  Specifies desired depth of nested regions in the
        event output.  Regions deeper than this value will be
        omitted.  May be overridden by the <emphasis>GIT_TRACE2_EVENT_NESTING</emphasis>
        environment variable.  Defaults to 2.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.configParams
</term>
<listitem>
<simpara>
        A comma-separated list of patterns of "important" config
        settings that should be recorded in the trace2 output.
        For example, <emphasis>core.*,remote.*.url</emphasis> would cause the trace2
        output to contain events listing each configured remote.
        May be overridden by the <emphasis>GIT_TRACE2_CONFIG_PARAMS</emphasis> environment
        variable.  Unset by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.envVars
</term>
<listitem>
<simpara>
        A comma-separated list of "important" environment variables that should
        be recorded in the trace2 output.  For example,
        <emphasis>GIT_HTTP_USER_AGENT,GIT_CONFIG</emphasis> would cause the trace2 output to
        contain events listing the overrides for HTTP user agent and the
        location of the Git configuration file (assuming any are set).  May be
        overridden by the <emphasis>GIT_TRACE2_ENV_VARS</emphasis> environment variable.  Unset by
        default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.destinationDebug
</term>
<listitem>
<simpara>
        Boolean.  When true Git will print error messages when a
        trace target destination cannot be opened for writing.
        By default, these errors are suppressed and tracing is
        silently disabled.  May be overridden by the
        <emphasis>GIT_TRACE2_DST_DEBUG</emphasis> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.maxFiles
</term>
<listitem>
<simpara>
        Integer.  When writing trace files to a target directory, do not
        write additional traces if doing so would exceed this many files. Instead,
        write a sentinel file that will block further tracing to this
        directory. Defaults to 0, which disables this check.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trailer.separators
</term>
<listitem>
<simpara>
        This option tells which characters are recognized as trailer
        separators. By default only <emphasis>:</emphasis> is recognized as a trailer
        separator, except that <emphasis>=</emphasis> is always accepted on the command
        line for compatibility with other git commands.
</simpara>
<simpara>The first character given by this option will be the default character
used when another separator is not specified in the config for this
trailer.</simpara>
<simpara>For example, if the value for this option is "%=$", then only lines
using the format <emphasis>&lt;key&gt;&lt;sep&gt;&lt;value&gt;</emphasis> with &lt;sep&gt; containing <emphasis>%</emphasis>, <emphasis>=</emphasis>
or <emphasis>$</emphasis> and then spaces will be considered trailers. And <emphasis>%</emphasis> will be
the default separator used, so by default trailers will appear like:
<emphasis>&lt;key&gt;% &lt;value&gt;</emphasis> (one percent sign and one space will appear between
the key and the value).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trailer.where
</term>
<listitem>
<simpara>
        This option tells where a new trailer will be added.
</simpara>
<simpara>This can be <emphasis>end</emphasis>, which is the default, <emphasis>start</emphasis>, <emphasis>after</emphasis> or <emphasis>before</emphasis>.</simpara>
<simpara>If it is <emphasis>end</emphasis>, then each new trailer will appear at the end of the
existing trailers.</simpara>
<simpara>If it is <emphasis>start</emphasis>, then each new trailer will appear at the start,
instead of the end, of the existing trailers.</simpara>
<simpara>If it is <emphasis>after</emphasis>, then each new trailer will appear just after the
last trailer with the same &lt;key&gt;.</simpara>
<simpara>If it is <emphasis>before</emphasis>, then each new trailer will appear just before the
first trailer with the same &lt;key&gt;.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trailer.ifexists
</term>
<listitem>
<simpara>
        This option makes it possible to choose what action will be
        performed when there is already at least one trailer with the
        same &lt;key&gt; in the input.
</simpara>
<simpara>The valid values for this option are: <emphasis>addIfDifferentNeighbor</emphasis> (this
is the default), <emphasis>addIfDifferent</emphasis>, <emphasis>add</emphasis>, <emphasis>replace</emphasis> or <emphasis>doNothing</emphasis>.</simpara>
<simpara>With <emphasis>addIfDifferentNeighbor</emphasis>, a new trailer will be added only if no
trailer with the same (&lt;key&gt;, &lt;value&gt;) pair is above or below the line
where the new trailer will be added.</simpara>
<simpara>With <emphasis>addIfDifferent</emphasis>, a new trailer will be added only if no trailer
with the same (&lt;key&gt;, &lt;value&gt;) pair is already in the input.</simpara>
<simpara>With <emphasis>add</emphasis>, a new trailer will be added, even if some trailers with
the same (&lt;key&gt;, &lt;value&gt;) pair are already in the input.</simpara>
<simpara>With <emphasis>replace</emphasis>, an existing trailer with the same &lt;key&gt; will be
deleted and the new trailer will be added. The deleted trailer will be
the closest one (with the same &lt;key&gt;) to the place where the new one
will be added.</simpara>
<simpara>With <emphasis>doNothing</emphasis>, nothing will be done; that is no new trailer will be
added if there is already one with the same &lt;key&gt; in the input.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trailer.ifmissing
</term>
<listitem>
<simpara>
        This option makes it possible to choose what action will be
        performed when there is not yet any trailer with the same
        &lt;key&gt; in the input.
</simpara>
<simpara>The valid values for this option are: <emphasis>add</emphasis> (this is the default) and
<emphasis>doNothing</emphasis>.</simpara>
<simpara>With <emphasis>add</emphasis>, a new trailer will be added.</simpara>
<simpara>With <emphasis>doNothing</emphasis>, nothing will be done.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trailer.&lt;keyAlias&gt;.key
</term>
<listitem>
<simpara>
        Defines a &lt;keyAlias&gt; for the &lt;key&gt;. The &lt;keyAlias&gt; must be a
        prefix (case does not matter) of the &lt;key&gt;. For example, in <emphasis>git
        config trailer.ack.key "Acked-by"</emphasis> the "Acked-by" is the &lt;key&gt; and
        the "ack" is the &lt;keyAlias&gt;. This configuration allows the shorter
        <emphasis>--trailer "ack:..."</emphasis> invocation on the command line using the "ack"
        &lt;keyAlias&gt; instead of the longer <emphasis>--trailer "Acked-by:..."</emphasis>.
</simpara>
<simpara>At the end of the &lt;key&gt;, a separator can appear and then some
space characters. By default the only valid separator is <emphasis>:</emphasis>,
but this can be changed using the <emphasis>trailer.separators</emphasis> config
variable.</simpara>
<simpara>If there is a separator in the key, then it overrides the default
separator when adding the trailer.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trailer.&lt;keyAlias&gt;.where
</term>
<listitem>
<simpara>
        This option takes the same values as the <emphasis>trailer.where</emphasis>
        configuration variable and it overrides what is specified by
        that option for trailers with the specified &lt;keyAlias&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trailer.&lt;keyAlias&gt;.ifexists
</term>
<listitem>
<simpara>
        This option takes the same values as the <emphasis>trailer.ifexists</emphasis>
        configuration variable and it overrides what is specified by
        that option for trailers with the specified &lt;keyAlias&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trailer.&lt;keyAlias&gt;.ifmissing
</term>
<listitem>
<simpara>
        This option takes the same values as the <emphasis>trailer.ifmissing</emphasis>
        configuration variable and it overrides what is specified by
        that option for trailers with the specified &lt;keyAlias&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trailer.&lt;keyAlias&gt;.command
</term>
<listitem>
<simpara>
        Deprecated in favor of <emphasis>trailer.&lt;keyAlias&gt;.cmd</emphasis>.
        This option behaves in the same way as <emphasis>trailer.&lt;keyAlias&gt;.cmd</emphasis>, except
        that it doesn't pass anything as argument to the specified command.
        Instead the first occurrence of substring $ARG is replaced by the
        &lt;value&gt; that would be passed as argument.
</simpara>
<simpara>Note that $ARG in the user's command is
only replaced once and that the original way of replacing $ARG is not safe.</simpara>
<simpara>When both <emphasis>trailer.&lt;keyAlias&gt;.cmd</emphasis> and <emphasis>trailer.&lt;keyAlias&gt;.command</emphasis> are given
for the same &lt;keyAlias&gt;, <emphasis>trailer.&lt;keyAlias&gt;.cmd</emphasis> is used and
<emphasis>trailer.&lt;keyAlias&gt;.command</emphasis> is ignored.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trailer.&lt;keyAlias&gt;.cmd
</term>
<listitem>
<simpara>
        This option can be used to specify a shell command that will be called
        once to automatically add a trailer with the specified &lt;keyAlias&gt;, and then
        called each time a <emphasis>--trailer &lt;keyAlias&gt;=&lt;value&gt;</emphasis> argument is specified to
        modify the &lt;value&gt; of the trailer that this option would produce.
</simpara>
<simpara>When the specified command is first called to add a trailer
with the specified &lt;keyAlias&gt;, the behavior is as if a special
<emphasis>--trailer &lt;keyAlias&gt;=&lt;value&gt;</emphasis> argument was added at the beginning
of the "git interpret-trailers" command, where &lt;value&gt;
is taken to be the standard output of the command with any
leading and trailing whitespace trimmed off.</simpara>
<simpara>If some <emphasis>--trailer &lt;keyAlias&gt;=&lt;value&gt;</emphasis> arguments are also passed
on the command line, the command is called again once for each
of these arguments with the same &lt;keyAlias&gt;. And the &lt;value&gt; part
of these arguments, if any, will be passed to the command as its
first argument. This way the command can produce a &lt;value&gt; computed
from the &lt;value&gt; passed in the <emphasis>--trailer &lt;keyAlias&gt;=&lt;value&gt;</emphasis> argument.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.credentialsInUrl
</term>
<listitem>
<simpara>
        A configured URL can contain plaintext credentials in the form
        <emphasis>&lt;protocol&gt;://&lt;user&gt;:&lt;password&gt;@&lt;domain&gt;/&lt;path&gt;</emphasis>. You may want
        to warn or forbid the use of such configuration (in favor of
        using <xref linkend="git-credential(1)" />). This will be used on
        <xref linkend="git-clone(1)" />, <xref linkend="git-fetch(1)" />, <xref linkend="git-push(1)" />,
        and any other direct use of the configured URL.
</simpara>
<simpara>Note that this is currently limited to detecting credentials in
<emphasis>remote.&lt;name&gt;.url</emphasis> configuration; it won't detect credentials in
<emphasis>remote.&lt;name&gt;.pushurl</emphasis> configuration.</simpara>
<simpara>You might want to enable this to prevent inadvertent credentials
exposure, e.g. because:</simpara>
<itemizedlist>
<listitem>
<simpara>
The OS or system where you're running git may not provide a way or
  otherwise allow you to configure the permissions of the
  configuration file where the username and/or password are stored.
</simpara>
</listitem>
<listitem>
<simpara>
Even if it does, having such data stored "at rest" might expose you
  in other ways, e.g. a backup process might copy the data to another
  system.
</simpara>
</listitem>
<listitem>
<simpara>
The git programs will pass the full URL to one another as arguments
  on the command-line, meaning the credentials will be exposed to other
  unprivileged users on systems that allow them to see the full
  process list of other users. On linux the "hidepid" setting
  documented in procfs(5) allows for configuring this behavior.
</simpara>
<simpara>If such concerns don't apply to you then you probably don't need to be
concerned about credentials exposure due to storing sensitive
data in git's configuration files. If you do want to use this, set
<emphasis>transfer.credentialsInUrl</emphasis> to one of these values:</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>allow</emphasis> (default): Git will proceed with its activity without warning.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>warn</emphasis>: Git will write a warning message to <emphasis>stderr</emphasis> when parsing a URL
  with a plaintext credential.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>die</emphasis>: Git will write a failure message to <emphasis>stderr</emphasis> when parsing a URL
  with a plaintext credential.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.fsckObjects
</term>
<listitem>
<simpara>
        When <emphasis>fetch.fsckObjects</emphasis> or <emphasis>receive.fsckObjects</emphasis> are
        not set, the value of this variable is used instead.
        Defaults to false.
</simpara>
<simpara>When set, the fetch or receive will abort in the case of a malformed
object or a link to a nonexistent object. In addition, various other
issues are checked for, including legacy issues (see <emphasis>fsck.&lt;msg-id&gt;</emphasis>),
and potential security issues like the existence of a <emphasis>.GIT</emphasis> directory
or a malicious <emphasis>.gitmodules</emphasis> file (see the release notes for v2.2.1
and v2.17.1 for details). Other sanity and security checks may be
added in future releases.</simpara>
<simpara>On the receiving side, failing fsckObjects will make those objects
unreachable, see "QUARANTINE ENVIRONMENT" in
<xref linkend="git-receive-pack(1)" />. On the fetch side, malformed objects will
instead be left unreferenced in the repository.</simpara>
<simpara>Due to the non-quarantine nature of the <emphasis>fetch.fsckObjects</emphasis>
implementation it cannot be relied upon to leave the object store
clean like <emphasis>receive.fsckObjects</emphasis> can.</simpara>
<simpara>As objects are unpacked they're written to the object store, so there
can be cases where malicious objects get introduced even though the
"fetch" failed, only to have a subsequent "fetch" succeed because only
new incoming objects are checked, not those that have already been
written to the object store. That difference in behavior should not be
relied upon. In the future, such objects may be quarantined for
"fetch" as well.</simpara>
<simpara>For now, the paranoid need to find some way to emulate the quarantine
environment if they'd like the same protection as "push". E.g. in the
case of an internal mirror do the mirroring in two steps, one to fetch
the untrusted objects, and then do a second "push" (which will use the
quarantine) to another internal repo, and have internal clients
consume this pushed-to repository, or embargo internal fetches and
only allow them once a full "fsck" has run (and no new fetches have
happened in the meantime).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.hideRefs
</term>
<listitem>
<simpara>
        String(s) <emphasis>receive-pack</emphasis> and <emphasis>upload-pack</emphasis> use to decide which
        refs to omit from their initial advertisements.  Use more than
        one definition to specify multiple prefix strings. A ref that is
        under the hierarchies listed in the value of this variable is
        excluded, and is hidden when responding to <emphasis>git push</emphasis> or <emphasis>git
        fetch</emphasis>.  See <emphasis>receive.hideRefs</emphasis> and <emphasis>uploadpack.hideRefs</emphasis> for
        program-specific versions of this config.
</simpara>
<simpara>You may also include a <emphasis>!</emphasis> in front of the ref name to negate the entry,
explicitly exposing it, even if an earlier entry marked it as hidden.
If you have multiple hideRefs values, later entries override earlier ones
(and entries in more-specific config files override less-specific ones).</simpara>
<simpara>If a namespace is in use, the namespace prefix is stripped from each
reference before it is matched against <emphasis>transfer.hiderefs</emphasis> patterns. In
order to match refs before stripping, add a <emphasis>^</emphasis> in front of the ref name. If
you combine <emphasis>!</emphasis> and <emphasis>^</emphasis>, <emphasis>!</emphasis> must be specified first.</simpara>
<simpara>For example, if <emphasis>refs/heads/master</emphasis> is specified in <emphasis>transfer.hideRefs</emphasis> and
the current namespace is <emphasis>foo</emphasis>, then <emphasis>refs/namespaces/foo/refs/heads/master</emphasis>
is omitted from the advertisements. If <emphasis>uploadpack.allowRefInWant</emphasis> is set,
<emphasis>upload-pack</emphasis> will treat <emphasis>want-ref refs/heads/master</emphasis> in a protocol v2
<emphasis>fetch</emphasis> command as if <emphasis>refs/namespaces/foo/refs/heads/master</emphasis> did not exist.
<emphasis>receive-pack</emphasis>, on the other hand, will still advertise the object id the
ref is pointing to without mentioning its name (a so-called ".have" line).</simpara>
<simpara>Even if you hide refs, a client may still be able to steal the target
objects via the techniques described in the "SECURITY" section of the
<xref linkend="gitnamespaces(7)" /> man page; it's best to keep private data in a
separate repository.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.unpackLimit
</term>
<listitem>
<simpara>
        When <emphasis>fetch.unpackLimit</emphasis> or <emphasis>receive.unpackLimit</emphasis> are
        not set, the value of this variable is used instead.
        The default value is 100.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.advertiseSID
</term>
<listitem>
<simpara>
        Boolean. When true, client and server processes will advertise their
        unique session IDs to their remote counterpart. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.bundleURI
</term>
<listitem>
<simpara>
        When <emphasis>true</emphasis>, local <emphasis>git clone</emphasis> commands will request bundle
        information from the remote server (if advertised) and download
        bundles before continuing the clone through the Git protocol.
        Defaults to <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.advertiseObjectInfo
</term>
<listitem>
<simpara>
        When <emphasis>true</emphasis>, the <emphasis>object-info</emphasis> capability is advertised by
        servers. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadarchive.allowUnreachable
</term>
<listitem>
<simpara>
        If true, allow clients to use <emphasis>git archive --remote</emphasis> to request
        any tree, whether reachable from the ref tips or not. See the
        discussion in the "SECURITY" section of
        <xref linkend="git-upload-archive(1)" /> for more details. Defaults to
        <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.hideRefs
</term>
<listitem>
<simpara>
        This variable is the same as <emphasis>transfer.hideRefs</emphasis>, but applies
        only to <emphasis>upload-pack</emphasis> (and so affects only fetches, not pushes).
        An attempt to fetch a hidden ref by <emphasis>git fetch</emphasis> will fail.  See
        also <emphasis>uploadpack.allowTipSHA1InWant</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.allowTipSHA1InWant
</term>
<listitem>
<simpara>
        When <emphasis>uploadpack.hideRefs</emphasis> is in effect, allow <emphasis>upload-pack</emphasis>
        to accept a fetch request that asks for an object at the tip
        of a hidden ref (by default, such a request is rejected).
        See also <emphasis>uploadpack.hideRefs</emphasis>.  Even if this is false, a client
        may be able to steal objects via the techniques described in the
        "SECURITY" section of the <xref linkend="gitnamespaces(7)" /> man page; it's
        best to keep private data in a separate repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.allowReachableSHA1InWant
</term>
<listitem>
<simpara>
        Allow <emphasis>upload-pack</emphasis> to accept a fetch request that asks for an
        object that is reachable from any ref tip. However, note that
        calculating object reachability is computationally expensive.
        Defaults to <emphasis>false</emphasis>.  Even if this is false, a client may be able
        to steal objects via the techniques described in the "SECURITY"
        section of the <xref linkend="gitnamespaces(7)" /> man page; it's best to
        keep private data in a separate repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.allowAnySHA1InWant
</term>
<listitem>
<simpara>
        Allow <emphasis>upload-pack</emphasis> to accept a fetch request that asks for any
        object at all.
        It implies <emphasis>uploadpack.allowTipSHA1InWant</emphasis> and
        <emphasis>uploadpack.allowReachableSHA1InWant</emphasis>. If set to <emphasis>true</emphasis> it will
        enable both of them, it set to <emphasis>false</emphasis> it will disable both of
        them.
        By default not set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.keepAlive
</term>
<listitem>
<simpara>
        When <emphasis>upload-pack</emphasis> has started <emphasis>pack-objects</emphasis>, there may be a
        quiet period while <emphasis>pack-objects</emphasis> prepares the pack. Normally
        it would output progress information, but if <emphasis>--quiet</emphasis> was used
        for the fetch, <emphasis>pack-objects</emphasis> will output nothing at all until
        the pack data begins. Some clients and networks may consider
        the server to be hung and give up. Setting this option instructs
        <emphasis>upload-pack</emphasis> to send an empty keepalive packet every
        <emphasis>uploadpack.keepAlive</emphasis> seconds. Setting this option to 0
        disables keepalive packets entirely. The default is 5 seconds.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.packObjectsHook
</term>
<listitem>
<simpara>
        If this option is set, when <emphasis>upload-pack</emphasis> would run
        <emphasis>git pack-objects</emphasis> to create a packfile for a client, it will
        run this shell command instead.  The <emphasis>pack-objects</emphasis> command and
        arguments it <emphasis>would</emphasis> have run (including the <emphasis>git pack-objects</emphasis>
        at the beginning) are appended to the shell command. The stdin
        and stdout of the hook are treated as if <emphasis>pack-objects</emphasis> itself
        was run. I.e., <emphasis>upload-pack</emphasis> will feed input intended for
        <emphasis>pack-objects</emphasis> to the hook, and expects a completed packfile on
        stdout.
</simpara>
<simpara>Note that this configuration variable is only respected when it is specified
in protected configuration (see <xref linkend="git-config(1)_SCOPES"/>). This is a safety measure
against fetching from untrusted repositories.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.allowFilter
</term>
<listitem>
<simpara>
        If this option is set, <emphasis>upload-pack</emphasis> will support partial
        clone and partial fetch object filtering.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpackfilter.allow
</term>
<listitem>
<simpara>
        Provides a default value for unspecified object filters (see: the
        below configuration variable). If set to <emphasis>true</emphasis>, this will also
        enable all filters which get added in the future.
        Defaults to <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpackfilter.&lt;filter&gt;.allow
</term>
<listitem>
<simpara>
        Explicitly allow or ban the object filter corresponding to
        <emphasis>&lt;filter&gt;</emphasis>, where <emphasis>&lt;filter&gt;</emphasis> may be one of: <emphasis>blob:none</emphasis>,
        <emphasis>blob:limit</emphasis>, <emphasis>object:type</emphasis>, <emphasis>tree</emphasis>, <emphasis>sparse:oid</emphasis>, or <emphasis>combine</emphasis>.
        If using combined filters, both <emphasis>combine</emphasis> and all of the nested
        filter kinds must be allowed. Defaults to <emphasis>uploadpackfilter.allow</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpackfilter.tree.maxDepth
</term>
<listitem>
<simpara>
        Only allow <emphasis>--filter=tree:&lt;n&gt;</emphasis> when <emphasis>&lt;n&gt;</emphasis> is no more than the value of
        <emphasis>uploadpackfilter.tree.maxDepth</emphasis>. If set, this also implies
        <emphasis>uploadpackfilter.tree.allow=true</emphasis>, unless this configuration
        variable had already been set. Has no effect if unset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.allowRefInWant
</term>
<listitem>
<simpara>
        If this option is set, <emphasis>upload-pack</emphasis> will support the <emphasis>ref-in-want</emphasis>
        feature of the protocol version 2 <emphasis>fetch</emphasis> command.  This feature
        is intended for the benefit of load-balanced servers which may
        not have the same view of what OIDs their refs point to due to
        replication delay.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
url.&lt;base&gt;.insteadOf
</term>
<listitem>
<simpara>
        Any URL that starts with this value will be rewritten to
        start, instead, with &lt;base&gt;. In cases where some site serves a
        large number of repositories, and serves them with multiple
        access methods, and some users need to use different access
        methods, this feature allows people to specify any of the
        equivalent URLs and have Git automatically rewrite the URL to
        the best alternative for the particular user, even for a
        never-before-seen repository on the site.  When more than one
        insteadOf strings match a given URL, the longest match is used.
</simpara>
<simpara>Note that any protocol restrictions will be applied to the rewritten
URL. If the rewrite changes the URL to use a custom protocol or remote
helper, you may need to adjust the <emphasis>protocol.*.allow</emphasis> config to permit
the request.  In particular, protocols you expect to use for submodules
must be set to <emphasis>always</emphasis> rather than the default of <emphasis>user</emphasis>. See the
description of <emphasis>protocol.allow</emphasis> above.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
url.&lt;base&gt;.pushInsteadOf
</term>
<listitem>
<simpara>
        Any URL that starts with this value will not be pushed to;
        instead, it will be rewritten to start with &lt;base&gt;, and the
        resulting URL will be pushed to. In cases where some site serves
        a large number of repositories, and serves them with multiple
        access methods, some of which do not allow push, this feature
        allows people to specify a pull-only URL and have Git
        automatically use an appropriate URL to push, even for a
        never-before-seen repository on the site.  When more than one
        pushInsteadOf strings match a given URL, the longest match is
        used.  If a remote has an explicit pushurl, Git will ignore this
        setting for that remote.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
user.name
</term>
<term>
user.email
</term>
<term>
author.name
</term>
<term>
author.email
</term>
<term>
committer.name
</term>
<term>
committer.email
</term>
<listitem>
<simpara>
        The <emphasis>user.name</emphasis> and <emphasis>user.email</emphasis> variables determine what ends
        up in the <emphasis>author</emphasis> and <emphasis>committer</emphasis> fields of commit
        objects.
        If you need the <emphasis>author</emphasis> or <emphasis>committer</emphasis> to be different, the
        <emphasis>author.name</emphasis>, <emphasis>author.email</emphasis>, <emphasis>committer.name</emphasis>, or
        <emphasis>committer.email</emphasis> variables can be set.
        All of these can be overridden by the <emphasis>GIT_AUTHOR_NAME</emphasis>,
        <emphasis>GIT_AUTHOR_EMAIL</emphasis>, <emphasis>GIT_COMMITTER_NAME</emphasis>,
        <emphasis>GIT_COMMITTER_EMAIL</emphasis>, and <emphasis>EMAIL</emphasis> environment variables.
</simpara>
<simpara>Note that the <emphasis>name</emphasis> forms of these variables conventionally refer to
some form of a personal name.  See <xref linkend="git-commit(1)" /> and the
environment variables section of <xref linkend="git(1)" /> for more information on
these settings and the <emphasis>credential.username</emphasis> option if you're looking
for authentication credentials instead.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
user.useConfigOnly
</term>
<listitem>
<simpara>
        Instruct Git to avoid trying to guess defaults for <emphasis>user.email</emphasis>
        and <emphasis>user.name</emphasis>, and instead retrieve the values only from the
        configuration. For example, if you have multiple email addresses
        and would like to use a different one for each repository, then
        with this configuration option set to <emphasis>true</emphasis> in the global config
        along with a name, Git will prompt you to set up an email before
        making new commits in a newly cloned repository.
        Defaults to <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
user.signingKey
</term>
<listitem>
<simpara>
        If <xref linkend="git-tag(1)" /> or <xref linkend="git-commit(1)" /> is not selecting the
        key you want it to automatically when creating a signed tag or
        commit, you can override the default selection with this variable.
        This option is passed unchanged to gpg's --local-user parameter,
        so you may specify a key using any method that gpg supports.
        If gpg.format is set to <emphasis>ssh</emphasis> this can contain the path to either
        your private ssh key or the public key when ssh-agent is used.
        Alternatively it can contain a public key prefixed with <emphasis>key::</emphasis>
        directly (e.g.: "key::ssh-rsa XXXXXX identifier"). The private key
        needs to be available via ssh-agent. If not set Git will call
        gpg.ssh.defaultKeyCommand (e.g.: "ssh-add -L") and try to use the
        first key available. For backward compatibility, a raw key which
        begins with "ssh-", such as "ssh-rsa XXXXXX identifier", is treated
        as "key::ssh-rsa XXXXXX identifier", but this form is deprecated;
        use the <emphasis>key::</emphasis> form instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
versionsort.prereleaseSuffix (deprecated)
</term>
<listitem>
<simpara>
        Deprecated alias for <emphasis>versionsort.suffix</emphasis>.  Ignored if
        <emphasis>versionsort.suffix</emphasis> is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
versionsort.suffix
</term>
<listitem>
<simpara>
        Even when version sort is used in <xref linkend="git-tag(1)" />, tagnames
        with the same base version but different suffixes are still sorted
        lexicographically, resulting e.g. in prerelease tags appearing
        after the main release (e.g. "1.0-rc1" after "1.0").  This
        variable can be specified to determine the sorting order of tags
        with different suffixes.
</simpara>
<simpara>By specifying a single suffix in this variable, any tagname containing
that suffix will appear before the corresponding main release.  E.g. if
the variable is set to "-rc", then all "1.0-rcX" tags will appear before
"1.0".  If specified multiple times, once per suffix, then the order of
suffixes in the configuration will determine the sorting order of tagnames
with those suffixes.  E.g. if "-pre" appears before "-rc" in the
configuration, then all "1.0-preX" tags will be listed before any
"1.0-rcX" tags.  The placement of the main release tag relative to tags
with various suffixes can be determined by specifying the empty suffix
among those other suffixes.  E.g. if the suffixes "-rc", "", "-ck", and
"-bfs" appear in the configuration in this order, then all "v4.8-rcX" tags
are listed first, followed by "v4.8", then "v4.8-ckX" and finally
"v4.8-bfsX".</simpara>
<simpara>If more than one suffix matches the same tagname, then that tagname will
be sorted according to the suffix which starts at the earliest position in
the tagname.  If more than one different matching suffix starts at
that earliest position, then that tagname will be sorted according to the
longest of those suffixes.
The sorting order between different suffixes is undefined if they are
in multiple config files.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
web.browser
</term>
<listitem>
<simpara>
        Specify a web browser that may be used by some commands.
        Currently only <xref linkend="git-instaweb(1)" /> and <xref linkend="git-help(1)" />
        may use it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
worktree.guessRemote
</term>
<listitem>
<simpara>
        If no branch is specified and neither <emphasis>-b</emphasis> nor <emphasis>-B</emphasis> nor
        <emphasis>--detach</emphasis> is used, then <emphasis>git worktree add</emphasis> defaults to
        creating a new branch from HEAD.  If <emphasis>worktree.guessRemote</emphasis> is
        set to true, <emphasis>worktree add</emphasis> tries to find a remote-tracking
        branch whose name uniquely matches the new branch name.  If
        such a branch exists, it is checked out and set as "upstream"
        for the new branch.  If no such match can be found, it falls
        back to creating a new branch from the current HEAD.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
worktree.useRelativePaths
</term>
<listitem>
<simpara>
        Link worktrees using relative paths (when "true") or absolute
        paths (when "false"). This is particularly useful for setups
        where the repository and worktrees may be moved between
        different locations or environments. Defaults to "false".
</simpara>
<simpara>Note that setting <emphasis>worktree.useRelativePaths</emphasis> to "true" implies enabling the
<emphasis>extension.relativeWorktrees</emphasis> config (see <xref linkend="git-config(1)" />),
thus making it incompatible with older versions of Git.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</simplesect>
<simplesect id="git-config(1)__bugs">
<title>BUGS</title>
<simpara>When using the deprecated <emphasis>[section.subsection]</emphasis> syntax, changing a value
will result in adding a multi-line key instead of a change, if the subsection
is given with at least one uppercase character. For example when the config
looks like</simpara>
<screen>  [section.subsection]
    key = value1</screen>
<simpara>and running <emphasis>git config section.Subsection.key value2</emphasis> will result in</simpara>
<screen>  [section.subsection]
    key = value1
    key = value2</screen>
</simplesect>
<simplesect id="git-config(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
