<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="git-diff-pairs(1)">
    <title>git-diff-pairs(1)</title>
<indexterm>
<primary>git-diff-pairs(1)</primary>
</indexterm>
<simplesect id="git-diff-pairs(1)__name">
<title>NAME</title>
<simpara>git-diff-pairs - Compare the content and mode of provided blob pairs</simpara>
</simplesect>
<simplesect id="git-diff-pairs(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><code>git</code> <code>diff-pairs</code> <code>-z</code> [<emphasis>&lt;diff-options&gt;</emphasis>]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-diff-pairs(1)__description">
<title>DESCRIPTION</title>
<simpara>Show changes for file pairs provided on stdin. Input for this command must be
in the NUL-terminated raw output format as generated by commands such as <emphasis>git
diff-tree -z -r --raw</emphasis>. By default, the outputted diffs are computed and shown
in the patch format when stdin closes.</simpara>
<simpara>A single NUL byte may be written to stdin between raw input lines to compute
file pair diffs up to that point instead of waiting for stdin to close. A NUL
byte is also written to the output to delimit between these batches of diffs.</simpara>
<simpara>Usage of this command enables the traditional diff pipeline to be broken up
into separate stages where <emphasis>diff-pairs</emphasis> acts as the output phase. Other
commands, such as <emphasis>diff-tree</emphasis>, may serve as a frontend to compute the raw
diff format used as input.</simpara>
<simpara>Instead of computing diffs via <emphasis>git diff-tree -p -M</emphasis> in one step, <emphasis>diff-tree</emphasis>
can compute the file pairs and rename information without the blob diffs. This
output can be fed to <emphasis>diff-pairs</emphasis> to generate the underlying blob diffs as done
in the following example:</simpara>
<screen>git diff-tree -z -r -M $a $b |
git diff-pairs -z</screen>
<simpara>Computing the tree diff upfront with rename information allows patch output
from <emphasis>diff-pairs</emphasis> to be progressively computed over the course of potentially
multiple invocations.</simpara>
<simpara>Pathspecs are not currently supported by <emphasis>diff-pairs</emphasis>. Pathspec limiting should
be performed by the upstream command generating the raw diffs used as input.</simpara>
<simpara>Tree objects are not currently supported as input and are rejected.</simpara>
<simpara>Abbreviated object IDs in the <emphasis>diff-pairs</emphasis> input are not supported. Outputted
object IDs can be abbreviated using the <emphasis>--abbrev</emphasis> option.</simpara>
</simplesect>
<simplesect id="git-diff-pairs(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
<emphasis>-p</emphasis>
</term>
<term>
<emphasis>-u</emphasis>
</term>
<term>
<emphasis>--patch</emphasis>
</term>
<listitem>
<simpara>
        Generate patch (see <xref linkend="git-diff-pairs(1)_generate_patch_text_with_p"/>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-s</emphasis>
</term>
<term>
<emphasis>--no-patch</emphasis>
</term>
<listitem>
<simpara>
        Suppress all output from the diff machinery.  Useful for
        commands like <emphasis>git show</emphasis> that show the patch by default to
        squelch their output, or to cancel the effect of options like
        <emphasis>--patch</emphasis>, <emphasis>--stat</emphasis> earlier on the command line in an alias.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-U&lt;n&gt;</emphasis>
</term>
<term>
<emphasis>--unified=&lt;n&gt;</emphasis>
</term>
<listitem>
<simpara>
        Generate diffs with <emphasis>&lt;n&gt;</emphasis> lines of context instead of
        the usual three.
        Implies <emphasis>--patch</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--output=&lt;file&gt;</emphasis>
</term>
<listitem>
<simpara>
        Output to a specific file instead of stdout.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--output-indicator-new=&lt;char&gt;</emphasis>
</term>
<term>
<emphasis>--output-indicator-old=&lt;char&gt;</emphasis>
</term>
<term>
<emphasis>--output-indicator-context=&lt;char&gt;</emphasis>
</term>
<listitem>
<simpara>
        Specify the character used to indicate new, old or context
        lines in the generated patch. Normally they are <emphasis>+</emphasis>, <emphasis>-</emphasis> and
        ' ' respectively.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--raw</emphasis>
</term>
<listitem>
<simpara>
        Generate the diff in raw format.
        This is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--patch-with-raw</emphasis>
</term>
<listitem>
<simpara>
        Synonym for <emphasis>-p --raw</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--indent-heuristic</emphasis>
</term>
<listitem>
<simpara>
        Enable the heuristic that shifts diff hunk boundaries to make patches
        easier to read. This is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--no-indent-heuristic</emphasis>
</term>
<listitem>
<simpara>
        Disable the indent heuristic.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--minimal</emphasis>
</term>
<listitem>
<simpara>
        Spend extra time to make sure the smallest possible
        diff is produced.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--patience</emphasis>
</term>
<listitem>
<simpara>
        Generate a diff using the "patience diff" algorithm.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--histogram</emphasis>
</term>
<listitem>
<simpara>
        Generate a diff using the "histogram diff" algorithm.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--anchored=&lt;text&gt;</emphasis>
</term>
<listitem>
<simpara>
        Generate a diff using the "anchored diff" algorithm.
</simpara>
<simpara>This option may be specified more than once.</simpara>
<simpara>If a line exists in both the source and destination, exists only once,
and starts with <emphasis>&lt;text&gt;</emphasis>, this algorithm attempts to prevent it from
appearing as a deletion or addition in the output. It uses the "patience
diff" algorithm internally.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--diff-algorithm=(patience|minimal|histogram|myers)</emphasis>
</term>
<listitem>
<simpara>
        Choose a diff algorithm. The variants are as follows:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>default</emphasis>
</term>
<term>
<emphasis>myers</emphasis>
</term>
<listitem>
<simpara>
        The basic greedy diff algorithm. Currently, this is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>minimal</emphasis>
</term>
<listitem>
<simpara>
        Spend extra time to make sure the smallest possible diff is
        produced.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>patience</emphasis>
</term>
<listitem>
<simpara>
        Use "patience diff" algorithm when generating patches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>histogram</emphasis>
</term>
<listitem>
<simpara>
        This algorithm extends the patience algorithm to "support
        low-occurrence common elements".
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>For instance, if you configured the <emphasis>diff.algorithm</emphasis> variable to a
non-default value and want to use the default one, then you
have to use <emphasis>--diff-algorithm=default</emphasis> option.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--stat[=&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]]</emphasis>
</term>
<listitem>
<simpara>
        Generate a diffstat. By default, as much space as necessary
        will be used for the filename part, and the rest for the graph
        part. Maximum width defaults to terminal width, or 80 columns
        if not connected to a terminal, and can be overridden by
        <emphasis>&lt;width&gt;</emphasis>. The width of the filename part can be limited by
        giving another width <emphasis>&lt;name-width&gt;</emphasis> after a comma or by setting
        <emphasis>diff.statNameWidth=&lt;name-width&gt;</emphasis>. The width of the graph part can be
        limited by using <emphasis>--stat-graph-width=&lt;graph-width&gt;</emphasis> or by setting
        <emphasis>diff.statGraphWidth=&lt;graph-width&gt;</emphasis>. Using <emphasis>--stat</emphasis> or
        <emphasis>--stat-graph-width</emphasis> affects all commands generating a stat graph,
        while setting <emphasis>diff.statNameWidth</emphasis> or <emphasis>diff.statGraphWidth</emphasis>
        does not affect <emphasis>git format-patch</emphasis>.
        By giving a third parameter <emphasis>&lt;count&gt;</emphasis>, you can limit the output to
        the first <emphasis>&lt;count&gt;</emphasis> lines, followed by <emphasis>...</emphasis> if there are more.
</simpara>
<simpara>These parameters can also be set individually with <emphasis>--stat-width=&lt;width&gt;</emphasis>,
<emphasis>--stat-name-width=&lt;name-width&gt;</emphasis> and <emphasis>--stat-count=&lt;count&gt;</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--compact-summary</emphasis>
</term>
<listitem>
<simpara>
        Output a condensed summary of extended header information such
        as file creations or deletions ("new" or "gone", optionally <emphasis>+l</emphasis>
        if it's a symlink) and mode changes (<emphasis>+x</emphasis> or <emphasis>-x</emphasis> for adding
        or removing executable bit respectively) in diffstat. The
        information is put between the filename part and the graph
        part. Implies <emphasis>--stat</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--numstat</emphasis>
</term>
<listitem>
<simpara>
        Similar to <emphasis>--stat</emphasis>, but shows number of added and
        deleted lines in decimal notation and pathname without
        abbreviation, to make it more machine friendly.  For
        binary files, outputs two <emphasis>-</emphasis> instead of saying
        <emphasis>0 0</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--shortstat</emphasis>
</term>
<listitem>
<simpara>
        Output only the last line of the <emphasis>--stat</emphasis> format containing total
        number of modified files, as well as number of added and deleted
        lines.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-X [&lt;param&gt;,...]</emphasis>
</term>
<term>
<emphasis>--dirstat[=&lt;param&gt;,...]</emphasis>
</term>
<listitem>
<simpara>
        Output the distribution of relative amount of changes for each
        sub-directory. The behavior of <emphasis>--dirstat</emphasis> can be customized by
        passing it a comma separated list of parameters.
        The defaults are controlled by the <emphasis>diff.dirstat</emphasis> configuration
        variable (see <xref linkend="git-config(1)" />).
        The following parameters are available:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>changes</emphasis>
</term>
<listitem>
<simpara>
        Compute the dirstat numbers by counting the lines that have been
        removed from the source, or added to the destination. This ignores
        the amount of pure code movements within a file.  In other words,
        rearranging lines in a file is not counted as much as other changes.
        This is the default behavior when no parameter is given.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>lines</emphasis>
</term>
<listitem>
<simpara>
        Compute the dirstat numbers by doing the regular line-based diff
        analysis, and summing the removed/added line counts. (For binary
        files, count 64-byte chunks instead, since binary files have no
        natural concept of lines). This is a more expensive <emphasis>--dirstat</emphasis>
        behavior than the <emphasis>changes</emphasis> behavior, but it does count rearranged
        lines within a file as much as other changes. The resulting output
        is consistent with what you get from the other <emphasis>--*stat</emphasis> options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>files</emphasis>
</term>
<listitem>
<simpara>
        Compute the dirstat numbers by counting the number of files changed.
        Each changed file counts equally in the dirstat analysis. This is
        the computationally cheapest <emphasis>--dirstat</emphasis> behavior, since it does
        not have to look at the file contents at all.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>cumulative</emphasis>
</term>
<listitem>
<simpara>
        Count changes in a child directory for the parent directory as well.
        Note that when using <emphasis>cumulative</emphasis>, the sum of the percentages
        reported may exceed 100%. The default (non-cumulative) behavior can
        be specified with the <emphasis>noncumulative</emphasis> parameter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>&lt;limit&gt;</emphasis>
</term>
<listitem>
<simpara>
        An integer parameter specifies a cut-off percent (3% by default).
        Directories contributing less than this percentage of the changes
        are not shown in the output.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Example: The following will count changed files, while ignoring
directories with less than 10% of the total amount of changed files,
and accumulating child directory counts in the parent directories:
<emphasis>--dirstat=files,10,cumulative</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--cumulative</emphasis>
</term>
<listitem>
<simpara>
        Synonym for <emphasis>--dirstat=cumulative</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--dirstat-by-file[=&lt;param&gt;,...]</emphasis>
</term>
<listitem>
<simpara>
        Synonym for <emphasis>--dirstat=files,&lt;param&gt;,...</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--summary</emphasis>
</term>
<listitem>
<simpara>
        Output a condensed summary of extended header information
        such as creations, renames and mode changes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--patch-with-stat</emphasis>
</term>
<listitem>
<simpara>
        Synonym for <emphasis>-p --stat</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-z</emphasis>
</term>
<listitem>
<simpara>
        When <emphasis>--raw</emphasis>, <emphasis>--numstat</emphasis>, <emphasis>--name-only</emphasis> or <emphasis>--name-status</emphasis> has been
        given, do not munge pathnames and use NULs as output field terminators.
</simpara>
<simpara>Without this option, pathnames with "unusual" characters are quoted as
explained for the configuration variable <emphasis>core.quotePath</emphasis> (see
<xref linkend="git-config(1)" />).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--name-only</emphasis>
</term>
<listitem>
<simpara>
        Show only the name of each changed file in the post-image tree.
        The file names are often encoded in UTF-8.
        For more information see the discussion about encoding in the <xref linkend="git-log(1)" />
        manual page.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--name-status</emphasis>
</term>
<listitem>
<simpara>
        Show only the name(s) and status of each changed file. See the description
        of the <emphasis>--diff-filter</emphasis> option on what the status letters mean.
        Just like <emphasis>--name-only</emphasis> the file names are often encoded in UTF-8.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--submodule[=&lt;format&gt;]</emphasis>
</term>
<listitem>
<simpara>
        Specify how differences in submodules are shown.  When specifying
        <emphasis>--submodule=short</emphasis> the <emphasis>short</emphasis> format is used.  This format just
        shows the names of the commits at the beginning and end of the range.
        When <emphasis>--submodule</emphasis> or <emphasis>--submodule=log</emphasis> is specified, the <emphasis>log</emphasis>
        format is used.  This format lists the commits in the range like
        <xref linkend="git-submodule(1)" /> <emphasis>summary</emphasis> does.  When <emphasis>--submodule=diff</emphasis>
        is specified, the <emphasis>diff</emphasis> format is used.  This format shows an
        inline diff of the changes in the submodule contents between the
        commit range.  Defaults to <emphasis>diff.submodule</emphasis> or the <emphasis>short</emphasis> format
        if the config option is unset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--color[=&lt;when&gt;]</emphasis>
</term>
<listitem>
<simpara>
        Show colored diff.
        <emphasis>--color</emphasis> (i.e. without <emphasis>=&lt;when&gt;</emphasis>) is the same as <emphasis>--color=always</emphasis>.
        <emphasis>&lt;when&gt;</emphasis> can be one of <emphasis>always</emphasis>, <emphasis>never</emphasis>, or <emphasis>auto</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--no-color</emphasis>
</term>
<listitem>
<simpara>
        Turn off colored diff.
        It is the same as <emphasis>--color=never</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--color-moved[=&lt;mode&gt;]</emphasis>
</term>
<listitem>
<simpara>
        Moved lines of code are colored differently.
        The <emphasis>&lt;mode&gt;</emphasis> defaults to <emphasis>no</emphasis> if the option is not given
        and to <emphasis>zebra</emphasis> if the option with no mode is given.
        The mode must be one of:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>no</emphasis>
</term>
<listitem>
<simpara>
        Moved lines are not highlighted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>default</emphasis>
</term>
<listitem>
<simpara>
        Is a synonym for <emphasis>zebra</emphasis>. This may change to a more sensible mode
        in the future.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>plain</emphasis>
</term>
<listitem>
<simpara>
        Any line that is added in one location and was removed
        in another location will be colored with <emphasis>color.diff.newMoved</emphasis>.
        Similarly <emphasis>color.diff.oldMoved</emphasis> will be used for removed lines
        that are added somewhere else in the diff. This mode picks up any
        moved line, but it is not very useful in a review to determine
        if a block of code was moved without permutation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>blocks</emphasis>
</term>
<listitem>
<simpara>
        Blocks of moved text of at least 20 alphanumeric characters
        are detected greedily. The detected blocks are
        painted using either the <emphasis>color.diff.(old|new)Moved</emphasis> color.
        Adjacent blocks cannot be told apart.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>zebra</emphasis>
</term>
<listitem>
<simpara>
        Blocks of moved text are detected as in <emphasis>blocks</emphasis> mode. The blocks
        are painted using either the <emphasis>color.diff.(old|new)Moved</emphasis> color or
        <emphasis>color.diff.(old|new)MovedAlternative</emphasis>. The change between
        the two colors indicates that a new block was detected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>dimmed-zebra</emphasis>
</term>
<listitem>
<simpara>
        Similar to <emphasis>zebra</emphasis>, but additional dimming of uninteresting parts
        of moved code is performed. The bordering lines of two adjacent
        blocks are considered interesting, the rest is uninteresting.
        <emphasis>dimmed_zebra</emphasis> is a deprecated synonym.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--no-color-moved</emphasis>
</term>
<listitem>
<simpara>
        Turn off move detection. This can be used to override configuration
        settings. It is the same as <emphasis>--color-moved=no</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--color-moved-ws=&lt;mode&gt;,...</emphasis>
</term>
<listitem>
<simpara>
        This configures how whitespace is ignored when performing the
        move detection for <emphasis>--color-moved</emphasis>.
        These modes can be given as a comma separated list:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>no</emphasis>
</term>
<listitem>
<simpara>
        Do not ignore whitespace when performing move detection.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>ignore-space-at-eol</emphasis>
</term>
<listitem>
<simpara>
        Ignore changes in whitespace at EOL.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>ignore-space-change</emphasis>
</term>
<listitem>
<simpara>
        Ignore changes in amount of whitespace.  This ignores whitespace
        at line end, and considers all other sequences of one or
        more whitespace characters to be equivalent.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>ignore-all-space</emphasis>
</term>
<listitem>
<simpara>
        Ignore whitespace when comparing lines. This ignores differences
        even if one line has whitespace where the other line has none.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>allow-indentation-change</emphasis>
</term>
<listitem>
<simpara>
        Initially ignore any whitespace in the move detection, then
        group the moved code blocks only into a block if the change in
        whitespace is the same per line. This is incompatible with the
        other modes.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--no-color-moved-ws</emphasis>
</term>
<listitem>
<simpara>
        Do not ignore whitespace when performing move detection. This can be
        used to override configuration settings. It is the same as
        <emphasis>--color-moved-ws=no</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--word-diff[=&lt;mode&gt;]</emphasis>
</term>
<listitem>
<simpara>
        By default, words are delimited by whitespace; see
        <emphasis>--word-diff-regex</emphasis> below.  The <emphasis>&lt;mode&gt;</emphasis> defaults to <emphasis>plain</emphasis>, and
        must be one of:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>color</emphasis>
</term>
<listitem>
<simpara>
        Highlight changed words using only colors.  Implies <emphasis>--color</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>plain</emphasis>
</term>
<listitem>
<simpara>
        Show words as <literal>[-removed-]</literal> and <literal>{<literal>added</literal>}</literal>.  Makes no
        attempts to escape the delimiters if they appear in the input,
        so the output may be ambiguous.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>porcelain</emphasis>
</term>
<listitem>
<simpara>
        Use a special line-based format intended for script
        consumption.  Added/removed/unchanged runs are printed in the
        usual unified diff format, starting with a <emphasis>+</emphasis>/<emphasis>-</emphasis>/` `
        character at the beginning of the line and extending to the
        end of the line.  Newlines in the input are represented by a
        tilde <emphasis>~</emphasis> on a line of its own.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>none</emphasis>
</term>
<listitem>
<simpara>
        Disable word diff again.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Note that despite the name of the first mode, color is used to
highlight the changed parts in all modes if enabled.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--word-diff-regex=&lt;regex&gt;</emphasis>
</term>
<listitem>
<simpara>
        Use <emphasis>&lt;regex&gt;</emphasis> to decide what a word is, instead of considering
        runs of non-whitespace to be a word.  Also implies
        <emphasis>--word-diff</emphasis> unless it was already enabled.
</simpara>
<simpara>Every non-overlapping match of the
<emphasis>&lt;regex&gt;</emphasis> is considered a word.  Anything between these matches is
considered whitespace and ignored(!) for the purposes of finding
differences.  You may want to append <emphasis>|[^[:space:]]</emphasis> to your regular
expression to make sure that it matches all non-whitespace characters.
A match that contains a newline is silently truncated(!) at the
newline.</simpara>
<simpara>For example, <emphasis>--word-diff-regex=.</emphasis> will treat each character as a word
and, correspondingly, show differences character by character.</simpara>
<simpara>The regex can also be set via a diff driver or configuration option, see
<xref linkend="gitattributes(5)" /> or <xref linkend="git-config(1)" />.  Giving it explicitly
overrides any diff driver or configuration setting.  Diff drivers
override configuration settings.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--color-words[=&lt;regex&gt;]</emphasis>
</term>
<listitem>
<simpara>
        Equivalent to <emphasis>--word-diff=color</emphasis> plus (if a regex was
        specified) <emphasis>--word-diff-regex=&lt;regex&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--no-renames</emphasis>
</term>
<listitem>
<simpara>
        Turn off rename detection, even when the configuration
        file gives the default to do so.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--[no-]rename-empty</emphasis>
</term>
<listitem>
<simpara>
        Whether to use empty blobs as rename source.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--check</emphasis>
</term>
<listitem>
<simpara>
        Warn if changes introduce conflict markers or whitespace errors.
        What are considered whitespace errors is controlled by <emphasis>core.whitespace</emphasis>
        configuration.  By default, trailing whitespaces (including
        lines that consist solely of whitespaces) and a space character
        that is immediately followed by a tab character inside the
        initial indent of the line are considered whitespace errors.
        Exits with non-zero status if problems are found. Not compatible
        with <emphasis>--exit-code</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ws-error-highlight=&lt;kind&gt;</emphasis>
</term>
<listitem>
<simpara>
        Highlight whitespace errors in the <emphasis>context</emphasis>, <emphasis>old</emphasis> or <emphasis>new</emphasis>
        lines of the diff.  Multiple values are separated by comma,
        <emphasis>none</emphasis> resets previous values, <emphasis>default</emphasis> reset the list to
        <emphasis>new</emphasis> and <emphasis>all</emphasis> is a shorthand for <emphasis>old,new,context</emphasis>.  When
        this option is not given, and the configuration variable
        <emphasis>diff.wsErrorHighlight</emphasis> is not set, only whitespace errors in
        <emphasis>new</emphasis> lines are highlighted. The whitespace errors are colored
        with <emphasis>color.diff.whitespace</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--full-index</emphasis>
</term>
<listitem>
<simpara>
        Instead of the first handful of characters, show the full
        pre- and post-image blob object names on the "index"
        line when generating patch format output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--binary</emphasis>
</term>
<listitem>
<simpara>
        In addition to <emphasis>--full-index</emphasis>, output a binary diff that
        can be applied with <emphasis>git-apply</emphasis>.
        Implies <emphasis>--patch</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--abbrev[=&lt;n&gt;]</emphasis>
</term>
<listitem>
<simpara>
        Instead of showing the full 40-byte hexadecimal object
        name in diff-raw format output and diff-tree header
        lines, show the shortest prefix that is at least <emphasis>&lt;n&gt;</emphasis>
        hexdigits long that uniquely refers the object.
        In diff-patch output format, <emphasis>--full-index</emphasis> takes higher
        precedence, i.e. if <emphasis>--full-index</emphasis> is specified, full blob
        names will be shown regardless of <emphasis>--abbrev</emphasis>.
        Non default number of digits can be specified with <emphasis>--abbrev=&lt;n&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-B[&lt;n&gt;][/&lt;m&gt;]</emphasis>
</term>
<term>
<emphasis>--break-rewrites[=[&lt;n&gt;][/&lt;m&gt;]]</emphasis>
</term>
<listitem>
<simpara>
        Break complete rewrite changes into pairs of delete and
        create. This serves two purposes:
</simpara>
<simpara>It affects the way a change that amounts to a total rewrite of a file
not as a series of deletion and insertion mixed together with a very
few lines that happen to match textually as the context, but as a
single deletion of everything old followed by a single insertion of
everything new, and the number <emphasis>&lt;m&gt;</emphasis> controls this aspect of the <emphasis>-B</emphasis>
option (defaults to 60%). <emphasis>-B/70%</emphasis> specifies that less than 30% of the
original should remain in the result for Git to consider it a total
rewrite (i.e. otherwise the resulting patch will be a series of
deletion and insertion mixed together with context lines).</simpara>
<simpara>When used with <emphasis>-M</emphasis>, a totally-rewritten file is also considered as the
source of a rename (usually <emphasis>-M</emphasis> only considers a file that disappeared
as the source of a rename), and the number <emphasis>&lt;n&gt;</emphasis> controls this aspect of
the <emphasis>-B</emphasis> option (defaults to 50%). <emphasis>-B20%</emphasis> specifies that a change with
addition and deletion compared to 20% or more of the file's size are
eligible for being picked up as a possible source of a rename to
another file.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-M[&lt;n&gt;]</emphasis>
</term>
<term>
<emphasis>--find-renames[=&lt;n&gt;]</emphasis>
</term>
<listitem>
<simpara>
        Detect renames.
        If <emphasis>&lt;n&gt;</emphasis> is specified, it is a threshold on the similarity
        index (i.e. amount of addition/deletions compared to the
        file's size). For example, <emphasis>-M90%</emphasis> means Git should consider a
        delete/add pair to be a rename if more than 90% of the file
        hasn't changed.  Without a <emphasis>%</emphasis> sign, the number is to be read as
        a fraction, with a decimal point before it.  I.e., <emphasis>-M5</emphasis> becomes
        0.5, and is thus the same as <emphasis>-M50%</emphasis>.  Similarly, <emphasis>-M05</emphasis> is
        the same as <emphasis>-M5%</emphasis>.  To limit detection to exact renames, use
        <emphasis>-M100%</emphasis>.  The default similarity index is 50%.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-C[&lt;n&gt;]</emphasis>
</term>
<term>
<emphasis>--find-copies[=&lt;n&gt;]</emphasis>
</term>
<listitem>
<simpara>
        Detect copies as well as renames.  See also <emphasis>--find-copies-harder</emphasis>.
        If <emphasis>&lt;n&gt;</emphasis> is specified, it has the same meaning as for <emphasis>-M&lt;n&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--find-copies-harder</emphasis>
</term>
<listitem>
<simpara>
        For performance reasons, by default, <emphasis>-C</emphasis> option finds copies only
        if the original file of the copy was modified in the same
        changeset.  This flag makes the command
        inspect unmodified files as candidates for the source of
        copy.  This is a very expensive operation for large
        projects, so use it with caution.  Giving more than one
        <emphasis>-C</emphasis> option has the same effect.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-D</emphasis>
</term>
<term>
<emphasis>--irreversible-delete</emphasis>
</term>
<listitem>
<simpara>
        Omit the preimage for deletes, i.e. print only the header but not
        the diff between the preimage and <emphasis>/dev/null</emphasis>. The resulting patch
        is not meant to be applied with <emphasis>patch</emphasis> or <emphasis>git apply</emphasis>; this is
        solely for people who want to just concentrate on reviewing the
        text after the change. In addition, the output obviously lacks
        enough information to apply such a patch in reverse, even manually,
        hence the name of the option.
</simpara>
<simpara>When used together with <emphasis>-B</emphasis>, omit also the preimage in the deletion part
of a delete/create pair.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-l&lt;num&gt;</emphasis>
</term>
<listitem>
<simpara>
        The <emphasis>-M</emphasis> and <emphasis>-C</emphasis> options involve some preliminary steps that
        can detect subsets of renames/copies cheaply, followed by an
        exhaustive fallback portion that compares all remaining
        unpaired destinations to all relevant sources.  (For renames,
        only remaining unpaired sources are relevant; for copies, all
        original sources are relevant.)  For N sources and
        destinations, this exhaustive check is O(N^2).  This option
        prevents the exhaustive portion of rename/copy detection from
        running if the number of source/destination files involved
        exceeds the specified number.  Defaults to <emphasis>diff.renameLimit</emphasis>.
        Note that a value of 0 is treated as unlimited.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]</emphasis>
</term>
<listitem>
<simpara>
        Select only files that are Added (<emphasis>A</emphasis>), Copied (<emphasis>C</emphasis>),
        Deleted (<emphasis>D</emphasis>), Modified (<emphasis>M</emphasis>), Renamed (<emphasis>R</emphasis>), have their
        type (i.e. regular file, symlink, submodule, &#8230;) changed (<emphasis>T</emphasis>),
        are Unmerged (<emphasis>U</emphasis>), are
        Unknown (<emphasis>X</emphasis>), or have had their pairing Broken (<emphasis>B</emphasis>).
        Any combination of the filter characters (including none) can be used.
        When <emphasis>*</emphasis> (All-or-none) is added to the combination, all
        paths are selected if there is any file that matches
        other criteria in the comparison; if there is no file
        that matches other criteria, nothing is selected.
</simpara>
<simpara>Also, these upper-case letters can be downcased to exclude.  E.g.
<emphasis>--diff-filter=ad</emphasis> excludes added and deleted paths.</simpara>
<simpara>Note that not all diffs can feature all types. For instance, copied and
renamed entries cannot appear if detection for those types is disabled.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-S&lt;string&gt;</emphasis>
</term>
<listitem>
<simpara>
        Look for differences that change the number of occurrences of
        the specified <emphasis>&lt;string&gt;</emphasis> (i.e. addition/deletion) in a file.
        Intended for the scripter's use.
</simpara>
<simpara>It is useful when you're looking for an exact block of code (like a
struct), and want to know the history of that block since it first
came into being: use the feature iteratively to feed the interesting
block in the preimage back into <emphasis>-S</emphasis>, and keep going until you get the
very first version of the block.</simpara>
<simpara>Binary files are searched as well.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-G&lt;regex&gt;</emphasis>
</term>
<listitem>
<simpara>
        Look for differences whose patch text contains added/removed
        lines that match <emphasis>&lt;regex&gt;</emphasis>.
</simpara>
<simpara>To illustrate the difference between <emphasis>-S&lt;regex&gt;</emphasis> <emphasis>--pickaxe-regex</emphasis> and
<emphasis>-G&lt;regex&gt;</emphasis>, consider a commit with the following diff in the same
file:</simpara>
<screen>+    return frotz(nitfol, two-&gt;ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);</screen>
<simpara>While <emphasis>git log -G"frotz\(nitfol"</emphasis> will show this commit, <emphasis>git log
-S"frotz\(nitfol" --pickaxe-regex</emphasis> will not (because the number of
occurrences of that string did not change).</simpara>
<simpara>Unless <emphasis>--text</emphasis> is supplied patches of binary files without a textconv
filter will be ignored.</simpara>
<simpara>See the <emphasis>pickaxe</emphasis> entry in <xref linkend="gitdiffcore(7)" /> for more
information.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--find-object=&lt;object-id&gt;</emphasis>
</term>
<listitem>
<simpara>
        Look for differences that change the number of occurrences of
        the specified object. Similar to <emphasis>-S</emphasis>, just the argument is different
        in that it doesn't search for a specific string but for a specific
        object id.
</simpara>
<simpara>The object can be a blob or a submodule commit. It implies the <emphasis>-t</emphasis> option in
<emphasis>git-log</emphasis> to also find trees.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--pickaxe-all</emphasis>
</term>
<listitem>
<simpara>
        When <emphasis>-S</emphasis> or <emphasis>-G</emphasis> finds a change, show all the changes in that
        changeset, not just the files that contain the change
        in <emphasis>&lt;string&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--pickaxe-regex</emphasis>
</term>
<listitem>
<simpara>
        Treat the <emphasis>&lt;string&gt;</emphasis> given to <emphasis>-S</emphasis> as an extended POSIX regular
        expression to match.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-O&lt;orderfile&gt;</emphasis>
</term>
<listitem>
<simpara>
        Control the order in which files appear in the output.
        This overrides the <emphasis>diff.orderFile</emphasis> configuration variable
        (see <xref linkend="git-config(1)" />).  To cancel <emphasis>diff.orderFile</emphasis>,
        use <emphasis>-O/dev/null</emphasis>.
</simpara>
<simpara>The output order is determined by the order of glob patterns in
<emphasis>&lt;orderfile&gt;</emphasis>.
All files with pathnames that match the first pattern are output
first, all files with pathnames that match the second pattern (but not
the first) are output next, and so on.
All files with pathnames that do not match any pattern are output
last, as if there was an implicit match-all pattern at the end of the
file.
If multiple pathnames have the same rank (they match the same pattern
but no earlier patterns), their output order relative to each other is
the normal order.</simpara>
<simpara><emphasis>&lt;orderfile&gt;</emphasis> is parsed as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>
Blank lines are ignored, so they can be used as separators for
   readability.
</simpara>
</listitem>
<listitem>
<simpara>
Lines starting with a hash ("<emphasis>#</emphasis>") are ignored, so they can be used
   for comments.  Add a backslash ("<emphasis>\</emphasis>") to the beginning of the
   pattern if it starts with a hash.
</simpara>
</listitem>
<listitem>
<simpara>
Each other line contains a single pattern.
</simpara>
</listitem>
</itemizedlist>
<simpara>Patterns have the same syntax and semantics as patterns used for
<emphasis>fnmatch</emphasis>(3) without the <emphasis>FNM_PATHNAME</emphasis> flag, except a pathname also
matches a pattern if removing any number of the final pathname
components matches the pattern.  For example, the pattern "<emphasis>foo*bar</emphasis>"
matches "<emphasis>fooasdfbar</emphasis>" and "<emphasis>foo/bar/baz/asdf</emphasis>" but not "<emphasis>foobarx</emphasis>".</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--skip-to=&lt;file&gt;</emphasis>
</term>
<term>
<emphasis>--rotate-to=&lt;file&gt;</emphasis>
</term>
<listitem>
<simpara>
        Discard the files before the named <emphasis>&lt;file&gt;</emphasis> from the output
        (i.e. <emphasis>skip to</emphasis>), or move them to the end of the output
        (i.e. <emphasis>rotate to</emphasis>).  These options were invented primarily for the use
        of the <emphasis>git difftool</emphasis> command, and may not be very useful
        otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-R</emphasis>
</term>
<listitem>
<simpara>
        Swap two inputs; that is, show differences from index or
        on-disk file to tree contents.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--relative[=&lt;path&gt;]</emphasis>
</term>
<term>
<emphasis>--no-relative</emphasis>
</term>
<listitem>
<simpara>
        When run from a subdirectory of the project, it can be
        told to exclude changes outside the directory and show
        pathnames relative to it with this option.  When you are
        not in a subdirectory (e.g. in a bare repository), you
        can name which subdirectory to make the output relative
        to by giving a <emphasis>&lt;path&gt;</emphasis> as an argument.
        <emphasis>--no-relative</emphasis> can be used to countermand both <emphasis>diff.relative</emphasis> config
        option and previous <emphasis>--relative</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-a</emphasis>
</term>
<term>
<emphasis>--text</emphasis>
</term>
<listitem>
<simpara>
        Treat all files as text.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ignore-cr-at-eol</emphasis>
</term>
<listitem>
<simpara>
        Ignore carriage-return at the end of line when doing a comparison.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ignore-space-at-eol</emphasis>
</term>
<listitem>
<simpara>
        Ignore changes in whitespace at EOL.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-b</emphasis>
</term>
<term>
<emphasis>--ignore-space-change</emphasis>
</term>
<listitem>
<simpara>
        Ignore changes in amount of whitespace.  This ignores whitespace
        at line end, and considers all other sequences of one or
        more whitespace characters to be equivalent.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-w</emphasis>
</term>
<term>
<emphasis>--ignore-all-space</emphasis>
</term>
<listitem>
<simpara>
        Ignore whitespace when comparing lines.  This ignores
        differences even if one line has whitespace where the other
        line has none.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ignore-blank-lines</emphasis>
</term>
<listitem>
<simpara>
        Ignore changes whose lines are all blank.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-I&lt;regex&gt;</emphasis>
</term>
<term>
<emphasis>--ignore-matching-lines=&lt;regex&gt;</emphasis>
</term>
<listitem>
<simpara>
        Ignore changes whose all lines match <emphasis>&lt;regex&gt;</emphasis>.  This option may
        be specified more than once.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--inter-hunk-context=&lt;number&gt;</emphasis>
</term>
<listitem>
<simpara>
        Show the context between diff hunks, up to the specified <emphasis>&lt;number&gt;</emphasis>
        of lines, thereby fusing hunks that are close to each other.
        Defaults to <emphasis>diff.interHunkContext</emphasis> or 0 if the config option
        is unset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>-W</emphasis>
</term>
<term>
<emphasis>--function-context</emphasis>
</term>
<listitem>
<simpara>
        Show whole function as context lines for each change.
        The function names are determined in the same way as
        <emphasis>git diff</emphasis> works out patch hunk headers (see "Defining a
        custom hunk-header" in <xref linkend="gitattributes(5)" />).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--exit-code</emphasis>
</term>
<listitem>
<simpara>
        Make the program exit with codes similar to <emphasis>diff</emphasis>(1).
        That is, it exits with 1 if there were differences and
        0 means no differences.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--quiet</emphasis>
</term>
<listitem>
<simpara>
        Disable all output of the program. Implies <emphasis>--exit-code</emphasis>.
        Disables execution of external diff helpers whose exit code
        is not trusted, i.e. their respective configuration option
        <emphasis>diff.trustExitCode</emphasis> or <literal>diff.</literal><emphasis>&lt;driver&gt;</emphasis><literal>.trustExitCode</literal> or
        environment variable <emphasis>GIT_EXTERNAL_DIFF_TRUST_EXIT_CODE</emphasis> is
        false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ext-diff</emphasis>
</term>
<listitem>
<simpara>
        Allow an external diff helper to be executed. If you set an
        external diff driver with <xref linkend="gitattributes(5)" />, you need
        to use this option with <xref linkend="git-log(1)" /> and friends.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--no-ext-diff</emphasis>
</term>
<listitem>
<simpara>
        Disallow external diff drivers.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--textconv</emphasis>
</term>
<term>
<emphasis>--no-textconv</emphasis>
</term>
<listitem>
<simpara>
        Allow (or disallow) external text conversion filters to be run
        when comparing binary files. See <xref linkend="gitattributes(5)" /> for
        details. Because textconv filters are typically a one-way
        conversion, the resulting diff is suitable for human
        consumption, but cannot be applied. For this reason, textconv
        filters are enabled by default only for <xref linkend="git-diff(1)" /> and
        <xref linkend="git-log(1)" />, but not for <xref linkend="git-format-patch(1)" /> or
        diff plumbing commands.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ignore-submodules[=(none|untracked|dirty|all)]</emphasis>
</term>
<listitem>
<simpara>
        Ignore changes to submodules in the diff generation. <emphasis>all</emphasis> is the default.
        Using <emphasis>none</emphasis> will consider the submodule modified when it either contains
        untracked or modified files or its <emphasis>HEAD</emphasis> differs from the commit recorded
        in the superproject and can be used to override any settings of the
        <emphasis>ignore</emphasis> option in <xref linkend="git-config(1)" /> or <xref linkend="gitmodules(5)" />. When
        <emphasis>untracked</emphasis> is used submodules are not considered dirty when they only
        contain untracked content (but they are still scanned for modified
        content). Using <emphasis>dirty</emphasis> ignores all changes to the work tree of submodules,
        only changes to the commits stored in the superproject are shown (this was
        the behavior until 1.7.0). Using <emphasis>all</emphasis> hides all changes to submodules.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--src-prefix=&lt;prefix&gt;</emphasis>
</term>
<listitem>
<simpara>
        Show the given source <emphasis>&lt;prefix&gt;</emphasis> instead of "a/".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--dst-prefix=&lt;prefix&gt;</emphasis>
</term>
<listitem>
<simpara>
        Show the given destination <emphasis>&lt;prefix&gt;</emphasis> instead of "b/".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--no-prefix</emphasis>
</term>
<listitem>
<simpara>
        Do not show any source or destination prefix.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--default-prefix</emphasis>
</term>
<listitem>
<simpara>
        Use the default source and destination prefixes ("a/" and "b/").
        This overrides configuration variables such as <emphasis>diff.noprefix</emphasis>,
        <emphasis>diff.srcPrefix</emphasis>, <emphasis>diff.dstPrefix</emphasis>, and <emphasis>diff.mnemonicPrefix</emphasis>
        (see <xref linkend="git-config(1)" />).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--line-prefix=&lt;prefix&gt;</emphasis>
</term>
<listitem>
<simpara>
        Prepend an additional <emphasis>&lt;prefix&gt;</emphasis> to every line of output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>--ita-invisible-in-index</emphasis>
</term>
<listitem>
<simpara>
        By default entries added by <emphasis>git add -N</emphasis> appear as an existing
        empty file in <emphasis>git diff</emphasis> and a new file in <emphasis>git diff --cached</emphasis>.
        This option makes the entry appear as a new file in <emphasis>git diff</emphasis>
        and non-existent in <emphasis>git diff --cached</emphasis>. This option could be
        reverted with <emphasis>--ita-visible-in-index</emphasis>. Both options are
        experimental and could be removed in future.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>For more detailed explanation on these common options, see also
<xref linkend="gitdiffcore(7)" />.</simpara>
</simplesect>
<simplesect id="git-diff-pairs(1)_generate_patch_text_with_p">
<title>Generating patch text with -p</title>
<simpara>Running
<xref linkend="git-diff(1)" />,
<xref linkend="git-log(1)" />,
<xref linkend="git-show(1)" />,
<xref linkend="git-diff-index(1)" />,
<xref linkend="git-diff-tree(1)" />, or
<xref linkend="git-diff-files(1)" />
with the <emphasis>-p</emphasis> option produces patch text.
You can customize the creation of patch text via the
<emphasis>GIT_EXTERNAL_DIFF</emphasis> and the <emphasis>GIT_DIFF_OPTS</emphasis> environment variables
(see <xref linkend="git(1)" />), and the <emphasis>diff</emphasis> attribute (see <xref linkend="gitattributes(5)" />).</simpara>
<simpara>What the <emphasis>-p</emphasis> option produces is slightly different from the traditional
diff format:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
It is preceded by a "git diff" header that looks like this:
</simpara>
<literallayout class="monospaced">diff --git a/file1 b/file2</literallayout>
<simpara>The <emphasis>a/</emphasis> and <emphasis>b/</emphasis> filenames are the same unless rename/copy is
involved.  Especially, even for a creation or a deletion,
<emphasis>/dev/null</emphasis> is <emphasis>not</emphasis> used in place of the <emphasis>a/</emphasis> or <emphasis>b/</emphasis> filenames.</simpara>
<simpara>When a rename/copy is involved, <emphasis>file1</emphasis> and <emphasis>file2</emphasis> show the
name of the source file of the rename/copy and the name of
the file that the rename/copy produces, respectively.</simpara>
</listitem>
<listitem>
<simpara>
It is followed by one or more extended header lines:
</simpara>
<blockquote>
<literallayout><code>old</code> <code>mode</code> <emphasis>&lt;mode&gt;</emphasis>
<code>new</code> <code>mode</code> <emphasis>&lt;mode&gt;</emphasis>
<code>deleted</code> <code>file</code> <code>mode</code> <emphasis>&lt;mode&gt;</emphasis>
<code>new</code> <code>file</code> <code>mode</code> <emphasis>&lt;mode&gt;</emphasis>
<code>copy</code> <code>from</code> <emphasis>&lt;path&gt;</emphasis>
<code>copy</code> <code>to</code> <emphasis>&lt;path&gt;</emphasis>
<code>rename</code> <code>from</code> <emphasis>&lt;path&gt;</emphasis>
<code>rename</code> <code>to</code> <emphasis>&lt;path&gt;</emphasis>
<code>similarity</code> <code>index</code> <emphasis>&lt;number&gt;</emphasis>
<code>dissimilarity</code> <code>index</code> <emphasis>&lt;number&gt;</emphasis>
<code>index</code> <emphasis>&lt;hash&gt;</emphasis><code>..</code><emphasis>&lt;hash&gt;</emphasis> <emphasis>&lt;mode&gt;</emphasis></literallayout>
</blockquote>
<simpara>File modes <emphasis>&lt;mode&gt;</emphasis> are printed as 6-digit octal numbers including the file type
and file permission bits.</simpara>
<simpara>Path names in extended headers do not include the <emphasis>a/</emphasis> and <emphasis>b/</emphasis> prefixes.</simpara>
<simpara>The similarity index is the percentage of unchanged lines, and
the dissimilarity index is the percentage of changed lines.  It
is a rounded down integer, followed by a percent sign.  The
similarity index value of 100% is thus reserved for two equal
files, while 100% dissimilarity means that no line from the old
file made it into the new one.</simpara>
<simpara>The index line includes the blob object names before and after the change.
The <emphasis>&lt;mode&gt;</emphasis> is included if the file mode does not change; otherwise,
separate lines indicate the old and the new mode.</simpara>
</listitem>
<listitem>
<simpara>
Pathnames with "unusual" characters are quoted as explained for
    the configuration variable <emphasis>core.quotePath</emphasis> (see
    <xref linkend="git-config(1)" />).
</simpara>
</listitem>
<listitem>
<simpara>
All the <emphasis>file1</emphasis> files in the output refer to files before the
    commit, and all the <emphasis>file2</emphasis> files refer to files after the commit.
    It is incorrect to apply each change to each file sequentially.  For
    example, this patch will swap a and b:
</simpara>
<literallayout class="monospaced">diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a</literallayout>
</listitem>
<listitem>
<simpara>
Hunk headers mention the name of the function to which the hunk
    applies.  See "Defining a custom hunk-header" in
    <xref linkend="gitattributes(5)" /> for details of how to tailor this to
    specific languages.
</simpara>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="git-diff-pairs(1)__combined_diff_format">
<title>Combined diff format</title>
<simpara>Any diff-generating command can take the <emphasis>-c</emphasis> or <emphasis>--cc</emphasis> option to
produce a <emphasis>combined diff</emphasis> when showing a merge. This is the default
format when showing merges with <xref linkend="git-diff(1)" /> or
<xref linkend="git-show(1)" />. Note also that you can give suitable
<emphasis>--diff-merges</emphasis> option to any of these commands to force generation of
diffs in a specific format.</simpara>
<simpara>A "combined diff" format looks like this:</simpara>
<screen>diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@ -98,20 -98,12 +98,20 @@@
        return (a_date &gt; b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  }

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) &lt; 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) {
                initialized = 1;
                for_each_ref(get_name);</screen>
<orderedlist numeration="arabic">
<listitem>
<simpara>
It is preceded by a "git diff" header, that looks like
     this (when the <emphasis>-c</emphasis> option is used):
</simpara>
<literallayout class="monospaced">diff --combined file</literallayout>
<simpara>or like this (when the <emphasis>--cc</emphasis> option is used):</simpara>
<literallayout class="monospaced">diff --cc file</literallayout>
</listitem>
<listitem>
<simpara>
It is followed by one or more extended header lines
     (this example shows a merge with two parents):
</simpara>
<blockquote>
<literallayout><code>index</code> <emphasis>&lt;hash&gt;</emphasis><code>,</code><emphasis>&lt;hash&gt;</emphasis><code>..</code><emphasis>&lt;hash&gt;</emphasis>
<code>mode</code> <emphasis>&lt;mode&gt;</emphasis><code>,</code><emphasis>&lt;mode&gt;</emphasis><emphasis>..</emphasis><emphasis>&lt;mode&gt;</emphasis>
<code>new</code> <code>file</code> <code>mode</code> <emphasis>&lt;mode&gt;</emphasis>
<code>deleted</code> <code>file</code> <code>mode</code> <emphasis>&lt;mode&gt;</emphasis><code>,</code><emphasis>&lt;mode&gt;</emphasis></literallayout>
</blockquote>
<simpara>The <emphasis>mode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;</emphasis> line appears only if at least one of
the &lt;mode&gt; is different from the rest. Extended headers with
information about detected content movement (renames and
copying detection) are designed to work with the diff of two
<emphasis>&lt;tree-ish&gt;</emphasis> and are not used by combined diff format.</simpara>
</listitem>
<listitem>
<simpara>
It is followed by a two-line from-file/to-file header:
</simpara>
<literallayout class="monospaced">--- a/file
+++ b/file</literallayout>
<simpara>Similar to the two-line header for the traditional <emphasis>unified</emphasis> diff
format, <emphasis>/dev/null</emphasis> is used to signal created or deleted
files.</simpara>
<simpara>However, if the --combined-all-paths option is provided, instead of a
two-line from-file/to-file, you get an N+1 line from-file/to-file header,
where N is the number of parents in the merge commit:</simpara>
<literallayout class="monospaced">--- a/file
--- a/file
--- a/file
+++ b/file</literallayout>
<simpara>This extended format can be useful if rename or copy detection is
active, to allow you to see the original name of the file in different
parents.</simpara>
</listitem>
<listitem>
<simpara>
Chunk header format is modified to prevent people from
     accidentally feeding it to <emphasis>patch -p1</emphasis>. Combined diff format
     was created for review of merge commit changes, and was not
     meant to be applied. The change is similar to the change in the
     extended <emphasis>index</emphasis> header:
</simpara>
<literallayout class="monospaced">@@@ &lt;from-file-range&gt; &lt;from-file-range&gt; &lt;to-file-range&gt; @@@</literallayout>
<simpara>There are (number of parents + 1) <emphasis>@</emphasis> characters in the chunk
header for combined diff format.</simpara>
</listitem>
</orderedlist>
<simpara>Unlike the traditional <emphasis>unified</emphasis> diff format, which shows two
files A and B with a single column that has <emphasis>-</emphasis> (minus --
appears in A but removed in B), <emphasis>+</emphasis> (plus -- missing in A but
added to B), or <emphasis>" "</emphasis> (space -- unchanged) prefix, this format
compares two or more files file1, file2,&#8230; with one file X, and
shows how X differs from each of fileN.  One column for each of
fileN is prepended to the output line to note how X's line is
different from it.</simpara>
<simpara>A <emphasis>-</emphasis> character in the column N means that the line appears in
fileN but it does not appear in the result.  A <emphasis>+</emphasis> character
in the column N means that the line appears in the result,
and fileN does not have that line (in other words, the line was
added, from the point of view of that parent).</simpara>
<simpara>In the above example output, the function signature was changed
from both files (hence two <emphasis>-</emphasis> removals from both file1 and
file2, plus <emphasis>++</emphasis> to mean one line that was added does not appear
in either file1 or file2).  Also, eight other lines are the same
from file1 but do not appear in file2 (hence prefixed with <emphasis>+</emphasis>).</simpara>
<simpara>When shown by <emphasis>git diff-tree -c</emphasis>, it compares the parents of a
merge commit with the merge result (i.e. file1..fileN are the
parents).  When shown by <emphasis>git diff-files -c</emphasis>, it compares the
two unresolved merge parents with the working tree file
(i.e. file1 is stage 2 aka "our version", file2 is stage 3 aka
"their version").</simpara>
</simplesect>
<simplesect id="git-diff-pairs(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
