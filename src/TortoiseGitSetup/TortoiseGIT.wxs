<?xml version="1.0" encoding="utf-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
	<?include Includes.wxi?>
	<Product UpgradeCode="$(var.UpgradeGuid)" Name="$(var.ProductName) $(var.VersionNumberUserVisible) $(var.PlatformUserVisible)" Id="*" Version="$(var.VersionNumberInternal)" Manufacturer="TortoiseGit" Language="1033" Codepage="1252">

		<Package Id="*" Keywords="$(var.PackageKeywords)" Description="$(var.PackageDescription)" Comments="$(var.TortoiseGitOrg)" Manufacturer="$(var.PackageManufacturer)" InstallerVersion="405" Platform="$(var.PackagePlatforms)" Languages="1033" Compressed="yes" SummaryCodepage="1252" InstallPrivileges="elevated" />
		<Upgrade Id="$(var.UpgradeGuid)">
			<!-- upgrade is flagged if current-install is newer than or equal to package -->
			<UpgradeVersion Property="NEWERVERSIONDETECTED" Minimum="$(var.VersionNumberInternal)" OnlyDetect="yes" />

			<UpgradeVersion Property="CLOSETGITCACHE" Maximum="2.2.2.0" IncludeMaximum="no" OnlyDetect="yes" />

			<!-- flag is set if the install will trigger an upgrade of an existing install -->
			<UpgradeVersion Property="PREVIOUSVERSIONSINSTALLED" Maximum="$(var.VersionNumberInternal)" IncludeMaximum="no" MigrateFeatures="yes" />
		</Upgrade>

		<MajorUpgrade AllowDowngrades="yes" Schedule="afterInstallValidate" />
		<Media Id="1" Cabinet="TGIT.cab" EmbedCab="yes" CompressionLevel="high" />

		<!-- Specify the REINSTALLMODE property to allow proper installation of downgraded components. -->
		<Property Id="REINSTALLMODE" Value="dmus" />

		<Icon Id="TGITIcon" SourceFile="..\Resources\Tortoise.ico" />

		<Property Id="SSHTOOL" Secure="yes">Plink</Property>
		<Property Id="OLDSSH" Secure="yes">
			<RegistrySearch Id="oldSSHSetting" Root="HKCU" Key="Software\[Manufacturer]" Name="SSH" Type="raw" />
		</Property>

		<!-- Launch Condition related properties ................................................................................. -->
		<Property Id="SHOWCHANGELOG" Secure="yes">1</Property>
		<Property Id="FIRSTSTARTWIZARD" Secure="yes">1</Property>
		<Property Id="ALLUSERS" Secure="yes">1</Property>

		<?if $(var.Platform) = "x86" ?>
		<Condition Message="You are attempting to run the 32-bit installer on a 64-bit version of Windows. Please install the 64-bit version of TortoiseGit instead.">NOT Msix64</Condition>
		<?endif ?>

		<?if $(var.Platform) = "x64" ?>
		<Upgrade Id="$(var.UpgradeGuid32)">
			<UpgradeVersion Minimum="0.0.0.0" OnlyDetect="yes" Property="WIN32TGITFOUND" />
		</Upgrade>
		<Condition Message="Please uninstall all 32-bit versions of TortoiseGit before installing [ProductName].">NOT WIN32TGITFOUND</Condition>
		<?endif ?>

		<Property Id="WIN10FOUND">
			<DirectorySearch Id="searchSystem10" Path="[SystemFolder]" Depth="0">
				<FileSearch Id="searchFile10" Name="shell32.dll" MinVersion="6.3.10000.0"/>
			</DirectorySearch>
		</Property>
		<Condition Message="[ProductName] requires Windows 10 or later."><![CDATA[(NOT WIN10FOUND="")]]></Condition>

		<Property Id="VC_REDIST_INSTALLED">
			<RegistrySearch Id="VCRedistInstalled" Root="HKLM" Key="SOFTWARE\Microsoft\VisualStudio\14.0\VC\Runtimes\$(var.PackagePlatforms)" Name="Installed" Type="raw" Win64="$(var.Win64YesNo)" />
		</Property>
		<Condition Message="The latest version of &quot;Microsoft Visual C++ 2015-2022 Redistributable&quot; is required. See https://tortoisegit.org/support/faq/#prerequisites">VC_REDIST_INSTALLED=&quot;#1&quot;</Condition>

		<!-- Show/Don't-show changelog related properties and custom actions ..................................................... -->
		<Property Id="TEXTEDITOR" Secure="yes">
			<DirectorySearch Id="FileSearchTextEditorExe" Path="[WindowsFolder]">
				<FileSearch Id="FileSearchTextEditorExe" Name="notepad.exe" />
			</DirectorySearch>
		</Property>
		<CustomAction Id="Set_ShowChangelog" Property="SHOWCHANGELOG" Value="" Return="check" />
		<CustomAction Id="ShowChangelogAction" Property="TEXTEDITOR" ExeCommand="[INSTALLDIR]changelog.txt" Return="asyncNoWait" />

		<CustomAction Id="Set_FirstStartWizard" Property="FIRSTSTARTWIZARD" Value="" Return="check" />
		<CustomAction Id="FirstStartWizardAction" Directory="D__Bin" ExeCommand="&quot;[INSTALLDIR]bin\TortoiseGitProc.exe&quot; /command:firststart" Return="asyncNoWait" />

		<CustomAction Id="ShowDonatePage" BinaryKey="CustomActionsDLL" DllEntry="OpenDonatePage" />
		<CustomAction Id="RemoveAllUserSettings" BinaryKey="CustomActionsDLL" DllEntry="RemoveAllUserSettings" />

		<CustomAction Id="KillCache" BinaryKey="CustomActionsDLL" DllEntry="TerminateCache" />
		<Binary Id="CustomActionsDLL" SourceFile="..\..\bin\$(var.ReleasePath)\bin\CustomActions.dll" />
		<CustomAction Id="RestartExplorer" BinaryKey="CustomActionsDLL" DllEntry="RestartExplorer" />
		<?if ($(var.Platform) = "x64" OR $(var.Platform) = "ARM64") AND $(var.BuildWindows11ContextmenuExtension) = "1" ?>
		<!-- only needed for Windows 11; there is no x86 version -->
		<Binary Id="CustomActionsDLL11" SourceFile="..\..\bin\$(var.ReleasePath)\bin\CustomActions11.dll" />
		<CustomAction Id="RegisterSparsePackage" Impersonate="yes" BinaryKey="CustomActionsDLL11" DllEntry="RegisterSparsePackage"/>
		<CustomAction Id="UnregisterSparsePackage" Impersonate="yes" BinaryKey="CustomActionsDLL11" DllEntry="UnregisterSparsePackage"/>
		<?endif ?>

		<!-- Unsafe-check properties and custom actions .......................................................................... -->
		<Property Id="VSDUIANDADVERTISED" Secure="yes">This advertised application will not be installed because it might be unsafe. Contact your administrator to change the installation user interface option of the package to basic.</Property>
		<CustomAction Id="ERRCA_UIANDADVERTISED" Error="[VSDUIANDADVERTISED]" />

		<!-- Figure out where a previous installation was, if any ................................................................ -->
		<?if $(var.Platform) = "x64" OR $(var.Platform) = "ARM64" ?>
		<CustomAction Id="DefaultTargetDir" Property="INSTALLDIR" Value="[ProgramFiles64Folder]$(var.ProductName)" Execute="immediate" />
		<Property Id="INSTALLDIR" Secure="yes">
			<RegistrySearch Id="PreviousInstallLocationRegistrySearch" Root="HKLM" Key="Software\[Manufacturer]" Name="Directory" Type="raw" Win64="$(var.Win64YesNo)" />
		</Property>
		<?else ?>
		<CustomAction Id="DefaultTargetDir" Property="INSTALLDIR" Value="[ProgramFilesFolder]$(var.ProductName)" Execute="immediate" />
		<Property Id="INSTALLDIR" Secure="yes">
			<RegistrySearch Id="PreviousInstallLocationRegistrySearch" Root="HKLM" Key="Software\[Manufacturer]" Name="Directory" Type="raw" Win64="$(var.Win64YesNo)" />
		</Property>
		<?endif ?>

		<Property Id="LANGUAGEFOLDER" Secure="yes">
			<RegistrySearch Key="SOFTWARE\[Manufacturer]" Root="HKLM" Type="raw" Id="LANGUAGEFOLDER_REGSEARCH" Name="LanguageFolderPath" Win64="$(var.Win64YesNo)"/>
		</Property>

		<?if ($(var.Platform) = "x64" OR $(var.Platform) = "ARM64") AND $(var.BuildWindows11ContextmenuExtension) = "1" ?>
		<!-- only needed for Windows 11; there is no x86 version -->
		<!-- msiexec does not have a manifest, so it always reports the version of system dlls as
			 for Win7 (6.3.x.x). So we check for 6.3 but use the build number to actually check
			 for Win11 -->
		<Property Id="WIN11FOUND" Secure="yes">
			<DirectorySearch Id="searchSystem" Path="[System64Folder]" AssignToProperty="yes">
				<FileSearch Id="searchFile" Name="shell32.dll" MinVersion="6.3.21999.0"/>
			</DirectorySearch>
		</Property>

		<!-- properties for the custom actions to (un)register the sparse package -->
		<Property Id="SPARSEPACKAGEFILE" Value="package.msix"  Secure="yes"/>
		<Property Id="SPARSEPACKAGENAME" Value="0BF99681-825C-4B2A-A14F-2AC01DB9B70E"  Secure="yes"/>
		<?endif ?>

		<?include FeaturesFragment.wxi?>
		<?include StructureFragment.wxi?>
		<?include UIFragment.wxi?>
		<?include ProtocolSupport.wxi?>
		<?include TortoiseUDiff.wxi?>
		<?include HTMLHelpfiles.wxi?>

		<!--
		<FragmentRef Id="StructureFragment" />
		<FragmentRef Id="FeaturesFragment" />
		<FragmentRef Id="UIFragment" />
		-->

		<!-- Execute Sequencing ................................................................................................. -->
		<AdminExecuteSequence />
		<InstallExecuteSequence>
			<!-- AppSearch must be done before RemoveExistingProducts and before FindRelatedProducts -->
			<AppSearch Sequence="1" />
			<LaunchConditions After="AppSearch" />
			<Custom Action="DefaultTargetDir" After="LaunchConditions">INSTALLDIR=""</Custom>
			<Custom Action="KillCache" After="ValidateProductID">Installed OR REMOVE OR CLOSETGITCACHE</Custom>
			<?if ($(var.Platform) = "x64" OR $(var.Platform) = "ARM64") AND $(var.BuildWindows11ContextmenuExtension) = "1" ?>
			<!-- only needed for Windows 11; there is no x86 version -->
			<Custom Action="RegisterSparsePackage" After="InstallFinalize">NOT (REMOVE~="ALL") AND (NOT WIN11FOUND="")</Custom>
			<Custom Action="UnregisterSparsePackage" Before="RemoveFiles">(REMOVE~="ALL") AND (NOT WIN11FOUND="")</Custom>
			<?endif ?>
		</InstallExecuteSequence>

		<!-- UI Sequencing ...................................................................................................... -->
		<AdminUISequence>
			<Show Dialog="FatalErrorDlg" OnExit="error" />
			<Show Dialog="UserExit" OnExit="cancel" />
			<Show Dialog="ExitDlg" OnExit="success" />
			<Show Dialog="PrepareDlg" Before="CostInitialize"><![CDATA[]]></Show>
			<Show Dialog="AdminWelcomeDlg" After="CostFinalize" />
			<Show Dialog="ProgressDlg" After="AdminWelcomeDlg" />
		</AdminUISequence>

		<InstallUISequence>
			<Show Dialog="FatalErrorDlg" OnExit="error" />
			<Show Dialog="UserExit" OnExit="cancel" />
			<Show Dialog="ExitDlg" OnExit="success" />
			<Show Dialog="PrepareDlg" After="LaunchConditions" />
			<Show Dialog="WelcomeDlg" After="MigrateFeatureStates"><![CDATA[NOT Installed]]></Show>
			<Show Dialog="ResumeDlg" After="WelcomeDlg"><![CDATA[Installed AND (RESUME OR Preselected)]]></Show>
			<Show Dialog="PatchWelcomeDlg" After="ResumeDlg"><![CDATA[Installed AND NOT RESUME AND PATCH]]></Show>
			<Show Dialog="MaintenanceWelcomeDlg" After="ResumeDlg"><![CDATA[Installed AND NOT RESUME AND NOT Preselected and NOT PATCH]]></Show>
			<Show Dialog="ProgressDlg" After="MaintenanceWelcomeDlg" />

			<FindRelatedProducts Suppress="no">1</FindRelatedProducts>

			<Custom Action="DefaultTargetDir" After="PrepareDlg">INSTALLDIR=""</Custom>
			<Custom Action="ERRCA_UIANDADVERTISED" Before="AppSearch">ProductState=1</Custom>
			<Custom Action="Set_ShowChangelog" After="LaunchConditions">NOT (NEWERVERSIONDETECTED OR PREVIOUSVERSIONSINSTALLED OR PATCH)</Custom>
			<Custom Action="Set_FirstStartWizard" After="LaunchConditions">(NEWERVERSIONDETECTED OR PREVIOUSVERSIONSINSTALLED OR PATCH)</Custom>
		</InstallUISequence>
	</Product>
</Wix>
