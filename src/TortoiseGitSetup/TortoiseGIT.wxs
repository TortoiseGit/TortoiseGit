<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
	<?include Includes.wxi?>
	<Package UpgradeCode="$(var.UpgradeGuid)" Name="$(var.ProductName) $(var.VersionNumberUserVisible) $(var.PlatformUserVisible)" Version="$(var.VersionNumberInternal)" Manufacturer="TortoiseGit" Language="1033" Scope="perMachine">
		<SummaryInformation Keywords="$(var.PackageKeywords)" Description="$(var.PackageDescription)" Manufacturer="$(var.PackageManufacturer)" />
		<Upgrade Id="$(var.UpgradeGuid)">
			<!-- upgrade is flagged if current-install is newer than or equal to package -->
			<UpgradeVersion Property="NEWERVERSIONDETECTED" Minimum="$(var.VersionNumberInternal)" OnlyDetect="yes" />

			<UpgradeVersion Property="CLOSETGITCACHE" Maximum="2.2.2.0" IncludeMaximum="no" OnlyDetect="yes" />

			<!-- flag is set if the install will trigger an upgrade of an existing install -->
			<UpgradeVersion Property="PREVIOUSVERSIONSINSTALLED" Maximum="$(var.VersionNumberInternal)" IncludeMaximum="no" MigrateFeatures="yes" />
		</Upgrade>

		<MajorUpgrade AllowDowngrades="yes" Schedule="afterInstallValidate" />
		<Media Id="1" Cabinet="TGIT.cab" EmbedCab="yes" CompressionLevel="high" />

		<!-- Specify the REINSTALLMODE property to allow proper installation of downgraded components. -->
		<Property Id="REINSTALLMODE" Value="dmus" />

		<Icon Id="TGITIcon" SourceFile="..\Resources\Tortoise.ico" />

		<Property Id="SSHTOOL" Secure="yes" Value="Plink" />
		<Property Id="OLDSSH" Secure="yes">
			<RegistrySearch Id="oldSSHSetting" Root="HKCU" Key="Software\[Manufacturer]" Name="SSH" Type="raw" />
		</Property>

		<!-- Launch Condition related properties ................................................................................. -->
		<Property Id="SHOWCHANGELOG" Secure="yes" Value="1" />
		<Property Id="FIRSTSTARTWIZARD" Secure="yes" Value="1" />

		<Launch Condition="(VersionNT &gt;= 601)" Message="[ProductName] requires Windows 7 or later." />

		<?if $(var.Platform) = "x86" ?>
		<Launch Condition="NOT Msix64" Message="You are attempting to run the 32-bit installer on a 64-bit version of Windows. Please install the 64-bit version of TortoiseGit instead." />
		<?endif?>

		<?if $(var.Platform) = "x64" ?>
		<Upgrade Id="$(var.UpgradeGuid32)">
			<UpgradeVersion Minimum="0.0.0.0" OnlyDetect="yes" Property="WIN32TGITFOUND" />
		</Upgrade>
		<Launch Condition="NOT WIN32TGITFOUND" Message="Please uninstall all 32-bit versions of TortoiseGit before installing [ProductName]." />
		<?endif?>

		<!-- test for the universal CRT -->
		<Property Id="UCRTVERSION" Secure="yes">
			<?if $(var.Platform) = "x64" ?>
			<DirectorySearch Id="SystemFolder64V" Path="[System64Folder]">
				<FileSearch Name="ucrtbase.dll" MinVersion="0.0.0.0" />
			</DirectorySearch>
			<?else?>
			<DirectorySearch Id="SystemFolder32V" Path="[SystemFolder]">
				<FileSearch Name="ucrtbase.dll" MinVersion="0.0.0.0" />
			</DirectorySearch>
			<?endif?>
		</Property>
		<Launch Condition="UCRTVERSION" Message="Please install the Universal CRT first. You can install it via Windows Update (KB2999226) or you can manually download it from Microsoft by doing a search for 'vcredist 2019 download'" />

		<!-- Show/Don't-show changelog related properties and custom actions ..................................................... -->
		<Property Id="TEXTEDITOR" Secure="yes">
			<DirectorySearch Id="FileSearchTextEditorExe" Path="[WindowsFolder]">
				<FileSearch Id="FileSearchTextEditorExe" Name="notepad.exe" />
			</DirectorySearch>
		</Property>
		<CustomAction Id="Set_ShowChangelog" Property="SHOWCHANGELOG" Value="" Return="check" />
		<CustomAction Id="ShowChangelogAction" Property="TEXTEDITOR" ExeCommand="[INSTALLDIR]changelog.txt" Return="asyncNoWait" />

		<CustomAction Id="Set_FirstStartWizard" Property="FIRSTSTARTWIZARD" Value="" Return="check" />
		<CustomAction Id="FirstStartWizardAction" Directory="D__Bin" ExeCommand="&quot;[INSTALLDIR]bin\TortoiseGitProc.exe&quot; /command:firststart" Return="asyncNoWait" />

		<CustomAction Id="ShowDonatePage" DllEntry="OpenDonatePage" BinaryRef="CustomActionsDLL" />
		<CustomAction Id="RemoveAllUserSettings" DllEntry="RemoveAllUserSettings" BinaryRef="CustomActionsDLL" />

		<CustomAction Id="KillCache" DllEntry="TerminateCache" BinaryRef="CustomActionsDLL" />
		<Binary Id="CustomActionsDLL" SourceFile="..\..\bin\$(var.ReleasePath)\bin\CustomActions.dll" />
		<CustomAction Id="RestartExplorer" DllEntry="RestartExplorer" BinaryRef="CustomActionsDLL" />
		<?if ($(var.Platform) = "x64" OR $(var.Platform) = "ARM64") AND $(var.BuildWindows11ContextmenuExtension) = "1" ?>
		<!-- only needed for Windows 11; there is no x86 version -->
		<Binary Id="CustomActionsDLL11" SourceFile="..\..\bin\$(var.ReleasePath)\bin\CustomActions11.dll" />
		<CustomAction Id="RegisterSparsePackage" Impersonate="yes" DllEntry="RegisterSparsePackage" BinaryRef="CustomActionsDLL11" />
		<CustomAction Id="UnregisterSparsePackage" Impersonate="yes" DllEntry="UnregisterSparsePackage" BinaryRef="CustomActionsDLL11" />
		<?endif?>

		<!-- Unsafe-check properties and custom actions .......................................................................... -->
		<Property Id="VSDUIANDADVERTISED" Secure="yes" Value="This advertised application will not be installed because it might be unsafe. Contact your administrator to change the installation user interface option of the package to basic." />
		<CustomAction Id="ERRCA_UIANDADVERTISED" Error="[VSDUIANDADVERTISED]" />

		<!-- Figure out where a previous installation was, if any ................................................................ -->
		<?if $(var.Platform) = "x64" OR $(var.Platform) = "ARM64" ?>
		<CustomAction Id="DefaultTargetDir" Property="INSTALLDIR" Value="[ProgramFiles64Folder]$(var.ProductName)" Execute="immediate" />
		<Property Id="INSTALLDIR" Secure="yes">
			<RegistrySearch Id="PreviousInstallLocationRegistrySearch" Root="HKLM" Key="Software\[Manufacturer]" Name="Directory" Type="raw" />
		</Property>
		<?else?>
		<CustomAction Id="DefaultTargetDir" Property="INSTALLDIR" Value="[ProgramFilesFolder]$(var.ProductName)" Execute="immediate" />
		<Property Id="INSTALLDIR" Secure="yes">
			<RegistrySearch Id="PreviousInstallLocationRegistrySearch" Root="HKLM" Key="Software\[Manufacturer]" Name="Directory" Type="raw" />
		</Property>
		<?endif?>

		<Property Id="LANGUAGEFOLDER" Secure="yes">
			<RegistrySearch Key="SOFTWARE\[Manufacturer]" Root="HKLM" Type="raw" Id="LANGUAGEFOLDER_REGSEARCH" Name="LanguageFolderPath" />
		</Property>

		<?if ($(var.Platform) = "x64" OR $(var.Platform) = "ARM64") AND $(var.BuildWindows11ContextmenuExtension) = "1" ?>
		<!-- only needed for Windows 11; there is no x86 version -->
		<!-- msiexec does not have a manifest, so it always reports the version of system dlls as
			 for Win7 (6.3.x.x). So we check for 6.3 but use the build number to actually check
			 for Win11 -->
		<Property Id="WIN11FOUND" Secure="yes">
			<DirectorySearch Id="searchSystem" Path="[System64Folder]" AssignToProperty="yes">
				<FileSearch Id="searchFile" Name="shell32.dll" MinVersion="6.3.21999.0" />
			</DirectorySearch>
		</Property>

		<!-- properties for the custom actions to (un)register the sparse package -->
		<Property Id="SPARSEPACKAGEFILE" Value="package.msix" Secure="yes" />
		<Property Id="SPARSEPACKAGENAME" Value="0BF99681-825C-4B2A-A14F-2AC01DB9B70E" Secure="yes" />
		<?endif?>

		<?include FeaturesFragment.wxi?>
		<?include StructureFragment.wxi?>
		<?include UIFragment.wxi?>
		<?if $(var.Platform) != "ARM64" ?>
		<?include Win7LibraryAndExplorerToolbarActions.wxi?>
		<?endif?>
		<?include ProtocolSupport.wxi?>
		<?include TortoiseUDiff.wxi?>

		<!--
		<FragmentRef Id="StructureFragment" />
		<FragmentRef Id="FeaturesFragment" />
		<FragmentRef Id="UIFragment" />
		-->

		<!-- Execute Sequencing ................................................................................................. -->
		<AdminExecuteSequence />
		<InstallExecuteSequence>
			<!-- AppSearch must be done before RemoveExistingProducts and before FindRelatedProducts -->
			<AppSearch Sequence="1" />
			<LaunchConditions After="AppSearch" />
			<Custom Action="DefaultTargetDir" After="LaunchConditions" Condition="INSTALLDIR=&quot;&quot;" />
			<Custom Action="KillCache" After="ValidateProductID" Condition="Installed OR REMOVE OR CLOSETGITCACHE" />
			<?if ($(var.Platform) = "x64" OR $(var.Platform) = "ARM64") AND $(var.BuildWindows11ContextmenuExtension) = "1" ?>
			<!-- only needed for Windows 11; there is no x86 version -->
			<Custom Action="RegisterSparsePackage" After="InstallFinalize" Condition="NOT (REMOVE~=&quot;ALL&quot;) AND (NOT WIN11FOUND=&quot;&quot;)" />
			<Custom Action="UnregisterSparsePackage" Before="RemoveFiles" Condition="(REMOVE~=&quot;ALL&quot;) AND (NOT WIN11FOUND=&quot;&quot;)" />
			<?endif?>
		</InstallExecuteSequence>

		<!-- UI Sequencing ...................................................................................................... -->
		<AdminUISequence>
			<Show Dialog="FatalErrorDlg" OnExit="error" />
			<Show Dialog="UserExit" OnExit="cancel" />
			<Show Dialog="ExitDlg" OnExit="success" />
			<Show Dialog="PrepareDlg" Before="CostInitialize" Condition=" " />
			<Show Dialog="AdminWelcomeDlg" After="CostFinalize" />
			<Show Dialog="ProgressDlg" After="AdminWelcomeDlg" />
		</AdminUISequence>

		<InstallUISequence>
			<Show Dialog="FatalErrorDlg" OnExit="error" />
			<Show Dialog="UserExit" OnExit="cancel" />
			<Show Dialog="ExitDlg" OnExit="success" />
			<Show Dialog="PrepareDlg" After="LaunchConditions" />
			<Show Dialog="WelcomeDlg" After="MigrateFeatureStates" Condition="NOT Installed" />
			<Show Dialog="ResumeDlg" After="WelcomeDlg" Condition="Installed AND (RESUME OR Preselected)" />
			<Show Dialog="PatchWelcomeDlg" After="ResumeDlg" Condition="Installed AND NOT RESUME AND PATCH" />
			<Show Dialog="MaintenanceWelcomeDlg" After="ResumeDlg" Condition="Installed AND NOT RESUME AND NOT Preselected and NOT PATCH" />
			<Show Dialog="ProgressDlg" After="MaintenanceWelcomeDlg" />

			<FindRelatedProducts Suppress="no" Condition="1" />

			<Custom Action="DefaultTargetDir" After="PrepareDlg" Condition="INSTALLDIR=&quot;&quot;" />
			<Custom Action="ERRCA_UIANDADVERTISED" Before="AppSearch" Condition="ProductState=1" />
			<Custom Action="Set_ShowChangelog" After="LaunchConditions" Condition="NOT (NEWERVERSIONDETECTED OR PREVIOUSVERSIONSINSTALLED OR PATCH)" />
			<Custom Action="Set_FirstStartWizard" After="LaunchConditions" Condition="(NEWERVERSIONDETECTED OR PREVIOUSVERSIONSINSTALLED OR PATCH)" />
		</InstallUISequence>
	</Package>
</Wix>
