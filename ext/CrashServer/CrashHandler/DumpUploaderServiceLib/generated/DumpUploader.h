// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* DumpUploader.h
   Generated by wsdl2h 2.8.0 from http://localhost:59175/DumpUploader.asmx?WSDL and C:\CrashServer\Sources\ClientSide\DumpUploaderServiceLib\\typemap.dat
   2012-01-09 21:40:50 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on DumpUploader.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   https://www.crash-server.com/                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/

// This service uses SOAP 1.2 namespaces:
//gsoap SOAP-ENV schema namespace:  http://www.w3.org/2003/05/soap-envelope
//gsoap SOAP-ENC schema namespace:  http://www.w3.org/2003/05/soap-encoding

/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "https://www.crash-server.com/"
ns2 = "http://microsoft.com/wsdl/types/"

*/

#define SOAP_NAMESPACE_OF_ns1   "https://www.crash-server.com/"
//gsoap ns1   schema namespace: https://www.crash-server.com/
//gsoap ns1   schema elementForm:   qualified
//gsoap ns1   schema attributeForm: unqualified

#define SOAP_NAMESPACE_OF_ns2   "http://microsoft.com/wsdl/types/"
//gsoap ns2   schema namespace: http://microsoft.com/wsdl/types/
//gsoap ns2   schema elementForm:   qualified
//gsoap ns2   schema attributeForm: unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Built-in type "xs:base64Binary".
#import "xop.h"

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__ClientLib.
class ns1__ClientLib;

//  Forward declaration of class ns1__Application.
class ns1__Application;

//  Forward declaration of class ns1__Response.
class ns1__Response;

//  Forward declaration of class ns1__Solution.
class ns1__Solution;

//  Forward declaration of class _ns1__Hello.
class _ns1__Hello;

//  Forward declaration of class _ns1__HelloResponse.
class _ns1__HelloResponse;

//  Forward declaration of class _ns1__UploadMiniDump.
class _ns1__UploadMiniDump;

//  Forward declaration of class _ns1__UploadMiniDumpResponse.
class _ns1__UploadMiniDumpResponse;

//  Forward declaration of class _ns1__UploadAdditionalInfo.
class _ns1__UploadAdditionalInfo;

//  Forward declaration of class _ns1__UploadAdditionalInfoResponse.
class _ns1__UploadAdditionalInfoResponse;

//  Forward declaration of class _ns1__UploadSymbol.
class _ns1__UploadSymbol;

//  Forward declaration of class _ns1__UploadSymbolResponse.
class _ns1__UploadSymbolResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   https://www.crash-server.com/                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://microsoft.com/wsdl/types/                                         *
 *                                                                            *
\******************************************************************************/


/// "https://www.crash-server.com/":Architecture is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__Architecture' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__Architecture
{
    ns1__Architecture__x32, ///< xs:string value="x32"
    ns1__Architecture__x64, ///< xs:string value="x64"
};

/// "https://www.crash-server.com/":ResponseType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__ResponseType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__ResponseType
{
    ns1__ResponseType__HaveSolution,    ///< xs:string value="HaveSolution"
    ns1__ResponseType__NeedMiniDump,    ///< xs:string value="NeedMiniDump"
    ns1__ResponseType__NeedMoreInfo,    ///< xs:string value="NeedMoreInfo"
    ns1__ResponseType__Stop,    ///< xs:string value="Stop"
    ns1__ResponseType__Error,   ///< xs:string value="Error"
};

/// "https://www.crash-server.com/":SolutionType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__SolutionType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__SolutionType
{
    ns1__SolutionType__Url, ///< xs:string value="Url"
    ns1__SolutionType__Exe, ///< xs:string value="Exe"
};

/// "https://www.crash-server.com/":AdditionalInfoType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__AdditionalInfoType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__AdditionalInfoType
{
    ns1__AdditionalInfoType__None,  ///< xs:string value="None"
    ns1__AdditionalInfoType__FullDump,  ///< xs:string value="FullDump"
    ns1__AdditionalInfoType__Info,  ///< xs:string value="Info"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://microsoft.com/wsdl/types/                                         *
 *                                                                            *
\******************************************************************************/


/// "http://microsoft.com/wsdl/types/":guid is a simpleType restriction of xs:string.
/// Content pattern is "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}" (note: not automatically enforced)
typedef std::wstring ns2__guid "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   https://www.crash-server.com/                                            *
 *                                                                            *
\******************************************************************************/


/// "https://www.crash-server.com/":ClientLib is a complexType.
class ns1__ClientLib
{ public:
/// Element v1 of type xs:unsignedShort.
    unsigned short                       v1                             1;  ///< Required element.
/// Element v2 of type xs:unsignedShort.
    unsigned short                       v2                             1;  ///< Required element.
/// Element v3 of type xs:unsignedShort.
    unsigned short                       v3                             1;  ///< Required element.
/// Element v4 of type xs:unsignedShort.
    unsigned short                       v4                             1;  ///< Required element.
/// Element arch of type "https://www.crash-server.com/":Architecture.
    enum ns1__Architecture               arch                           1;  ///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "https://www.crash-server.com/":Application is a complexType.
class ns1__Application
{ public:
/// Element applicationGUID of type "http://microsoft.com/wsdl/types/":guid.
    ns2__guid                            applicationGUID                1;  ///< Required element.
/// Element v1 of type xs:unsignedShort.
    unsigned short                       v1                             1;  ///< Required element.
/// Element v2 of type xs:unsignedShort.
    unsigned short                       v2                             1;  ///< Required element.
/// Element v3 of type xs:unsignedShort.
    unsigned short                       v3                             1;  ///< Required element.
/// Element v4 of type xs:unsignedShort.
    unsigned short                       v4                             1;  ///< Required element.
/// Element hotfix of type xs:unsignedShort.
    unsigned short                       hotfix                         1;  ///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "https://www.crash-server.com/":Response is a complexType.
class ns1__Response
{ public:
/// Element type of type "https://www.crash-server.com/":ResponseType.
    enum ns1__ResponseType               type                           1;  ///< Required element.
/// Element error of type xs:string.
    std::wstring*                        error                          0;  ///< Optional element.
/// Element solution of type "https://www.crash-server.com/":Solution.
    ns1__Solution*                       solution                       0;  ///< Optional element.
/// Element clientID of type xs:string.
    std::wstring*                        clientID                       0;  ///< Optional element.
/// Element problemID of type xs:int.
    int                                  problemID                      1;  ///< Required element.
/// Element dumpGroupID of type xs:int.
    int                                  dumpGroupID                    1;  ///< Required element.
/// Element dumpID of type xs:int.
    int                                  dumpID                         1;  ///< Required element.
/// Element urlToProblem of type xs:string.
    std::wstring*                        urlToProblem                   0;  ///< Optional element.
/// Element infoType of type "https://www.crash-server.com/":AdditionalInfoType.
    enum ns1__AdditionalInfoType         infoType                       1;  ///< Required element.
/// Element infoModule of type xs:base64Binary.
    _xop__Include*                       infoModule                     0;  ///< Optional element.
/// Element infoModuleCfg of type xs:string.
    std::wstring*                        infoModuleCfg                  0;  ///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "https://www.crash-server.com/":Solution is a complexType.
class ns1__Solution
{ public:
/// Element askConfirmation of type xs:boolean.
    bool                                 askConfirmation                1;  ///< Required element.
/// Element type of type "https://www.crash-server.com/":SolutionType.
    enum ns1__SolutionType               type                           1;  ///< Required element.
/// Element url of type xs:string.
    std::wstring*                        url                            0;  ///< Optional element.
/// Element exe of type xs:base64Binary.
    _xop__Include*                       exe                            0;  ///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "https://www.crash-server.com/":Hello

/// "https://www.crash-server.com/":Hello is a complexType.
class _ns1__Hello
{ public:
/// Element client of type "https://www.crash-server.com/":ClientLib.
    ns1__ClientLib*                      client                         0;  ///< Optional element.
/// Element app of type "https://www.crash-server.com/":Application.
    ns1__Application*                    app                            0;  ///< Optional element.
/// Element mainModule of type xs:string.
    std::wstring*                        mainModule                     0;  ///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "https://www.crash-server.com/":HelloResponse

/// "https://www.crash-server.com/":HelloResponse is a complexType.
class _ns1__HelloResponse
{ public:
/// Element HelloResult of type "https://www.crash-server.com/":Response.
    ns1__Response*                       HelloResult                    0;  ///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "https://www.crash-server.com/":UploadMiniDump

/// "https://www.crash-server.com/":UploadMiniDump is a complexType.
class _ns1__UploadMiniDump
{ public:
/// Element client of type "https://www.crash-server.com/":ClientLib.
    ns1__ClientLib*                      client                         0;  ///< Optional element.
/// Element app of type "https://www.crash-server.com/":Application.
    ns1__Application*                    app                            0;  ///< Optional element.
/// Element mainModule of type xs:string.
    std::wstring*                        mainModule                     0;  ///< Optional element.
/// Element PCID of type xs:int.
    int                                  PCID                           1;  ///< Required element.
/// Element submitterID of type xs:int.
    int                                  submitterID                    1;  ///< Required element.
/// Element dump of type xs:base64Binary.
    _xop__Include*                       dump                           0;  ///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "https://www.crash-server.com/":UploadMiniDumpResponse

/// "https://www.crash-server.com/":UploadMiniDumpResponse is a complexType.
class _ns1__UploadMiniDumpResponse
{ public:
/// Element UploadMiniDumpResult of type "https://www.crash-server.com/":Response.
    ns1__Response*                       UploadMiniDumpResult           0;  ///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "https://www.crash-server.com/":UploadAdditionalInfo

/// "https://www.crash-server.com/":UploadAdditionalInfo is a complexType.
class _ns1__UploadAdditionalInfo
{ public:
/// Element client of type "https://www.crash-server.com/":ClientLib.
    ns1__ClientLib*                      client                         0;  ///< Optional element.
/// Element app of type "https://www.crash-server.com/":Application.
    ns1__Application*                    app                            0;  ///< Optional element.
/// Element mainModule of type xs:string.
    std::wstring*                        mainModule                     0;  ///< Optional element.
/// Element miniDumpID of type xs:int.
    int                                  miniDumpID                     1;  ///< Required element.
/// Element info of type xs:base64Binary.
    _xop__Include*                       info                           0;  ///< Optional element.
/// Element infoType of type "https://www.crash-server.com/":AdditionalInfoType.
    enum ns1__AdditionalInfoType         infoType                       1;  ///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "https://www.crash-server.com/":UploadAdditionalInfoResponse

/// "https://www.crash-server.com/":UploadAdditionalInfoResponse is a complexType.
class _ns1__UploadAdditionalInfoResponse
{ public:
/// Element UploadAdditionalInfoResult of type "https://www.crash-server.com/":Response.
    ns1__Response*                       UploadAdditionalInfoResult     0;  ///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "https://www.crash-server.com/":UploadSymbol

/// "https://www.crash-server.com/":UploadSymbol is a complexType.
class _ns1__UploadSymbol
{ public:
/// Element client of type "https://www.crash-server.com/":ClientLib.
    ns1__ClientLib*                      client                         0;  ///< Optional element.
/// Element app of type "https://www.crash-server.com/":Application.
    ns1__Application*                    app                            0;  ///< Optional element.
/// Element publish of type xs:boolean.
    bool                                 publish                        1;  ///< Required element.
/// Element sym of type xs:base64Binary.
    _xop__Include*                       sym                            0;  ///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "https://www.crash-server.com/":UploadSymbolResponse

/// "https://www.crash-server.com/":UploadSymbolResponse is a complexType.
class _ns1__UploadSymbolResponse
{ public:
/// Element UploadSymbolResult of type xs:string.
    std::wstring*                        UploadSymbolResult             0;  ///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://microsoft.com/wsdl/types/                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   https://www.crash-server.com/                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   https://www.crash-server.com/                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://microsoft.com/wsdl/types/                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://microsoft.com/wsdl/types/                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns3  service name:  UploaderSoap
//gsoap ns3  service type:  UploaderSoap
//gsoap ns3  service port:  http://localhost:59175/DumpUploader.asmx
//gsoap ns3  service namespace: https://www.crash-server.com/UploaderSoap
//gsoap ns3  service transport: http://schemas.xmlsoap.org/soap/http

//gsoap ns4  service name:  UploaderSoap12
//gsoap ns4  service type:  UploaderSoap
//gsoap ns4  service port:  http://localhost:59175/DumpUploader.asmx
//gsoap ns4  service namespace: https://www.crash-server.com/UploaderSoap12
//gsoap ns4  service transport: http://schemas.xmlsoap.org/soap/http

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref UploaderSoap

  - @ref UploaderSoap12

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page UploaderSoap Binding "UploaderSoap"

@section UploaderSoap_operations Operations of Binding  "UploaderSoap"

  - @ref __ns3__Hello

  - @ref __ns3__UploadMiniDump

  - @ref __ns3__UploadAdditionalInfo

  - @ref __ns3__UploadSymbol

@section UploaderSoap_ports Endpoints of Binding  "UploaderSoap"

  - http://localhost:59175/DumpUploader.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page UploaderSoap12 Binding "UploaderSoap12"

@section UploaderSoap12_operations Operations of Binding  "UploaderSoap12"

  - @ref __ns4__Hello

  - @ref __ns4__UploadMiniDump

  - @ref __ns4__UploadAdditionalInfo

  - @ref __ns4__UploadSymbol

@section UploaderSoap12_ports Endpoints of Binding  "UploaderSoap12"

  - http://localhost:59175/DumpUploader.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   UploaderSoap                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__Hello                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__Hello" of service binding "UploaderSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="https://www.crash-server.com/Hello"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__Hello(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__Hello*                        ns1__Hello,
    // response parameters:
    _ns1__HelloResponse*                ns1__HelloResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__Hello(
    struct soap *soap,
    // request parameters:
    _ns1__Hello*                        ns1__Hello,
    // response parameters:
    _ns1__HelloResponse*                ns1__HelloResponse
  );
@endcode

C++ proxy class (defined in soapUploaderSoapProxy.h):
@code
  class UploaderSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUploaderSoapService.h):
@code
  class UploaderSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:  Hello document
//gsoap ns3  service method-encoding:   Hello literal
//gsoap ns3  service method-action: Hello https://www.crash-server.com/Hello
int __ns3__Hello(
    _ns1__Hello*                        ns1__Hello, ///< Request parameter
    _ns1__HelloResponse*                ns1__HelloResponse  ///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__UploadMiniDump                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__UploadMiniDump" of service binding "UploaderSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="https://www.crash-server.com/UploadMiniDump"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__UploadMiniDump(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__UploadMiniDump*               ns1__UploadMiniDump,
    // response parameters:
    _ns1__UploadMiniDumpResponse*       ns1__UploadMiniDumpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__UploadMiniDump(
    struct soap *soap,
    // request parameters:
    _ns1__UploadMiniDump*               ns1__UploadMiniDump,
    // response parameters:
    _ns1__UploadMiniDumpResponse*       ns1__UploadMiniDumpResponse
  );
@endcode

C++ proxy class (defined in soapUploaderSoapProxy.h):
@code
  class UploaderSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUploaderSoapService.h):
@code
  class UploaderSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:  UploadMiniDump document
//gsoap ns3  service method-encoding:   UploadMiniDump literal
//gsoap ns3  service method-action: UploadMiniDump https://www.crash-server.com/UploadMiniDump
int __ns3__UploadMiniDump(
    _ns1__UploadMiniDump*               ns1__UploadMiniDump,    ///< Request parameter
    _ns1__UploadMiniDumpResponse*       ns1__UploadMiniDumpResponse ///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__UploadAdditionalInfo                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__UploadAdditionalInfo" of service binding "UploaderSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="https://www.crash-server.com/UploadAdditionalInfo"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__UploadAdditionalInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__UploadAdditionalInfo*         ns1__UploadAdditionalInfo,
    // response parameters:
    _ns1__UploadAdditionalInfoResponse* ns1__UploadAdditionalInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__UploadAdditionalInfo(
    struct soap *soap,
    // request parameters:
    _ns1__UploadAdditionalInfo*         ns1__UploadAdditionalInfo,
    // response parameters:
    _ns1__UploadAdditionalInfoResponse* ns1__UploadAdditionalInfoResponse
  );
@endcode

C++ proxy class (defined in soapUploaderSoapProxy.h):
@code
  class UploaderSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUploaderSoapService.h):
@code
  class UploaderSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:  UploadAdditionalInfo document
//gsoap ns3  service method-encoding:   UploadAdditionalInfo literal
//gsoap ns3  service method-action: UploadAdditionalInfo https://www.crash-server.com/UploadAdditionalInfo
int __ns3__UploadAdditionalInfo(
    _ns1__UploadAdditionalInfo*         ns1__UploadAdditionalInfo,  ///< Request parameter
    _ns1__UploadAdditionalInfoResponse* ns1__UploadAdditionalInfoResponse   ///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__UploadSymbol                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__UploadSymbol" of service binding "UploaderSoap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="https://www.crash-server.com/UploadSymbol"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__UploadSymbol(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__UploadSymbol*                 ns1__UploadSymbol,
    // response parameters:
    _ns1__UploadSymbolResponse*         ns1__UploadSymbolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__UploadSymbol(
    struct soap *soap,
    // request parameters:
    _ns1__UploadSymbol*                 ns1__UploadSymbol,
    // response parameters:
    _ns1__UploadSymbolResponse*         ns1__UploadSymbolResponse
  );
@endcode

C++ proxy class (defined in soapUploaderSoapProxy.h):
@code
  class UploaderSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUploaderSoapService.h):
@code
  class UploaderSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:  UploadSymbol document
//gsoap ns3  service method-encoding:   UploadSymbol literal
//gsoap ns3  service method-action: UploadSymbol https://www.crash-server.com/UploadSymbol
int __ns3__UploadSymbol(
    _ns1__UploadSymbol*                 ns1__UploadSymbol,  ///< Request parameter
    _ns1__UploadSymbolResponse*         ns1__UploadSymbolResponse   ///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   UploaderSoap12                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__Hello                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__Hello" of service binding "UploaderSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="https://www.crash-server.com/Hello"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__Hello(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__Hello*                        ns1__Hello,
    // response parameters:
    _ns1__HelloResponse*                ns1__HelloResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__Hello(
    struct soap *soap,
    // request parameters:
    _ns1__Hello*                        ns1__Hello,
    // response parameters:
    _ns1__HelloResponse*                ns1__HelloResponse
  );
@endcode

C++ proxy class (defined in soapUploaderSoap12Proxy.h):
@code
  class UploaderSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUploaderSoap12Service.h):
@code
  class UploaderSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:  Hello document
//gsoap ns4  service method-encoding:   Hello literal
//gsoap ns4  service method-action: Hello https://www.crash-server.com/Hello
int __ns4__Hello(
    _ns1__Hello*                        ns1__Hello, ///< Request parameter
    _ns1__HelloResponse*                ns1__HelloResponse  ///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__UploadMiniDump                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__UploadMiniDump" of service binding "UploaderSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="https://www.crash-server.com/UploadMiniDump"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__UploadMiniDump(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__UploadMiniDump*               ns1__UploadMiniDump,
    // response parameters:
    _ns1__UploadMiniDumpResponse*       ns1__UploadMiniDumpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__UploadMiniDump(
    struct soap *soap,
    // request parameters:
    _ns1__UploadMiniDump*               ns1__UploadMiniDump,
    // response parameters:
    _ns1__UploadMiniDumpResponse*       ns1__UploadMiniDumpResponse
  );
@endcode

C++ proxy class (defined in soapUploaderSoap12Proxy.h):
@code
  class UploaderSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUploaderSoap12Service.h):
@code
  class UploaderSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:  UploadMiniDump document
//gsoap ns4  service method-encoding:   UploadMiniDump literal
//gsoap ns4  service method-action: UploadMiniDump https://www.crash-server.com/UploadMiniDump
int __ns4__UploadMiniDump(
    _ns1__UploadMiniDump*               ns1__UploadMiniDump,    ///< Request parameter
    _ns1__UploadMiniDumpResponse*       ns1__UploadMiniDumpResponse ///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__UploadAdditionalInfo                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__UploadAdditionalInfo" of service binding "UploaderSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="https://www.crash-server.com/UploadAdditionalInfo"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__UploadAdditionalInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__UploadAdditionalInfo*         ns1__UploadAdditionalInfo,
    // response parameters:
    _ns1__UploadAdditionalInfoResponse* ns1__UploadAdditionalInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__UploadAdditionalInfo(
    struct soap *soap,
    // request parameters:
    _ns1__UploadAdditionalInfo*         ns1__UploadAdditionalInfo,
    // response parameters:
    _ns1__UploadAdditionalInfoResponse* ns1__UploadAdditionalInfoResponse
  );
@endcode

C++ proxy class (defined in soapUploaderSoap12Proxy.h):
@code
  class UploaderSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUploaderSoap12Service.h):
@code
  class UploaderSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:  UploadAdditionalInfo document
//gsoap ns4  service method-encoding:   UploadAdditionalInfo literal
//gsoap ns4  service method-action: UploadAdditionalInfo https://www.crash-server.com/UploadAdditionalInfo
int __ns4__UploadAdditionalInfo(
    _ns1__UploadAdditionalInfo*         ns1__UploadAdditionalInfo,  ///< Request parameter
    _ns1__UploadAdditionalInfoResponse* ns1__UploadAdditionalInfoResponse   ///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns4__UploadSymbol                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns4__UploadSymbol" of service binding "UploaderSoap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="https://www.crash-server.com/UploadSymbol"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns4__UploadSymbol(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__UploadSymbol*                 ns1__UploadSymbol,
    // response parameters:
    _ns1__UploadSymbolResponse*         ns1__UploadSymbolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns4__UploadSymbol(
    struct soap *soap,
    // request parameters:
    _ns1__UploadSymbol*                 ns1__UploadSymbol,
    // response parameters:
    _ns1__UploadSymbolResponse*         ns1__UploadSymbolResponse
  );
@endcode

C++ proxy class (defined in soapUploaderSoap12Proxy.h):
@code
  class UploaderSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapUploaderSoap12Service.h):
@code
  class UploaderSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns4  service method-style:  UploadSymbol document
//gsoap ns4  service method-encoding:   UploadSymbol literal
//gsoap ns4  service method-action: UploadSymbol https://www.crash-server.com/UploadSymbol
int __ns4__UploadSymbol(
    _ns1__UploadSymbol*                 ns1__UploadSymbol,  ///< Request parameter
    _ns1__UploadSymbolResponse*         ns1__UploadSymbolResponse   ///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "https://www.crash-server.com/"

  - <ns1:Hello> @ref _ns1__Hello
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Hello(struct soap*, _ns1__Hello*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Hello(struct soap*, _ns1__Hello*);
    @endcode

  - <ns1:HelloResponse> @ref _ns1__HelloResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__HelloResponse(struct soap*, _ns1__HelloResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__HelloResponse(struct soap*, _ns1__HelloResponse*);
    @endcode

  - <ns1:UploadMiniDump> @ref _ns1__UploadMiniDump
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadMiniDump(struct soap*, _ns1__UploadMiniDump*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadMiniDump(struct soap*, _ns1__UploadMiniDump*);
    @endcode

  - <ns1:UploadMiniDumpResponse> @ref _ns1__UploadMiniDumpResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadMiniDumpResponse(struct soap*, _ns1__UploadMiniDumpResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadMiniDumpResponse(struct soap*, _ns1__UploadMiniDumpResponse*);
    @endcode

  - <ns1:UploadAdditionalInfo> @ref _ns1__UploadAdditionalInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadAdditionalInfo(struct soap*, _ns1__UploadAdditionalInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadAdditionalInfo(struct soap*, _ns1__UploadAdditionalInfo*);
    @endcode

  - <ns1:UploadAdditionalInfoResponse> @ref _ns1__UploadAdditionalInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadAdditionalInfoResponse(struct soap*, _ns1__UploadAdditionalInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadAdditionalInfoResponse(struct soap*, _ns1__UploadAdditionalInfoResponse*);
    @endcode

  - <ns1:UploadSymbol> @ref _ns1__UploadSymbol
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadSymbol(struct soap*, _ns1__UploadSymbol*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadSymbol(struct soap*, _ns1__UploadSymbol*);
    @endcode

  - <ns1:UploadSymbolResponse> @ref _ns1__UploadSymbolResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadSymbolResponse(struct soap*, _ns1__UploadSymbolResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadSymbolResponse(struct soap*, _ns1__UploadSymbolResponse*);
    @endcode

@section ns2 Top-level root elements of schema "http://microsoft.com/wsdl/types/"

*/

/* End of DumpUploader.h */
