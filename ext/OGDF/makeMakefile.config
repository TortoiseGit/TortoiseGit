[GENERAL]
#**********************************************************
#* build OGDF as a static library (false) or shared library (true)
sharedLib = false

#* name of the static (import) library
libName = libOGDF.a 
#* name of the shared library (.dll for Windows, .so for Linux)
sharedlibName = libOGDF.so

compilerCommand = g++
compilerParams = -I.

#* command used to create a static library
libCommand = ar
#* command used to create a shared library
sharedlibCommand = g++

#* blank means don't call ranlib
ranlibCommand = ranlib

#* gccMessageLength: if not defined -> no param
#* set to 0 for use in IDEs (0 = no line breaks)
gccMessageLength = 0

rmCommand = rm -rf
mkdirCommand = mkdir -p

#* the option below does not work in public releases,
#* as the solver is non-GPL. Please use COIN instead! 
useOwnLpSolver = false
includeLegacyCode = false


[VERSIONS] 
#**********************************************************
#* for each entry <XYZ>, makeMakefile will generate a 
#*    <XYZ> and clean<XYZ> Make-target 
debug = -g3 -O0 -DOGDF_DEBUG
release = -O2


[COIN]
#**********************************************************
#* set to "true" to use COIN
useCoin = false
coinIncl = /somewhere/COIN/include

#* Select your solver for COIN
#* CPLEX:
# solver_name = COIN_OSI_CPX
# solver_incl = /somewhere/ILOG/cplex90/include/ilcplex
#* Coin's CLP:
# solver_name =  COIN_OSI_CLP
# solver_incl = 
#* Coin's Symphony
# solver_name =  COIN_OSI_SYM
# solver_incl = /home/plug/COIN/SYMPHONY/include

#* For compilation of a executable program, you have to link against the corresponding libraries.
#* Use parameters like:
#*   for COIN itself: "-L/somewhere/COIN/lib -lCoinUtils -lOsi"
#*   for CPLEX:       "-L/somewhere/CPLEX/bin/i86_linux2_glibc2.3_gcc3.2 -lcplex90 -lOsiCpx"
#*   for CLP:         "-L/home/plug/COIN/lib -lOsiClp -lClp"
#*   for Symphony:    "-L/comewhere/COIN/SYMPHONY/lib -lsym -lOsiSym"
#*
#* ATTENTION: When compiling your executable, you have to set the compiler-flags just as 
#*            you did for OGDF


[ABACUS]
#**********************************************************
useAbacus = false
# abacusDef = -DABACUS_COMPILER_GCC
# abacusIncl = /somewhere/abacus/include
# abacusLib = -L/somewhere/abacus/lib/linux-gcc33 -labacus-cplex80
